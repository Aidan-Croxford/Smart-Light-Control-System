
E-Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800b018  0800b018  0001b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1c4  0800b1c4  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1c4  0800b1c4  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1c4  0800b1c4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800b1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020190  2**0
                  CONTENTS
 10 .bss          000003e4  20000190  20000190  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  00020190  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2ad  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b51  00000000  00000000  0003a46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003dfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001300  00000000  00000000  0003f478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024db1  00000000  00000000  00040778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee3f  00000000  00000000  00065529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8873  00000000  00000000  00084368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015cbdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b60  00000000  00000000  0015cc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b000 	.word	0x0800b000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800b000 	.word	0x0800b000

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr
 8000adc:	0000      	movs	r0, r0
	...

08000ae0 <TrackPadInput>:

char Test[4]; //Testing char array

//////////////////////////////////////Local Function Variables////////////////////////////////////////////

void TrackPadInput(){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0a2      	sub	sp, #136	; 0x88
 8000ae4:	af00      	add	r7, sp, #0

		if (HAL_GetTick()-slideTime>250){//The user has stopped sliding for over 250ms
 8000ae6:	f002 ff45 	bl	8003974 <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	4bb2      	ldr	r3, [pc, #712]	; (8000db8 <TrackPadInput+0x2d8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	2bfa      	cmp	r3, #250	; 0xfa
 8000af4:	d902      	bls.n	8000afc <TrackPadInput+0x1c>

			slideDelay=0;//Reset the delay needed to start a slide motion
 8000af6:	4bb1      	ldr	r3, [pc, #708]	; (8000dbc <TrackPadInput+0x2dc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
		}



		Gesture prevGesture=NoGesture;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

		uint8_t gestureData[10];

		uint16_t relX=0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		uint16_t relY=0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		uint16_t absX=0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		int16_t  deltaX=0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

		int16_t absY=0;//Cannot be unsigned because of the inversion steps taken
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		char relXStr[25],relYStr[25],absXStr[25],absYStr[25];



		readByte(IQS7211A_MM_GESTURES,10,gestureData);
 8000b20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b24:	461a      	mov	r2, r3
 8000b26:	210a      	movs	r1, #10
 8000b28:	2011      	movs	r0, #17
 8000b2a:	f001 fadb 	bl	80020e4 <readByte>


			relX= (uint16_t)gestureData[2];
 8000b2e:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000b32:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			relX|= (uint16_t)(gestureData[3]<<8);
 8000b36:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000b44:	4313      	orrs	r3, r2
 8000b46:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			relY= (uint16_t)gestureData[4];
 8000b4a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000b4e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			relY|= (uint16_t)(gestureData[5]<<8);
 8000b52:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000b60:	4313      	orrs	r3, r2
 8000b62:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

			absX= (uint16_t)gestureData[6];
 8000b66:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000b6a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			absX|= (uint16_t)(gestureData[7]<<8);
 8000b6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
			absY= (int16_t)gestureData[8];
 8000b82:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000b86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			absY|= (int16_t)(gestureData[9]<<8);
 8000b8a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000b96:	4313      	orrs	r3, r2
 8000b98:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			///////////Invert Y Values////////////////
			absY-=766;
 8000b9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8000ba0:	f2a3 23fe 	subw	r3, r3, #766	; 0x2fe
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			absY=absY*-0.7014;
 8000baa:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fcd0 	bl	8000554 <__aeabi_i2d>
 8000bb4:	a37e      	add	r3, pc, #504	; (adr r3, 8000db0 <TrackPadInput+0x2d0>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fd35 	bl	8000628 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f7ff ff41 	bl	8000a4c <__aeabi_d2iz>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			if(absY>510){absY=512;}
 8000bd0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8000bd4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000bd8:	dd03      	ble.n	8000be2 <TrackPadInput+0x102>
 8000bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bde:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			if(absY<5){absY=0;}
 8000be2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	dc02      	bgt.n	8000bf0 <TrackPadInput+0x110>
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			sprintf(absXStr,"Absolute X: %05d\n",absX);
			sprintf(absYStr,"Absolute Y: %05d\n",absY);*/

			//HAL_UART_Transmit(&huart2,(uint16_t*)relXStr,strlen(relXStr),50);

			switch (gestureData[0]){
 8000bf0:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000bf4:	2b20      	cmp	r3, #32
 8000bf6:	f200 8167 	bhi.w	8000ec8 <TrackPadInput+0x3e8>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <TrackPadInput+0x120>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000d87 	.word	0x08000d87
 8000c04:	08000c85 	.word	0x08000c85
 8000c08:	08000d3b 	.word	0x08000d3b
 8000c0c:	08000ec9 	.word	0x08000ec9
 8000c10:	08000d4f 	.word	0x08000d4f
 8000c14:	08000ec9 	.word	0x08000ec9
 8000c18:	08000ec9 	.word	0x08000ec9
 8000c1c:	08000ec9 	.word	0x08000ec9
 8000c20:	08000d5d 	.word	0x08000d5d
 8000c24:	08000ec9 	.word	0x08000ec9
 8000c28:	08000ec9 	.word	0x08000ec9
 8000c2c:	08000ec9 	.word	0x08000ec9
 8000c30:	08000ec9 	.word	0x08000ec9
 8000c34:	08000ec9 	.word	0x08000ec9
 8000c38:	08000ec9 	.word	0x08000ec9
 8000c3c:	08000ec9 	.word	0x08000ec9
 8000c40:	08000d6b 	.word	0x08000d6b
 8000c44:	08000ec9 	.word	0x08000ec9
 8000c48:	08000ec9 	.word	0x08000ec9
 8000c4c:	08000ec9 	.word	0x08000ec9
 8000c50:	08000ec9 	.word	0x08000ec9
 8000c54:	08000ec9 	.word	0x08000ec9
 8000c58:	08000ec9 	.word	0x08000ec9
 8000c5c:	08000ec9 	.word	0x08000ec9
 8000c60:	08000ec9 	.word	0x08000ec9
 8000c64:	08000ec9 	.word	0x08000ec9
 8000c68:	08000ec9 	.word	0x08000ec9
 8000c6c:	08000ec9 	.word	0x08000ec9
 8000c70:	08000ec9 	.word	0x08000ec9
 8000c74:	08000ec9 	.word	0x08000ec9
 8000c78:	08000ec9 	.word	0x08000ec9
 8000c7c:	08000ec9 	.word	0x08000ec9
 8000c80:	08000d79 	.word	0x08000d79

			case Tap:
				if(current_state==Emergency){
 8000c84:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <TrackPadInput+0x2e0>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d131      	bne.n	8000cf0 <TrackPadInput+0x210>

					if ((current_emergency==Strobe)){
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <TrackPadInput+0x2e4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d109      	bne.n	8000ca8 <TrackPadInput+0x1c8>
										Morse_Index=0;//Resets the morse index on changing state
 8000c94:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <TrackPadInput+0x2e8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
										Strobe_Flag=0;//Starts in off state
 8000c9a:	4b4c      	ldr	r3, [pc, #304]	; (8000dcc <TrackPadInput+0x2ec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
										Morse_Length=12;
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <TrackPadInput+0x2f0>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	e011      	b.n	8000ccc <TrackPadInput+0x1ec>
										//White_LED=1;
									}else if (current_emergency==SOS){
 8000ca8:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <TrackPadInput+0x2e4>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d10d      	bne.n	8000ccc <TrackPadInput+0x1ec>

										//strcpy(CustomMessage,SOS_Morse);
										//Morse_Length=9;
										//White_LED=1;
										if (CustomSet){
 8000cb0:	4b48      	ldr	r3, [pc, #288]	; (8000dd4 <TrackPadInput+0x2f4>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <TrackPadInput+0x1e0>
											Morse_Length=Custom_Length;
 8000cb8:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <TrackPadInput+0x2f8>)
 8000cba:	781a      	ldrb	r2, [r3, #0]
 8000cbc:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <TrackPadInput+0x2f0>)
 8000cbe:	701a      	strb	r2, [r3, #0]
										}
										Morse_Index=0;//Resets the morse index on changing state
 8000cc0:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <TrackPadInput+0x2e8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
										Strobe_Flag=0;//Starts in off state
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <TrackPadInput+0x2ec>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
									}
									if (current_emergency==custom_message){
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <TrackPadInput+0x2e4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d107      	bne.n	8000ce4 <TrackPadInput+0x204>
										current_emergency=Strobe;
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <TrackPadInput+0x2e4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
										Strobe_Time=512;
 8000cda:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <TrackPadInput+0x2fc>)
 8000cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce0:	801a      	strh	r2, [r3, #0]
 8000ce2:	e005      	b.n	8000cf0 <TrackPadInput+0x210>
									}else current_emergency++;
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <TrackPadInput+0x2e4>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <TrackPadInput+0x2e4>)
 8000cee:	701a      	strb	r2, [r3, #0]
							}
				if (current_state==Mood){
 8000cf0:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <TrackPadInput+0x2e0>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d119      	bne.n	8000d2c <TrackPadInput+0x24c>

					if (absX>1172){
 8000cf8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000cfc:	f240 4294 	movw	r2, #1172	; 0x494
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d904      	bls.n	8000d0e <TrackPadInput+0x22e>
						Blue_Intensity=absY;
 8000d04:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <TrackPadInput+0x300>)
 8000d0a:	801a      	strh	r2, [r3, #0]
 8000d0c:	e00e      	b.n	8000d2c <TrackPadInput+0x24c>
					}else if (absX>586){
 8000d0e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000d12:	f240 224a 	movw	r2, #586	; 0x24a
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d904      	bls.n	8000d24 <TrackPadInput+0x244>
						Green_Intensity=absY;
 8000d1a:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <TrackPadInput+0x304>)
 8000d20:	801a      	strh	r2, [r3, #0]
 8000d22:	e003      	b.n	8000d2c <TrackPadInput+0x24c>
					}else{
						Red_Intensity=absY;
 8000d24:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000d28:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <TrackPadInput+0x308>)
 8000d2a:	801a      	strh	r2, [r3, #0]
					}
				}
				slideDelay=0;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <TrackPadInput+0x2dc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart2,(uint8_t*)"Tap\n",strlen("Tap\n"),50);
				prevGesture=Tap;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				break;
 8000d38:	e0c7      	b.n	8000eca <TrackPadInput+0x3ea>
			case Hold:
				HoldFlag=1;
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <TrackPadInput+0x30c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
				slideDelay=0;
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <TrackPadInput+0x2dc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
				prevGesture=Hold;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				break;
 8000d4c:	e0bd      	b.n	8000eca <TrackPadInput+0x3ea>
			case SwipeLeft:
				//HAL_UART_Transmit(&huart2,(uint8_t*)"SwipeLeft\n",10,50);
				slideDelay=0;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <TrackPadInput+0x2dc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
				prevGesture=SwipeLeft;
 8000d54:	2304      	movs	r3, #4
 8000d56:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				break;
 8000d5a:	e0b6      	b.n	8000eca <TrackPadInput+0x3ea>
			case SwipeRight:
				//HAL_UART_Transmit(&huart2,(uint8_t*)"SwipeRight\n",11,50);
				slideDelay=0;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <TrackPadInput+0x2dc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
				prevGesture=SwipeRight;
 8000d62:	2308      	movs	r3, #8
 8000d64:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				break;
 8000d68:	e0af      	b.n	8000eca <TrackPadInput+0x3ea>
			case SwipeUp:
				//HAL_UART_Transmit(&huart2,(uint8_t*)"SwipeUp\n",strlen("SwipeUp\n"),50);
				slideDelay=0;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <TrackPadInput+0x2dc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
				prevGesture=SwipeUp;
 8000d70:	2310      	movs	r3, #16
 8000d72:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				break;
 8000d76:	e0a8      	b.n	8000eca <TrackPadInput+0x3ea>
			case SwipeDown:
				//HAL_UART_Transmit(&huart2,(uint8_t*)"SwipeDown\n",strlen("SwipeDown\n"),50);
				slideDelay=0;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <TrackPadInput+0x2dc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
				prevGesture=SwipeDown;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
				break;
 8000d84:	e0a1      	b.n	8000eca <TrackPadInput+0x3ea>
			case NoGesture:
				if (HoldFlag){
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <TrackPadInput+0x30c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d032      	beq.n	8000df4 <TrackPadInput+0x314>
					White_LED= !White_LED;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <TrackPadInput+0x310>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf0c      	ite	eq
 8000d96:	2301      	moveq	r3, #1
 8000d98:	2300      	movne	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <TrackPadInput+0x310>)
 8000da0:	701a      	strb	r2, [r3, #0]
					HoldFlag=0;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <TrackPadInput+0x30c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
					slideDelay=0;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <TrackPadInput+0x2dc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e087      	b.n	8000ec0 <TrackPadInput+0x3e0>
 8000db0:	69ad42c4 	.word	0x69ad42c4
 8000db4:	bfe671de 	.word	0xbfe671de
 8000db8:	200001c8 	.word	0x200001c8
 8000dbc:	200001c4 	.word	0x200001c4
 8000dc0:	20000119 	.word	0x20000119
 8000dc4:	2000011a 	.word	0x2000011a
 8000dc8:	20000274 	.word	0x20000274
 8000dcc:	20000270 	.word	0x20000270
 8000dd0:	2000003c 	.word	0x2000003c
 8000dd4:	200001fb 	.word	0x200001fb
 8000dd8:	2000003d 	.word	0x2000003d
 8000ddc:	2000011c 	.word	0x2000011c
 8000de0:	200002c8 	.word	0x200002c8
 8000de4:	200002c6 	.word	0x200002c6
 8000de8:	200002c4 	.word	0x200002c4
 8000dec:	200001c3 	.word	0x200001c3
 8000df0:	20000260 	.word	0x20000260
					//HAL_UART_Transmit(&huart2,(uint8_t*)"Toggled\n",strlen("Toggled\n"),50);
				}else if (slideDelay>=20){
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <TrackPadInput+0x408>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b13      	cmp	r3, #19
 8000dfa:	d952      	bls.n	8000ea2 <TrackPadInput+0x3c2>

					if ((absX<1792)&&(prevabsX<1792)){
 8000dfc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e04:	d25c      	bcs.n	8000ec0 <TrackPadInput+0x3e0>
 8000e06:	4b39      	ldr	r3, [pc, #228]	; (8000eec <TrackPadInput+0x40c>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e0e:	d257      	bcs.n	8000ec0 <TrackPadInput+0x3e0>

						deltaX=abs((absX-prevabsX))*0.388;
 8000e10:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000e14:	4a35      	ldr	r2, [pc, #212]	; (8000eec <TrackPadInput+0x40c>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bfb8      	it	lt
 8000e1e:	425b      	neglt	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fb97 	bl	8000554 <__aeabi_i2d>
 8000e26:	a32e      	add	r3, pc, #184	; (adr r3, 8000ee0 <TrackPadInput+0x400>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff fbfc 	bl	8000628 <__aeabi_dmul>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4610      	mov	r0, r2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fe08 	bl	8000a4c <__aeabi_d2iz>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

						if(absX>prevabsX){
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <TrackPadInput+0x40c>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d908      	bls.n	8000e60 <TrackPadInput+0x380>
							Light_Intensity+=deltaX;
 8000e4e:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <TrackPadInput+0x410>)
 8000e50:	881a      	ldrh	r2, [r3, #0]
 8000e52:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000e56:	4413      	add	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <TrackPadInput+0x410>)
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	e011      	b.n	8000e84 <TrackPadInput+0x3a4>
						}else {
							if (deltaX>=Light_Intensity){
 8000e60:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <TrackPadInput+0x410>)
 8000e66:	8812      	ldrh	r2, [r2, #0]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	db03      	blt.n	8000e74 <TrackPadInput+0x394>
								Light_Intensity=1;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <TrackPadInput+0x410>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	801a      	strh	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <TrackPadInput+0x3a4>
							}else{Light_Intensity-=deltaX;}
 8000e74:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <TrackPadInput+0x410>)
 8000e76:	881a      	ldrh	r2, [r3, #0]
 8000e78:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <TrackPadInput+0x410>)
 8000e82:	801a      	strh	r2, [r3, #0]
						}

						if (Light_Intensity>512){Light_Intensity=512;}
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <TrackPadInput+0x410>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e8c:	d903      	bls.n	8000e96 <TrackPadInput+0x3b6>
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <TrackPadInput+0x410>)
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	801a      	strh	r2, [r3, #0]

						slideTime=HAL_GetTick();//Updates the slide time to the most recent tick to show that the user is currently sliding
 8000e96:	f002 fd6d 	bl	8003974 <HAL_GetTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <TrackPadInput+0x414>)
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e00e      	b.n	8000ec0 <TrackPadInput+0x3e0>
						//sprintf(relXStr,"Intensity: %05d\n",Light_Intensity);
						//HAL_UART_Transmit(&huart2,(uint16_t*)relXStr,strlen(relXStr),50);
					}

				} else if (prevGesture==NoGesture){
 8000ea2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <TrackPadInput+0x3e0>
					slideDelay++;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <TrackPadInput+0x408>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <TrackPadInput+0x408>)
 8000eb4:	701a      	strb	r2, [r3, #0]
					slideTime=HAL_GetTick();//Updates the slide time to the most recent tick to show that the user is currently sliding
 8000eb6:	f002 fd5d 	bl	8003974 <HAL_GetTick>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <TrackPadInput+0x414>)
 8000ebe:	6013      	str	r3, [r2, #0]
				}
				prevGesture=NoGesture;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

				break;
 8000ec6:	e000      	b.n	8000eca <TrackPadInput+0x3ea>
			default:
				break;
 8000ec8:	bf00      	nop

			}
			prevabsX=absX;
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <TrackPadInput+0x40c>)
 8000ecc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000ed0:	8013      	strh	r3, [r2, #0]

}
 8000ed2:	bf00      	nop
 8000ed4:	3788      	adds	r7, #136	; 0x88
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	f3b645a2 	.word	0xf3b645a2
 8000ee4:	3fd8d4fd 	.word	0x3fd8d4fd
 8000ee8:	200001c4 	.word	0x200001c4
 8000eec:	200001c6 	.word	0x200001c6
 8000ef0:	200001ac 	.word	0x200001ac
 8000ef4:	200001c8 	.word	0x200001c8

08000ef8 <TrackPadSetup>:


void TrackPadSetup(){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0


	//Hardware Reset
	HAL_GPIO_WritePin(GPIOC, MCLR_Pin, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	4890      	ldr	r0, [pc, #576]	; (8001144 <TrackPadSetup+0x24c>)
 8000f04:	f004 fb5e 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f002 fd3f 	bl	800398c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, MCLR_Pin,1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	488c      	ldr	r0, [pc, #560]	; (8001144 <TrackPadSetup+0x24c>)
 8000f14:	f004 fb56 	bl	80055c4 <HAL_GPIO_WritePin>


	uint8_t setupBuffer[2];

	//Read Info Flags
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000f18:	bf00      	nop
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4889      	ldr	r0, [pc, #548]	; (8001144 <TrackPadSetup+0x24c>)
 8000f1e:	f004 fb39 	bl	8005594 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1f8      	bne.n	8000f1a <TrackPadSetup+0x22>
	readByte(IQS7211A_MM_INFOFLAGS,2,setupBuffer);
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	2010      	movs	r0, #16
 8000f30:	f001 f8d8 	bl	80020e4 <readByte>
	HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8000f34:	2001      	movs	r0, #1
 8000f36:	f002 fd29 	bl	800398c <HAL_Delay>
	setupBuffer[0]&=0x80;//Toggles all bits low to check if it has already been reset
 8000f3a:	793b      	ldrb	r3, [r7, #4]
 8000f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	713b      	strb	r3, [r7, #4]

	if (setupBuffer[0]==0){//Checks if the track pad has not been reset and then resets it
 8000f44:	793b      	ldrb	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d126      	bne.n	8000f98 <TrackPadSetup+0xa0>

		while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000f4a:	bf00      	nop
 8000f4c:	2120      	movs	r1, #32
 8000f4e:	487d      	ldr	r0, [pc, #500]	; (8001144 <TrackPadSetup+0x24c>)
 8000f50:	f004 fb20 	bl	8005594 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f8      	bne.n	8000f4c <TrackPadSetup+0x54>
		readByte(IQS7211A_MM_SYSTEM_CONTROL,2,setupBuffer);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2102      	movs	r1, #2
 8000f60:	2050      	movs	r0, #80	; 0x50
 8000f62:	f001 f8bf 	bl	80020e4 <readByte>
		HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8000f66:	2001      	movs	r0, #1
 8000f68:	f002 fd10 	bl	800398c <HAL_Delay>
		setupBuffer[1]|=0x02;
 8000f6c:	797b      	ldrb	r3, [r7, #5]
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	717b      	strb	r3, [r7, #5]
		while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000f76:	bf00      	nop
 8000f78:	2120      	movs	r1, #32
 8000f7a:	4872      	ldr	r0, [pc, #456]	; (8001144 <TrackPadSetup+0x24c>)
 8000f7c:	f004 fb0a 	bl	8005594 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f8      	bne.n	8000f78 <TrackPadSetup+0x80>
		writeByte(IQS7211A_MM_SYSTEM_CONTROL,2,setupBuffer);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	2050      	movs	r0, #80	; 0x50
 8000f8e:	f001 f88b 	bl	80020a8 <writeByte>
		HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8000f92:	2001      	movs	r0, #1
 8000f94:	f002 fcfa 	bl	800398c <HAL_Delay>

	}

	//Read 0x50, set bit 7 and write back to 0x50
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000f98:	bf00      	nop
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	4869      	ldr	r0, [pc, #420]	; (8001144 <TrackPadSetup+0x24c>)
 8000f9e:	f004 faf9 	bl	8005594 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f8      	bne.n	8000f9a <TrackPadSetup+0xa2>
	readByte(IQS7211A_MM_SYSTEM_CONTROL,2,setupBuffer);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	461a      	mov	r2, r3
 8000fac:	2102      	movs	r1, #2
 8000fae:	2050      	movs	r0, #80	; 0x50
 8000fb0:	f001 f898 	bl	80020e4 <readByte>
	HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f002 fce9 	bl	800398c <HAL_Delay>
	setupBuffer[0]|=0x80;//Reset the acknowledge bit
 8000fba:	793b      	ldrb	r3, [r7, #4]
 8000fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	713b      	strb	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000fc4:	bf00      	nop
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	485e      	ldr	r0, [pc, #376]	; (8001144 <TrackPadSetup+0x24c>)
 8000fca:	f004 fae3 	bl	8005594 <HAL_GPIO_ReadPin>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f8      	bne.n	8000fc6 <TrackPadSetup+0xce>
	writeByte(IQS7211A_MM_SYSTEM_CONTROL,2,setupBuffer);
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2102      	movs	r1, #2
 8000fda:	2050      	movs	r0, #80	; 0x50
 8000fdc:	f001 f864 	bl	80020a8 <writeByte>
	HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f002 fcd3 	bl	800398c <HAL_Delay>

	//Read Product Number
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000fe6:	bf00      	nop
 8000fe8:	2120      	movs	r1, #32
 8000fea:	4856      	ldr	r0, [pc, #344]	; (8001144 <TrackPadSetup+0x24c>)
 8000fec:	f004 fad2 	bl	8005594 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f8      	bne.n	8000fe8 <TrackPadSetup+0xf0>
	getProductNum();
 8000ff6:	f001 f89b 	bl	8002130 <getProductNum>

	//Write setting file
	writeMM();
 8000ffa:	f001 f8c1 	bl	8002180 <writeMM>

	//TP Re-ATI
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8000ffe:	bf00      	nop
 8001000:	2120      	movs	r1, #32
 8001002:	4850      	ldr	r0, [pc, #320]	; (8001144 <TrackPadSetup+0x24c>)
 8001004:	f004 fac6 	bl	8005594 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f8      	bne.n	8001000 <TrackPadSetup+0x108>
    readByte(IQS7211A_MM_SYSTEM_CONTROL,1,setupBuffer);
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	461a      	mov	r2, r3
 8001012:	2101      	movs	r1, #1
 8001014:	2050      	movs	r0, #80	; 0x50
 8001016:	f001 f865 	bl	80020e4 <readByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 800101a:	2001      	movs	r0, #1
 800101c:	f002 fcb6 	bl	800398c <HAL_Delay>
    setupBuffer[0]|=0x20;
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	b2db      	uxtb	r3, r3
 8001028:	713b      	strb	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 800102a:	bf00      	nop
 800102c:	2120      	movs	r1, #32
 800102e:	4845      	ldr	r0, [pc, #276]	; (8001144 <TrackPadSetup+0x24c>)
 8001030:	f004 fab0 	bl	8005594 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f8      	bne.n	800102c <TrackPadSetup+0x134>
    writeByte(IQS7211A_MM_SYSTEM_CONTROL,1,setupBuffer);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	461a      	mov	r2, r3
 800103e:	2101      	movs	r1, #1
 8001040:	2050      	movs	r0, #80	; 0x50
 8001042:	f001 f831 	bl	80020a8 <writeByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8001046:	2001      	movs	r0, #1
 8001048:	f002 fca0 	bl	800398c <HAL_Delay>

    //Enable Gesture Events
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 800104c:	bf00      	nop
 800104e:	2120      	movs	r1, #32
 8001050:	483c      	ldr	r0, [pc, #240]	; (8001144 <TrackPadSetup+0x24c>)
 8001052:	f004 fa9f 	bl	8005594 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f8      	bne.n	800104e <TrackPadSetup+0x156>
    readByte(IQS7211A_MM_CONFIG_SETTINGS,2,setupBuffer);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	461a      	mov	r2, r3
 8001060:	2102      	movs	r1, #2
 8001062:	2051      	movs	r0, #81	; 0x51
 8001064:	f001 f83e 	bl	80020e4 <readByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8001068:	2001      	movs	r0, #1
 800106a:	f002 fc8f 	bl	800398c <HAL_Delay>
    setupBuffer[1]|=0x02; //Enables gesture events
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	717b      	strb	r3, [r7, #5]
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8001078:	bf00      	nop
 800107a:	2120      	movs	r1, #32
 800107c:	4831      	ldr	r0, [pc, #196]	; (8001144 <TrackPadSetup+0x24c>)
 800107e:	f004 fa89 	bl	8005594 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f8      	bne.n	800107a <TrackPadSetup+0x182>
    writeByte(IQS7211A_MM_CONFIG_SETTINGS,2,setupBuffer);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	461a      	mov	r2, r3
 800108c:	2102      	movs	r1, #2
 800108e:	2051      	movs	r0, #81	; 0x51
 8001090:	f001 f80a 	bl	80020a8 <writeByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8001094:	2001      	movs	r0, #1
 8001096:	f002 fc79 	bl	800398c <HAL_Delay>

    //Enable Touch Pad Events
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 800109a:	bf00      	nop
 800109c:	2120      	movs	r1, #32
 800109e:	4829      	ldr	r0, [pc, #164]	; (8001144 <TrackPadSetup+0x24c>)
 80010a0:	f004 fa78 	bl	8005594 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f8      	bne.n	800109c <TrackPadSetup+0x1a4>
    readByte(IQS7211A_MM_CONFIG_SETTINGS,2,setupBuffer);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	461a      	mov	r2, r3
 80010ae:	2102      	movs	r1, #2
 80010b0:	2051      	movs	r0, #81	; 0x51
 80010b2:	f001 f817 	bl	80020e4 <readByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 80010b6:	2001      	movs	r0, #1
 80010b8:	f002 fc68 	bl	800398c <HAL_Delay>
    setupBuffer[1]|=0x04;
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	717b      	strb	r3, [r7, #5]
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 80010c6:	bf00      	nop
 80010c8:	2120      	movs	r1, #32
 80010ca:	481e      	ldr	r0, [pc, #120]	; (8001144 <TrackPadSetup+0x24c>)
 80010cc:	f004 fa62 	bl	8005594 <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f8      	bne.n	80010c8 <TrackPadSetup+0x1d0>
    writeByte(IQS7211A_MM_CONFIG_SETTINGS,2,setupBuffer);
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	461a      	mov	r2, r3
 80010da:	2102      	movs	r1, #2
 80010dc:	2051      	movs	r0, #81	; 0x51
 80010de:	f000 ffe3 	bl	80020a8 <writeByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 80010e2:	2001      	movs	r0, #1
 80010e4:	f002 fc52 	bl	800398c <HAL_Delay>

    //Set track pad to Event Mode
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 80010e8:	bf00      	nop
 80010ea:	2120      	movs	r1, #32
 80010ec:	4815      	ldr	r0, [pc, #84]	; (8001144 <TrackPadSetup+0x24c>)
 80010ee:	f004 fa51 	bl	8005594 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f8      	bne.n	80010ea <TrackPadSetup+0x1f2>
    readByte(IQS7211A_MM_CONFIG_SETTINGS,2,setupBuffer);
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	461a      	mov	r2, r3
 80010fc:	2102      	movs	r1, #2
 80010fe:	2051      	movs	r0, #81	; 0x51
 8001100:	f000 fff0 	bl	80020e4 <readByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8001104:	2001      	movs	r0, #1
 8001106:	f002 fc41 	bl	800398c <HAL_Delay>
    setupBuffer[1]|=0x01;
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	717b      	strb	r3, [r7, #5]
	while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8001114:	bf00      	nop
 8001116:	2120      	movs	r1, #32
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <TrackPadSetup+0x24c>)
 800111a:	f004 fa3b 	bl	8005594 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f8      	bne.n	8001116 <TrackPadSetup+0x21e>
    writeByte(IQS7211A_MM_CONFIG_SETTINGS,2,setupBuffer);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	461a      	mov	r2, r3
 8001128:	2102      	movs	r1, #2
 800112a:	2051      	movs	r0, #81	; 0x51
 800112c:	f000 ffbc 	bl	80020a8 <writeByte>
    HAL_Delay(1);//This is just here to prevent another read/write byte starting immediately as this one ends corrupting data
 8001130:	2001      	movs	r0, #1
 8001132:	f002 fc2b 	bl	800398c <HAL_Delay>

	//Set TrackPadSetup=1
    TrackPadReady=1;
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <TrackPadSetup+0x250>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]

   // HAL_UART_Transmit(&huart2,(uint8_t*)"TrackPad Ready\n",strlen("TrackPad Ready\n"),100);

}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	48000800 	.word	0x48000800
 8001148:	200001c2 	.word	0x200001c2

0800114c <HAL_UART_RxCpltCallback>:
}




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

	if (RxCharacter == '\n') { //The end of the command has been received
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_UART_RxCpltCallback+0x4c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b0a      	cmp	r3, #10
 800115a:	d108      	bne.n	800116e <HAL_UART_RxCpltCallback+0x22>
		UART_Command(UART_Index); //Calls the UART command function
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_UART_RxCpltCallback+0x50>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f821 	bl	80011a8 <UART_Command>
		UART_Index = 0;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_UART_RxCpltCallback+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e00a      	b.n	8001184 <HAL_UART_RxCpltCallback+0x38>

	} else {
		Command[UART_Index++] = RxCharacter;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_UART_RxCpltCallback+0x50>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	b2d1      	uxtb	r1, r2
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_UART_RxCpltCallback+0x50>)
 8001178:	7011      	strb	r1, [r2, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_UART_RxCpltCallback+0x4c>)
 800117e:	7819      	ldrb	r1, [r3, #0]
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HAL_UART_RxCpltCallback+0x54>)
 8001182:	5499      	strb	r1, [r3, r2]
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*) &RxCharacter, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	4904      	ldr	r1, [pc, #16]	; (8001198 <HAL_UART_RxCpltCallback+0x4c>)
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <HAL_UART_RxCpltCallback+0x58>)
 800118a:	f008 f857 	bl	800923c <HAL_UART_Receive_IT>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200002ca 	.word	0x200002ca
 800119c:	200001e5 	.word	0x200001e5
 80011a0:	200001cc 	.word	0x200001cc
 80011a4:	200004dc 	.word	0x200004dc

080011a8 <UART_Command>:

void UART_Command(uint8_t CommandLength) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]

	if ((Command[0] == '#') && (Command[CommandLength - 1] == '$')) { //Checks that a valid command has been received
 80011b2:	4b95      	ldr	r3, [pc, #596]	; (8001408 <UART_Command+0x260>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b23      	cmp	r3, #35	; 0x23
 80011b8:	f040 81c3 	bne.w	8001542 <UART_Command+0x39a>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	3b01      	subs	r3, #1
 80011c0:	4a91      	ldr	r2, [pc, #580]	; (8001408 <UART_Command+0x260>)
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	2b24      	cmp	r3, #36	; 0x24
 80011c6:	f040 81bc 	bne.w	8001542 <UART_Command+0x39a>

		if (CommandLength == 6) { //Checks to see if the command received is a request for system state updates
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	f040 80d4 	bne.w	800137a <UART_Command+0x1d2>
 80011d2:	4b8d      	ldr	r3, [pc, #564]	; (8001408 <UART_Command+0x260>)
 80011d4:	885a      	ldrh	r2, [r3, #2]

			memcpy(Mode, &Command[2], 2);
 80011d6:	4b8d      	ldr	r3, [pc, #564]	; (800140c <UART_Command+0x264>)
 80011d8:	801a      	strh	r2, [r3, #0]
			memset(DisplayState, '\0', sizeof(DisplayState)); //Resets the display state array
 80011da:	2213      	movs	r2, #19
 80011dc:	2100      	movs	r1, #0
 80011de:	488c      	ldr	r0, [pc, #560]	; (8001410 <UART_Command+0x268>)
 80011e0:	f009 f9f0 	bl	800a5c4 <memset>
			DisplayState[0] = '#';
 80011e4:	4b8a      	ldr	r3, [pc, #552]	; (8001410 <UART_Command+0x268>)
 80011e6:	2223      	movs	r2, #35	; 0x23
 80011e8:	701a      	strb	r2, [r3, #0]
			DisplayState[1] = ':';
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <UART_Command+0x268>)
 80011ec:	223a      	movs	r2, #58	; 0x3a
 80011ee:	705a      	strb	r2, [r3, #1]
			strcat(DisplayState, Mode); //#:MF
 80011f0:	4986      	ldr	r1, [pc, #536]	; (800140c <UART_Command+0x264>)
 80011f2:	4887      	ldr	r0, [pc, #540]	; (8001410 <UART_Command+0x268>)
 80011f4:	f009 fa0e 	bl	800a614 <strcat>
			strcat(DisplayState, ":"); //#:MF:
 80011f8:	4885      	ldr	r0, [pc, #532]	; (8001410 <UART_Command+0x268>)
 80011fa:	f7fe fffb 	bl	80001f4 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4b83      	ldr	r3, [pc, #524]	; (8001410 <UART_Command+0x268>)
 8001204:	4413      	add	r3, r2
 8001206:	4983      	ldr	r1, [pc, #524]	; (8001414 <UART_Command+0x26c>)
 8001208:	461a      	mov	r2, r3
 800120a:	460b      	mov	r3, r1
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	8013      	strh	r3, [r2, #0]

			switch (Mode[1]) {
 8001210:	4b7e      	ldr	r3, [pc, #504]	; (800140c <UART_Command+0x264>)
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	2b4d      	cmp	r3, #77	; 0x4d
 8001216:	d04f      	beq.n	80012b8 <UART_Command+0x110>
 8001218:	2b4d      	cmp	r3, #77	; 0x4d
 800121a:	dc6f      	bgt.n	80012fc <UART_Command+0x154>
 800121c:	2b45      	cmp	r3, #69	; 0x45
 800121e:	d017      	beq.n	8001250 <UART_Command+0xa8>
 8001220:	2b46      	cmp	r3, #70	; 0x46
 8001222:	d16b      	bne.n	80012fc <UART_Command+0x154>

			case 'F':
				if (White_LED == 1) {
 8001224:	4b7c      	ldr	r3, [pc, #496]	; (8001418 <UART_Command+0x270>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d107      	bne.n	800123c <UART_Command+0x94>
					sprintf(State, "%03d", Light_Intensity);
 800122c:	4b7b      	ldr	r3, [pc, #492]	; (800141c <UART_Command+0x274>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	497b      	ldr	r1, [pc, #492]	; (8001420 <UART_Command+0x278>)
 8001234:	487b      	ldr	r0, [pc, #492]	; (8001424 <UART_Command+0x27c>)
 8001236:	f009 f9cd 	bl	800a5d4 <siprintf>
 800123a:	e002      	b.n	8001242 <UART_Command+0x9a>
				} else {
					strcpy(State, "000");
 800123c:	4b79      	ldr	r3, [pc, #484]	; (8001424 <UART_Command+0x27c>)
 800123e:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <UART_Command+0x280>)
 8001240:	601a      	str	r2, [r3, #0]
				}

				strcpy(Param1, "000");
 8001242:	4b7a      	ldr	r3, [pc, #488]	; (800142c <UART_Command+0x284>)
 8001244:	4a78      	ldr	r2, [pc, #480]	; (8001428 <UART_Command+0x280>)
 8001246:	601a      	str	r2, [r3, #0]
				strcpy(Param2, "000");
 8001248:	4b79      	ldr	r3, [pc, #484]	; (8001430 <UART_Command+0x288>)
 800124a:	4a77      	ldr	r2, [pc, #476]	; (8001428 <UART_Command+0x280>)
 800124c:	601a      	str	r2, [r3, #0]
				break;
 800124e:	e055      	b.n	80012fc <UART_Command+0x154>

			case 'E':
				sprintf(State, "%03d", Light_Intensity);
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <UART_Command+0x274>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4972      	ldr	r1, [pc, #456]	; (8001420 <UART_Command+0x278>)
 8001258:	4872      	ldr	r0, [pc, #456]	; (8001424 <UART_Command+0x27c>)
 800125a:	f009 f9bb 	bl	800a5d4 <siprintf>
				sprintf(Param1, "%03d", Strobe_Time);
 800125e:	4b75      	ldr	r3, [pc, #468]	; (8001434 <UART_Command+0x28c>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	496e      	ldr	r1, [pc, #440]	; (8001420 <UART_Command+0x278>)
 8001266:	4871      	ldr	r0, [pc, #452]	; (800142c <UART_Command+0x284>)
 8001268:	f009 f9b4 	bl	800a5d4 <siprintf>
				if (Param1_int != 0) {
 800126c:	4b72      	ldr	r3, [pc, #456]	; (8001438 <UART_Command+0x290>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <UART_Command+0xd2>
					strcpy(Param2, "000");
 8001274:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <UART_Command+0x288>)
 8001276:	4a6c      	ldr	r2, [pc, #432]	; (8001428 <UART_Command+0x280>)
 8001278:	601a      	str	r2, [r3, #0]
				}
				if (current_emergency==Strobe){
 800127a:	4b70      	ldr	r3, [pc, #448]	; (800143c <UART_Command+0x294>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d103      	bne.n	800128a <UART_Command+0xe2>
					strcpy(Param2, "000");
 8001282:	4b6b      	ldr	r3, [pc, #428]	; (8001430 <UART_Command+0x288>)
 8001284:	4a68      	ldr	r2, [pc, #416]	; (8001428 <UART_Command+0x280>)
 8001286:	601a      	str	r2, [r3, #0]
				}else if (current_emergency==custom_message){
					strcpy(Param1, "000");
					strcpy(Param2, MorseParam2);
				}

				break;
 8001288:	e037      	b.n	80012fa <UART_Command+0x152>
				}else if (current_emergency==SOS) {
 800128a:	4b6c      	ldr	r3, [pc, #432]	; (800143c <UART_Command+0x294>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d106      	bne.n	80012a0 <UART_Command+0xf8>
					strcpy(Param1, "000");//TODO check that this must be zero when in SOS mode and UART requests state
 8001292:	4b66      	ldr	r3, [pc, #408]	; (800142c <UART_Command+0x284>)
 8001294:	4a64      	ldr	r2, [pc, #400]	; (8001428 <UART_Command+0x280>)
 8001296:	601a      	str	r2, [r3, #0]
					strcpy(Param2, "SOS");
 8001298:	4b65      	ldr	r3, [pc, #404]	; (8001430 <UART_Command+0x288>)
 800129a:	4a69      	ldr	r2, [pc, #420]	; (8001440 <UART_Command+0x298>)
 800129c:	601a      	str	r2, [r3, #0]
				break;
 800129e:	e02c      	b.n	80012fa <UART_Command+0x152>
				}else if (current_emergency==custom_message){
 80012a0:	4b66      	ldr	r3, [pc, #408]	; (800143c <UART_Command+0x294>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d128      	bne.n	80012fa <UART_Command+0x152>
					strcpy(Param1, "000");
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <UART_Command+0x284>)
 80012aa:	4a5f      	ldr	r2, [pc, #380]	; (8001428 <UART_Command+0x280>)
 80012ac:	601a      	str	r2, [r3, #0]
					strcpy(Param2, MorseParam2);
 80012ae:	4965      	ldr	r1, [pc, #404]	; (8001444 <UART_Command+0x29c>)
 80012b0:	485f      	ldr	r0, [pc, #380]	; (8001430 <UART_Command+0x288>)
 80012b2:	f009 f9be 	bl	800a632 <strcpy>
				break;
 80012b6:	e020      	b.n	80012fa <UART_Command+0x152>

			case 'M':
				sprintf(State, "%03d", Red_Intensity);
 80012b8:	4b63      	ldr	r3, [pc, #396]	; (8001448 <UART_Command+0x2a0>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4958      	ldr	r1, [pc, #352]	; (8001420 <UART_Command+0x278>)
 80012c0:	4858      	ldr	r0, [pc, #352]	; (8001424 <UART_Command+0x27c>)
 80012c2:	f009 f987 	bl	800a5d4 <siprintf>
				if (White_LED == 0) {
 80012c6:	4b54      	ldr	r3, [pc, #336]	; (8001418 <UART_Command+0x270>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <UART_Command+0x134>
								strcpy(Param1, "000");
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <UART_Command+0x284>)
 80012d0:	4a55      	ldr	r2, [pc, #340]	; (8001428 <UART_Command+0x280>)
 80012d2:	601a      	str	r2, [r3, #0]
								strcpy(Param2, "000");
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <UART_Command+0x288>)
 80012d6:	4a54      	ldr	r2, [pc, #336]	; (8001428 <UART_Command+0x280>)
 80012d8:	601a      	str	r2, [r3, #0]
				}else{
					sprintf(Param1, "%03d", Green_Intensity);
					sprintf(Param2, "%03d", Blue_Intensity);
				}
				break;
 80012da:	e00f      	b.n	80012fc <UART_Command+0x154>
					sprintf(Param1, "%03d", Green_Intensity);
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <UART_Command+0x2a4>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	494f      	ldr	r1, [pc, #316]	; (8001420 <UART_Command+0x278>)
 80012e4:	4851      	ldr	r0, [pc, #324]	; (800142c <UART_Command+0x284>)
 80012e6:	f009 f975 	bl	800a5d4 <siprintf>
					sprintf(Param2, "%03d", Blue_Intensity);
 80012ea:	4b59      	ldr	r3, [pc, #356]	; (8001450 <UART_Command+0x2a8>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	494b      	ldr	r1, [pc, #300]	; (8001420 <UART_Command+0x278>)
 80012f2:	484f      	ldr	r0, [pc, #316]	; (8001430 <UART_Command+0x288>)
 80012f4:	f009 f96e 	bl	800a5d4 <siprintf>
				break;
 80012f8:	e000      	b.n	80012fc <UART_Command+0x154>
				break;
 80012fa:	bf00      	nop

			}

			if (White_LED == 0) {
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <UART_Command+0x270>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <UART_Command+0x162>
				strcpy(State, "000");
 8001304:	4b47      	ldr	r3, [pc, #284]	; (8001424 <UART_Command+0x27c>)
 8001306:	4a48      	ldr	r2, [pc, #288]	; (8001428 <UART_Command+0x280>)
 8001308:	601a      	str	r2, [r3, #0]
			}
			strncat(DisplayState, State, 3); //#:MF:512
 800130a:	2203      	movs	r2, #3
 800130c:	4945      	ldr	r1, [pc, #276]	; (8001424 <UART_Command+0x27c>)
 800130e:	4840      	ldr	r0, [pc, #256]	; (8001410 <UART_Command+0x268>)
 8001310:	f009 f997 	bl	800a642 <strncat>
			strcat(DisplayState, ":");
 8001314:	483e      	ldr	r0, [pc, #248]	; (8001410 <UART_Command+0x268>)
 8001316:	f7fe ff6d 	bl	80001f4 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <UART_Command+0x268>)
 8001320:	4413      	add	r3, r2
 8001322:	493c      	ldr	r1, [pc, #240]	; (8001414 <UART_Command+0x26c>)
 8001324:	461a      	mov	r2, r3
 8001326:	460b      	mov	r3, r1
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	8013      	strh	r3, [r2, #0]
			strncat(DisplayState, Param1, 3); //#:MF:512:000
 800132c:	2203      	movs	r2, #3
 800132e:	493f      	ldr	r1, [pc, #252]	; (800142c <UART_Command+0x284>)
 8001330:	4837      	ldr	r0, [pc, #220]	; (8001410 <UART_Command+0x268>)
 8001332:	f009 f986 	bl	800a642 <strncat>
			strcat(DisplayState, ":");
 8001336:	4836      	ldr	r0, [pc, #216]	; (8001410 <UART_Command+0x268>)
 8001338:	f7fe ff5c 	bl	80001f4 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <UART_Command+0x268>)
 8001342:	4413      	add	r3, r2
 8001344:	4933      	ldr	r1, [pc, #204]	; (8001414 <UART_Command+0x26c>)
 8001346:	461a      	mov	r2, r3
 8001348:	460b      	mov	r3, r1
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	8013      	strh	r3, [r2, #0]
			strncat(DisplayState, Param2, 3); //#:MF:512:000:000
 800134e:	2203      	movs	r2, #3
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <UART_Command+0x288>)
 8001352:	482f      	ldr	r0, [pc, #188]	; (8001410 <UART_Command+0x268>)
 8001354:	f009 f975 	bl	800a642 <strncat>
			strcat(DisplayState, ":$\n");
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <UART_Command+0x268>)
 800135a:	f7fe ff4b 	bl	80001f4 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <UART_Command+0x268>)
 8001364:	4413      	add	r3, r2
 8001366:	4a3b      	ldr	r2, [pc, #236]	; (8001454 <UART_Command+0x2ac>)
 8001368:	6810      	ldr	r0, [r2, #0]
 800136a:	6018      	str	r0, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) &DisplayState,
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	2213      	movs	r2, #19
 8001370:	4927      	ldr	r1, [pc, #156]	; (8001410 <UART_Command+0x268>)
 8001372:	4839      	ldr	r0, [pc, #228]	; (8001458 <UART_Command+0x2b0>)
 8001374:	f007 fece 	bl	8009114 <HAL_UART_Transmit>
			SystemRefresh();
		}

	}

}
 8001378:	e0e3      	b.n	8001542 <UART_Command+0x39a>
		} else if (CommandLength == 18) { //Checks to see if the command received is a request to change the system state
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b12      	cmp	r3, #18
 800137e:	f040 80e0 	bne.w	8001542 <UART_Command+0x39a>
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <UART_Command+0x260>)
 8001384:	885a      	ldrh	r2, [r3, #2]
			memcpy(Mode, &Command[2], 2);
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <UART_Command+0x264>)
 8001388:	801a      	strh	r2, [r3, #0]
			memcpy(State, &Command[5], 3);
 800138a:	2203      	movs	r2, #3
 800138c:	4933      	ldr	r1, [pc, #204]	; (800145c <UART_Command+0x2b4>)
 800138e:	4825      	ldr	r0, [pc, #148]	; (8001424 <UART_Command+0x27c>)
 8001390:	f009 f90a 	bl	800a5a8 <memcpy>
			memcpy(Param1, &Command[9], 3);
 8001394:	2203      	movs	r2, #3
 8001396:	4932      	ldr	r1, [pc, #200]	; (8001460 <UART_Command+0x2b8>)
 8001398:	4824      	ldr	r0, [pc, #144]	; (800142c <UART_Command+0x284>)
 800139a:	f009 f905 	bl	800a5a8 <memcpy>
			memcpy(Param2, &Command[13], 3);
 800139e:	2203      	movs	r2, #3
 80013a0:	4930      	ldr	r1, [pc, #192]	; (8001464 <UART_Command+0x2bc>)
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <UART_Command+0x288>)
 80013a4:	f009 f900 	bl	800a5a8 <memcpy>
			State_int = atoi(State); //Converts the string for the State value to an integer value
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <UART_Command+0x27c>)
 80013aa:	f009 f8ce 	bl	800a54a <atoi>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <UART_Command+0x2c0>)
 80013b4:	801a      	strh	r2, [r3, #0]
			Param1_int = atoi(Param1); //Converts the string for Param1 to an integer value
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <UART_Command+0x284>)
 80013b8:	f009 f8c7 	bl	800a54a <atoi>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <UART_Command+0x290>)
 80013c2:	801a      	strh	r2, [r3, #0]
			Param2_int = atoi(Param2); //Converts the string for Param2 to an integer value
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <UART_Command+0x288>)
 80013c6:	f009 f8c0 	bl	800a54a <atoi>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <UART_Command+0x2c4>)
 80013d0:	801a      	strh	r2, [r3, #0]
			switch (Mode[1]) {
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <UART_Command+0x264>)
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	2b4d      	cmp	r3, #77	; 0x4d
 80013d8:	f000 809c 	beq.w	8001514 <UART_Command+0x36c>
 80013dc:	2b4d      	cmp	r3, #77	; 0x4d
 80013de:	f300 80ae 	bgt.w	800153e <UART_Command+0x396>
 80013e2:	2b45      	cmp	r3, #69	; 0x45
 80013e4:	d046      	beq.n	8001474 <UART_Command+0x2cc>
 80013e6:	2b46      	cmp	r3, #70	; 0x46
 80013e8:	f040 80a9 	bne.w	800153e <UART_Command+0x396>
				current_state = Flashlight;
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <UART_Command+0x2c8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
				White_LED = 1;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <UART_Command+0x270>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
				Light_Intensity = State_int;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <UART_Command+0x2c0>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <UART_Command+0x274>)
 80013fe:	801a      	strh	r2, [r3, #0]
				SystemRefresh();
 8001400:	f000 f8cc 	bl	800159c <SystemRefresh>
				break;
 8001404:	e09b      	b.n	800153e <UART_Command+0x396>
 8001406:	bf00      	nop
 8001408:	200001cc 	.word	0x200001cc
 800140c:	200001b0 	.word	0x200001b0
 8001410:	200001e8 	.word	0x200001e8
 8001414:	0800b018 	.word	0x0800b018
 8001418:	20000260 	.word	0x20000260
 800141c:	200001ac 	.word	0x200001ac
 8001420:	0800b01c 	.word	0x0800b01c
 8001424:	200001b4 	.word	0x200001b4
 8001428:	00303030 	.word	0x00303030
 800142c:	200001b8 	.word	0x200001b8
 8001430:	2000000c 	.word	0x2000000c
 8001434:	2000011c 	.word	0x2000011c
 8001438:	200001be 	.word	0x200001be
 800143c:	2000011a 	.word	0x2000011a
 8001440:	00534f53 	.word	0x00534f53
 8001444:	20000010 	.word	0x20000010
 8001448:	200002c4 	.word	0x200002c4
 800144c:	200002c6 	.word	0x200002c6
 8001450:	200002c8 	.word	0x200002c8
 8001454:	0800b024 	.word	0x0800b024
 8001458:	200004dc 	.word	0x200004dc
 800145c:	200001d1 	.word	0x200001d1
 8001460:	200001d5 	.word	0x200001d5
 8001464:	200001d9 	.word	0x200001d9
 8001468:	200001bc 	.word	0x200001bc
 800146c:	200001c0 	.word	0x200001c0
 8001470:	20000119 	.word	0x20000119
				current_state = Emergency;
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <UART_Command+0x3a4>)
 8001476:	2202      	movs	r2, #2
 8001478:	701a      	strb	r2, [r3, #0]
				Light_Intensity = State_int;
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <UART_Command+0x3a8>)
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <UART_Command+0x3ac>)
 8001480:	801a      	strh	r2, [r3, #0]
				if (Param1_int != 0) {
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <UART_Command+0x3b0>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00c      	beq.n	80014a4 <UART_Command+0x2fc>
					White_LED = 1;
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <UART_Command+0x3b4>)
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
					Strobe_Time = Param1_int;
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <UART_Command+0x3b0>)
 8001492:	881a      	ldrh	r2, [r3, #0]
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <UART_Command+0x3b8>)
 8001496:	801a      	strh	r2, [r3, #0]
					current_emergency = Strobe;
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <UART_Command+0x3bc>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
					SystemRefresh();
 800149e:	f000 f87d 	bl	800159c <SystemRefresh>
					break;
 80014a2:	e04c      	b.n	800153e <UART_Command+0x396>
					Strobe_Time = 0;
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <UART_Command+0x3b8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]
					if (!strcmp(Param2, "000")) { //Checks if Param2 is equal to 000
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <UART_Command+0x3c0>)
 80014ac:	482f      	ldr	r0, [pc, #188]	; (800156c <UART_Command+0x3c4>)
 80014ae:	f7fe fe97 	bl	80001e0 <strcmp>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10f      	bne.n	80014d8 <UART_Command+0x330>
						current_emergency = SOS;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <UART_Command+0x3bc>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	701a      	strb	r2, [r3, #0]
						White_LED = 1;
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <UART_Command+0x3b4>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
						Strobe_Flag = 0;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <UART_Command+0x3c8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
						Morse_Index = 0;
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <UART_Command+0x3cc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
						Morse_Length = 12;
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <UART_Command+0x3d0>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	701a      	strb	r2, [r3, #0]
						break;
 80014d6:	e032      	b.n	800153e <UART_Command+0x396>
						strcpy(MorseParam2,Param2);
 80014d8:	4924      	ldr	r1, [pc, #144]	; (800156c <UART_Command+0x3c4>)
 80014da:	4828      	ldr	r0, [pc, #160]	; (800157c <UART_Command+0x3d4>)
 80014dc:	f009 f8a9 	bl	800a632 <strcpy>
						current_emergency = custom_message;
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <UART_Command+0x3bc>)
 80014e2:	2203      	movs	r2, #3
 80014e4:	701a      	strb	r2, [r3, #0]
						White_LED = 1;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <UART_Command+0x3b4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
						Strobe_Flag = 0;
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <UART_Command+0x3c8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
						Morse_Index = 0; //Resets the index to start at the beginning of the array
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <UART_Command+0x3cc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
						Custom_Length = 0; //Resets the Morse length to 0 for the custom message
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <UART_Command+0x3d8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
						CustomSet=1;//Sets the custom message flag to set
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <UART_Command+0x3dc>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
						memset(CustomMessage, '\0', sizeof(CustomMessage)); //Resets the custom message to NULL
 8001504:	2219      	movs	r2, #25
 8001506:	2100      	movs	r1, #0
 8001508:	481f      	ldr	r0, [pc, #124]	; (8001588 <UART_Command+0x3e0>)
 800150a:	f009 f85b 	bl	800a5c4 <memset>
						DecodeMorse();
 800150e:	f000 f8cf 	bl	80016b0 <DecodeMorse>
						break;
 8001512:	e014      	b.n	800153e <UART_Command+0x396>
				White_LED=1;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <UART_Command+0x3b4>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
				current_state = Mood;
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <UART_Command+0x3a4>)
 800151c:	2203      	movs	r2, #3
 800151e:	701a      	strb	r2, [r3, #0]
				Red_Intensity = State_int;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <UART_Command+0x3a8>)
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <UART_Command+0x3e4>)
 8001526:	801a      	strh	r2, [r3, #0]
				Green_Intensity = Param1_int;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <UART_Command+0x3b0>)
 800152a:	881a      	ldrh	r2, [r3, #0]
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <UART_Command+0x3e8>)
 800152e:	801a      	strh	r2, [r3, #0]
				Blue_Intensity = Param2_int;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <UART_Command+0x3ec>)
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <UART_Command+0x3f0>)
 8001536:	801a      	strh	r2, [r3, #0]
				SystemRefresh();
 8001538:	f000 f830 	bl	800159c <SystemRefresh>
				break;
 800153c:	bf00      	nop
			SystemRefresh();
 800153e:	f000 f82d 	bl	800159c <SystemRefresh>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000119 	.word	0x20000119
 8001550:	200001bc 	.word	0x200001bc
 8001554:	200001ac 	.word	0x200001ac
 8001558:	200001be 	.word	0x200001be
 800155c:	20000260 	.word	0x20000260
 8001560:	2000011c 	.word	0x2000011c
 8001564:	2000011a 	.word	0x2000011a
 8001568:	0800b028 	.word	0x0800b028
 800156c:	2000000c 	.word	0x2000000c
 8001570:	20000270 	.word	0x20000270
 8001574:	20000274 	.word	0x20000274
 8001578:	2000003c 	.word	0x2000003c
 800157c:	20000010 	.word	0x20000010
 8001580:	2000003d 	.word	0x2000003d
 8001584:	200001fb 	.word	0x200001fb
 8001588:	20000014 	.word	0x20000014
 800158c:	200002c4 	.word	0x200002c4
 8001590:	200002c6 	.word	0x200002c6
 8001594:	200001c0 	.word	0x200001c0
 8001598:	200002c8 	.word	0x200002c8

0800159c <SystemRefresh>:

void SystemRefresh() {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

	debugLEDs();
 80015a0:	f000 fa8e 	bl	8001ac0 <debugLEDs>

	if (White_LED) {
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <SystemRefresh+0xe4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d054      	beq.n	8001656 <SystemRefresh+0xba>

		if (current_state==Mood){
 80015ac:	4b35      	ldr	r3, [pc, #212]	; (8001684 <SystemRefresh+0xe8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d116      	bne.n	80015e2 <SystemRefresh+0x46>
			TIM2->CCR4 = Blue_Intensity; //BLUE
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <SystemRefresh+0xec>)
 80015b6:	881a      	ldrh	r2, [r3, #0]
 80015b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
			TIM3->CCR3 = Red_Intensity; //RED
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <SystemRefresh+0xf0>)
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <SystemRefresh+0xf4>)
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR2 = Green_Intensity; //GREEN
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <SystemRefresh+0xf8>)
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	4b33      	ldr	r3, [pc, #204]	; (8001698 <SystemRefresh+0xfc>)
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR1 = 0; //Sets the PWM Signal Value
 80015ce:	4b33      	ldr	r3, [pc, #204]	; (800169c <SystemRefresh+0x100>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0); //Sets DAC Value to zero cause the LED should be off
 80015d4:	2300      	movs	r3, #0
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	4831      	ldr	r0, [pc, #196]	; (80016a0 <SystemRefresh+0x104>)
 80015dc:	f003 fbf5 	bl	8004dca <HAL_DAC_SetValue>
		TIM4->CCR2 = 0; //GREEN
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0); //Sets DAC Value to zero cause the LED should be off

	}

}
 80015e0:	e04c      	b.n	800167c <SystemRefresh+0xe0>
			TIM1->CCR1 = Light_Intensity; //Sets the PWM Signal Value
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <SystemRefresh+0x108>)
 80015e4:	881a      	ldrh	r2, [r3, #0]
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <SystemRefresh+0x100>)
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR4 = 0; //BLUE
 80015ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ee:	2200      	movs	r2, #0
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
			TIM3->CCR3 = 0; //RED
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <SystemRefresh+0xf4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM4->CCR2 = 0; //GREEN
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <SystemRefresh+0xfc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
					if (Light_Intensity != 0) { //Better way of doing this by toggle White_LED instead but meh
 80015fe:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <SystemRefresh+0x108>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <SystemRefresh+0x7e>
								(Light_Intensity * 8) - 1); //Sets DAC Value
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <SystemRefresh+0x108>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	3b01      	subs	r3, #1
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	4823      	ldr	r0, [pc, #140]	; (80016a0 <SystemRefresh+0x104>)
 8001614:	f003 fbd9 	bl	8004dca <HAL_DAC_SetValue>
 8001618:	e005      	b.n	8001626 <SystemRefresh+0x8a>
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0); //Sets DAC Value
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	481f      	ldr	r0, [pc, #124]	; (80016a0 <SystemRefresh+0x104>)
 8001622:	f003 fbd2 	bl	8004dca <HAL_DAC_SetValue>
					if ((!Strobe_Flag) && (current_state == Emergency)) { //Every time the strobe flag falls the pins are overwritten to zero
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <SystemRefresh+0x10c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d126      	bne.n	800167c <SystemRefresh+0xe0>
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <SystemRefresh+0xe8>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d122      	bne.n	800167c <SystemRefresh+0xe0>
						__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); //Sets the PWM Signal Value
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <SystemRefresh+0x110>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0); //Sets DAC Value to zero cause the LED should be off
 800163e:	2300      	movs	r3, #0
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	4816      	ldr	r0, [pc, #88]	; (80016a0 <SystemRefresh+0x104>)
 8001646:	f003 fbc0 	bl	8004dca <HAL_DAC_SetValue>
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800164a:	2120      	movs	r1, #32
 800164c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001650:	f003 ffd0 	bl	80055f4 <HAL_GPIO_TogglePin>
}
 8001654:	e012      	b.n	800167c <SystemRefresh+0xe0>
		TIM1->CCR1 = 0; //Sets the PWM Signal Value
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <SystemRefresh+0x100>)
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR4 = 0; //BLUE
 800165c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001660:	2200      	movs	r2, #0
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
		TIM3->CCR3 = 0; //RED
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <SystemRefresh+0xf4>)
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR2 = 0; //GREEN
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <SystemRefresh+0xfc>)
 800166c:	2200      	movs	r2, #0
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0); //Sets DAC Value to zero cause the LED should be off
 8001670:	2300      	movs	r3, #0
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <SystemRefresh+0x104>)
 8001678:	f003 fba7 	bl	8004dca <HAL_DAC_SetValue>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000260 	.word	0x20000260
 8001684:	20000119 	.word	0x20000119
 8001688:	200002c8 	.word	0x200002c8
 800168c:	200002c4 	.word	0x200002c4
 8001690:	40000400 	.word	0x40000400
 8001694:	200002c6 	.word	0x200002c6
 8001698:	40000800 	.word	0x40000800
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	2000024c 	.word	0x2000024c
 80016a4:	200001ac 	.word	0x200001ac
 80016a8:	20000270 	.word	0x20000270
 80016ac:	200002d0 	.word	0x200002d0

080016b0 <DecodeMorse>:

void DecodeMorse() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

	for (int i = 0; i < 3; i++) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e01e      	b.n	80016fa <DecodeMorse+0x4a>

		MorseIndex(MorseParam2[i]);
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <DecodeMorse+0x84>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fa6d 	bl	8001ba4 <MorseIndex>
		if (i < 2) {
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	dc11      	bgt.n	80016f4 <DecodeMorse+0x44>
			strcat(CustomMessage, "*");
 80016d0:	4819      	ldr	r0, [pc, #100]	; (8001738 <DecodeMorse+0x88>)
 80016d2:	f7fe fd8f 	bl	80001f4 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <DecodeMorse+0x88>)
 80016dc:	4413      	add	r3, r2
 80016de:	4917      	ldr	r1, [pc, #92]	; (800173c <DecodeMorse+0x8c>)
 80016e0:	461a      	mov	r2, r3
 80016e2:	460b      	mov	r3, r1
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	8013      	strh	r3, [r2, #0]
			Custom_Length++;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <DecodeMorse+0x90>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <DecodeMorse+0x90>)
 80016f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	dddd      	ble.n	80016bc <DecodeMorse+0xc>
		}
	}
	strcat(CustomMessage, " ");
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <DecodeMorse+0x88>)
 8001702:	f7fe fd77 	bl	80001f4 <strlen>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <DecodeMorse+0x88>)
 800170c:	4413      	add	r3, r2
 800170e:	490d      	ldr	r1, [pc, #52]	; (8001744 <DecodeMorse+0x94>)
 8001710:	461a      	mov	r2, r3
 8001712:	460b      	mov	r3, r1
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	8013      	strh	r3, [r2, #0]
	Custom_Length++;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <DecodeMorse+0x90>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <DecodeMorse+0x90>)
 8001722:	701a      	strb	r2, [r3, #0]
	Morse_Length=Custom_Length;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <DecodeMorse+0x90>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <DecodeMorse+0x98>)
 800172a:	701a      	strb	r2, [r3, #0]


}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000010 	.word	0x20000010
 8001738:	20000014 	.word	0x20000014
 800173c:	0800b02c 	.word	0x0800b02c
 8001740:	2000003d 	.word	0x2000003d
 8001744:	0800b030 	.word	0x0800b030
 8001748:	2000003c 	.word	0x2000003c

0800174c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

	if ((htim == &htim16) && (current_state == Emergency)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d122      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x56>
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d11e      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x56>
			&& (current_emergency == Strobe)) {
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d11a      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x56>

		Strobe_Count++;
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001776:	801a      	strh	r2, [r3, #0]
		if (Strobe_Count >= Strobe_Time) {
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800177a:	881a      	ldrh	r2, [r3, #0]
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d30e      	bcc.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x56>
			Strobe_Count = 0;
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	801a      	strh	r2, [r3, #0]
			Strobe_Flag = !Strobe_Flag; //Toggles the white LED output.
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf0c      	ite	eq
 8001792:	2301      	moveq	r3, #1
 8001794:	2300      	movne	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800179c:	701a      	strb	r2, [r3, #0]
			SystemRefresh(); //Refreshes the system
 800179e:	f7ff fefd 	bl	800159c <SystemRefresh>
		}

	}

	if ((htim == &htim17) && (current_state == Emergency)) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d112      	bne.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x84>
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d10e      	bne.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x84>

		if (current_emergency == SOS) {
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d103      	bne.n	80017c2 <HAL_TIM_PeriodElapsedCallback+0x76>

			ExecuteMorse(SOS_Morse); //Executes the morse code using the SOS morse message
 80017ba:	480e      	ldr	r0, [pc, #56]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80017bc:	f000 f81e 	bl	80017fc <ExecuteMorse>

		}

	}

}
 80017c0:	e006      	b.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x84>
		} else if (current_emergency == custom_message) {
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d102      	bne.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x84>
			ExecuteMorse(CustomMessage); ////Executes the morse code using the Custom Message Morse
 80017ca:	480b      	ldr	r0, [pc, #44]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80017cc:	f000 f816 	bl	80017fc <ExecuteMorse>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000400 	.word	0x20000400
 80017dc:	20000119 	.word	0x20000119
 80017e0:	2000011a 	.word	0x2000011a
 80017e4:	20000272 	.word	0x20000272
 80017e8:	2000011c 	.word	0x2000011c
 80017ec:	20000270 	.word	0x20000270
 80017f0:	2000044c 	.word	0x2000044c
 80017f4:	20000030 	.word	0x20000030
 80017f8:	20000014 	.word	0x20000014

080017fc <ExecuteMorse>:

void ExecuteMorse(char *MorseCode) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

	if ((Morse_Index >= Morse_Length)) {
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <ExecuteMorse+0x144>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <ExecuteMorse+0x148>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d306      	bcc.n	800181e <ExecuteMorse+0x22>

		Morse_Index = 0;
 8001810:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <ExecuteMorse+0x144>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
		Time_Units = 1;
 8001816:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <ExecuteMorse+0x14c>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]

		}
		SystemRefresh(); //Refreshes the system
	}

}
 800181c:	e08b      	b.n	8001936 <ExecuteMorse+0x13a>
		char c = MorseCode[Morse_Index]; //...---...
 800181e:	4b48      	ldr	r3, [pc, #288]	; (8001940 <ExecuteMorse+0x144>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	73fb      	strb	r3, [r7, #15]
		if (c == '.') {
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	2b2e      	cmp	r3, #46	; 0x2e
 8001830:	d11f      	bne.n	8001872 <ExecuteMorse+0x76>
			if (Strobe_Flag == 1) {
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <ExecuteMorse+0x150>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d110      	bne.n	800185c <ExecuteMorse+0x60>
				Morse_Index++;
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <ExecuteMorse+0x144>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <ExecuteMorse+0x144>)
 8001844:	701a      	strb	r2, [r3, #0]
				Strobe_Flag = !Strobe_Flag;
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <ExecuteMorse+0x150>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <ExecuteMorse+0x150>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e06a      	b.n	8001932 <ExecuteMorse+0x136>
				Strobe_Flag = !Strobe_Flag;
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <ExecuteMorse+0x150>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	4b37      	ldr	r3, [pc, #220]	; (800194c <ExecuteMorse+0x150>)
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e05f      	b.n	8001932 <ExecuteMorse+0x136>
		} else if (c == '-') {
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	2b2d      	cmp	r3, #45	; 0x2d
 8001876:	d12d      	bne.n	80018d4 <ExecuteMorse+0xd8>
			if (Strobe_Flag == 1) {
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <ExecuteMorse+0x150>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d11e      	bne.n	80018be <ExecuteMorse+0xc2>
				if (Time_Units == 3) {
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <ExecuteMorse+0x14c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d113      	bne.n	80018b0 <ExecuteMorse+0xb4>
					Morse_Index++;
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <ExecuteMorse+0x144>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <ExecuteMorse+0x144>)
 8001892:	701a      	strb	r2, [r3, #0]
					Time_Units = 1;
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <ExecuteMorse+0x14c>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
					Strobe_Flag = !Strobe_Flag;
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <ExecuteMorse+0x150>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf0c      	ite	eq
 80018a2:	2301      	moveq	r3, #1
 80018a4:	2300      	movne	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <ExecuteMorse+0x150>)
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e040      	b.n	8001932 <ExecuteMorse+0x136>
					Time_Units++;
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <ExecuteMorse+0x14c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <ExecuteMorse+0x14c>)
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e039      	b.n	8001932 <ExecuteMorse+0x136>
				Strobe_Flag = !Strobe_Flag;
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <ExecuteMorse+0x150>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <ExecuteMorse+0x150>)
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e02e      	b.n	8001932 <ExecuteMorse+0x136>
		} else if (c == '*') {
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b2a      	cmp	r3, #42	; 0x2a
 80018d8:	d114      	bne.n	8001904 <ExecuteMorse+0x108>
			if (Time_Units == 2) {
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <ExecuteMorse+0x14c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d109      	bne.n	80018f6 <ExecuteMorse+0xfa>
				Morse_Index++;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <ExecuteMorse+0x144>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <ExecuteMorse+0x144>)
 80018ec:	701a      	strb	r2, [r3, #0]
				Time_Units = 1;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <ExecuteMorse+0x14c>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	e01d      	b.n	8001932 <ExecuteMorse+0x136>
				Time_Units++;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <ExecuteMorse+0x14c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <ExecuteMorse+0x14c>)
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e016      	b.n	8001932 <ExecuteMorse+0x136>
		} else if (c == ' ') {
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b20      	cmp	r3, #32
 8001908:	d113      	bne.n	8001932 <ExecuteMorse+0x136>
			if (Time_Units == 5) {
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <ExecuteMorse+0x14c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d109      	bne.n	8001926 <ExecuteMorse+0x12a>
				Morse_Index++;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <ExecuteMorse+0x144>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <ExecuteMorse+0x144>)
 800191c:	701a      	strb	r2, [r3, #0]
				Time_Units = 1;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <ExecuteMorse+0x14c>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e005      	b.n	8001932 <ExecuteMorse+0x136>
				Time_Units++;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <ExecuteMorse+0x14c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <ExecuteMorse+0x14c>)
 8001930:	701a      	strb	r2, [r3, #0]
		SystemRefresh(); //Refreshes the system
 8001932:	f7ff fe33 	bl	800159c <SystemRefresh>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000274 	.word	0x20000274
 8001944:	2000003c 	.word	0x2000003c
 8001948:	2000003e 	.word	0x2000003e
 800194c:	20000270 	.word	0x20000270

08001950 <Setup>:

void Setup() {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0


	HAL_TIM_Base_Start_IT(&htim16); //Starts the interrupt for timer 16
 8001954:	4815      	ldr	r0, [pc, #84]	; (80019ac <Setup+0x5c>)
 8001956:	f006 f901 	bl	8007b5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17); //Starts the interrupt for timer 17
 800195a:	4815      	ldr	r0, [pc, #84]	; (80019b0 <Setup+0x60>)
 800195c:	f006 f8fe 	bl	8007b5c <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, (uint8_t*) &RxCharacter, 1); //Setups up the UART to receive 1 character over DMA and then call RxCplt
 8001960:	2201      	movs	r2, #1
 8001962:	4914      	ldr	r1, [pc, #80]	; (80019b4 <Setup+0x64>)
 8001964:	4814      	ldr	r0, [pc, #80]	; (80019b8 <Setup+0x68>)
 8001966:	f007 fc69 	bl	800923c <HAL_UART_Receive_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800196a:	2100      	movs	r1, #0
 800196c:	4813      	ldr	r0, [pc, #76]	; (80019bc <Setup+0x6c>)
 800196e:	f003 fa51 	bl	8004e14 <HAL_DAC_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001972:	2100      	movs	r1, #0
 8001974:	4812      	ldr	r0, [pc, #72]	; (80019c0 <Setup+0x70>)
 8001976:	f006 f9b9 	bl	8007cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//RED
 800197a:	2108      	movs	r1, #8
 800197c:	4811      	ldr	r0, [pc, #68]	; (80019c4 <Setup+0x74>)
 800197e:	f006 f9b5 	bl	8007cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);//GREEN
 8001982:	2104      	movs	r1, #4
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <Setup+0x78>)
 8001986:	f006 f9b1 	bl	8007cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//BLUE
 800198a:	210c      	movs	r1, #12
 800198c:	480f      	ldr	r0, [pc, #60]	; (80019cc <Setup+0x7c>)
 800198e:	f006 f9ad 	bl	8007cec <HAL_TIM_PWM_Start>

	//Sending student number over UART on startup
	HAL_Delay(200);
 8001992:	20c8      	movs	r0, #200	; 0xc8
 8001994:	f001 fffa 	bl	800398c <HAL_Delay>
    HAL_UART_Transmit(&huart2, (uint8_t*) "#:23993103:$\n",
 8001998:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800199c:	220d      	movs	r2, #13
 800199e:	490c      	ldr	r1, [pc, #48]	; (80019d0 <Setup+0x80>)
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <Setup+0x68>)
 80019a2:	f007 fbb7 	bl	8009114 <HAL_UART_Transmit>
			strlen("#:23993103:$\n"), 300);

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000400 	.word	0x20000400
 80019b0:	2000044c 	.word	0x2000044c
 80019b4:	200002ca 	.word	0x200002ca
 80019b8:	200004dc 	.word	0x200004dc
 80019bc:	2000024c 	.word	0x2000024c
 80019c0:	200002d0 	.word	0x200002d0
 80019c4:	20000368 	.word	0x20000368
 80019c8:	200003b4 	.word	0x200003b4
 80019cc:	2000031c 	.word	0x2000031c
 80019d0:	0800b034 	.word	0x0800b034
 80019d4:	00000000 	.word	0x00000000

080019d8 <Slider_Update>:

void Slider_Update() {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 80019dc:	4832      	ldr	r0, [pc, #200]	; (8001aa8 <Slider_Update+0xd0>)
 80019de:	f002 f9f3 	bl	8003dc8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 300);
 80019e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019e6:	4830      	ldr	r0, [pc, #192]	; (8001aa8 <Slider_Update+0xd0>)
 80019e8:	f002 fb04 	bl	8003ff4 <HAL_ADC_PollForConversion>

	slider_value = HAL_ADC_GetValue(&hadc1);
 80019ec:	482e      	ldr	r0, [pc, #184]	; (8001aa8 <Slider_Update+0xd0>)
 80019ee:	f002 fc03 	bl	80041f8 <HAL_ADC_GetValue>
 80019f2:	4603      	mov	r3, r0
 80019f4:	4a2d      	ldr	r2, [pc, #180]	; (8001aac <Slider_Update+0xd4>)
 80019f6:	6013      	str	r3, [r2, #0]

	HAL_Delay(2);
 80019f8:	2002      	movs	r0, #2
 80019fa:	f001 ffc7 	bl	800398c <HAL_Delay>
	if (abs(slider_value - prev_slider_value) > Buffer) {
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <Slider_Update+0xd4>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <Slider_Update+0xd8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bfb8      	it	lt
 8001a0c:	425b      	neglt	r3, r3
 8001a0e:	4a29      	ldr	r2, [pc, #164]	; (8001ab4 <Slider_Update+0xdc>)
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	4293      	cmp	r3, r2
 8001a14:	dd40      	ble.n	8001a98 <Slider_Update+0xc0>

		prev_slider_value = slider_value;
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <Slider_Update+0xd4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <Slider_Update+0xd8>)
 8001a1c:	6013      	str	r3, [r2, #0]
		Light_Intensity = slider_value;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <Slider_Update+0xd4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <Slider_Update+0xe0>)
 8001a26:	801a      	strh	r2, [r3, #0]

		if (slider_value>=23){
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <Slider_Update+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b16      	cmp	r3, #22
 8001a2e:	d91e      	bls.n	8001a6e <Slider_Update+0x96>
			Light_Intensity = (slider_value - 23) * 1.0775 / 8; //Added buffer to shift center point and then divided it out the top end
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <Slider_Update+0xd4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b17      	subs	r3, #23
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd7c 	bl	8000534 <__aeabi_ui2d>
 8001a3c:	a318      	add	r3, pc, #96	; (adr r3, 8001aa0 <Slider_Update+0xc8>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fdf1 	bl	8000628 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <Slider_Update+0xe4>)
 8001a54:	f7fe ff12 	bl	800087c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f81c 	bl	8000a9c <__aeabi_d2uiz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <Slider_Update+0xe0>)
 8001a6a:	801a      	strh	r2, [r3, #0]
 8001a6c:	e002      	b.n	8001a74 <Slider_Update+0x9c>
		}else {Light_Intensity=1;}
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <Slider_Update+0xe0>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	801a      	strh	r2, [r3, #0]

		if (Light_Intensity <= 23) {
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <Slider_Update+0xe0>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b17      	cmp	r3, #23
 8001a7a:	d802      	bhi.n	8001a82 <Slider_Update+0xaa>
			Light_Intensity = 1;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <Slider_Update+0xe0>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	801a      	strh	r2, [r3, #0]
		} //Tapers lower value to 0 always
		if (Light_Intensity >= 512) {
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <Slider_Update+0xe0>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a8a:	d303      	bcc.n	8001a94 <Slider_Update+0xbc>
			Light_Intensity = 512;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <Slider_Update+0xe0>)
 8001a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a92:	801a      	strh	r2, [r3, #0]
		} //Tapers upper value to 512 always

	//sprintf(adc_value, "%03d\n", Light_Intensity);
	//HAL_UART_Transmit(&huart2, (uint8_t*) adc_value, 4, 300);
		SystemRefresh(); //Refreshes the system when the slider changes
 8001a94:	f7ff fd82 	bl	800159c <SystemRefresh>

	}

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	a3d70a3d 	.word	0xa3d70a3d
 8001aa4:	3ff13d70 	.word	0x3ff13d70
 8001aa8:	200001fc 	.word	0x200001fc
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	200001ac 	.word	0x200001ac
 8001abc:	40200000 	.word	0x40200000

08001ac0 <debugLEDs>:


void debugLEDs(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0





	switch (current_state){
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <debugLEDs+0xd8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d049      	beq.n	8001b60 <debugLEDs+0xa0>
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	dc60      	bgt.n	8001b92 <debugLEDs+0xd2>
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d002      	beq.n	8001ada <debugLEDs+0x1a>
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d018      	beq.n	8001b0a <debugLEDs+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); //LED 3
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //SET LED 4
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //LED 5
	break;
	}
}
 8001ad8:	e05b      	b.n	8001b92 <debugLEDs+0xd2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1); //SET LED 2
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae4:	f003 fd6e 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); //LED 3
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2110      	movs	r1, #16
 8001aec:	482b      	ldr	r0, [pc, #172]	; (8001b9c <debugLEDs+0xdc>)
 8001aee:	f003 fd69 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //LED 4
 8001af2:	2200      	movs	r2, #0
 8001af4:	2120      	movs	r1, #32
 8001af6:	4829      	ldr	r0, [pc, #164]	; (8001b9c <debugLEDs+0xdc>)
 8001af8:	f003 fd64 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //LED 5
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b02:	4826      	ldr	r0, [pc, #152]	; (8001b9c <debugLEDs+0xdc>)
 8001b04:	f003 fd5e 	bl	80055c4 <HAL_GPIO_WritePin>
		break;
 8001b08:	e043      	b.n	8001b92 <debugLEDs+0xd2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0); //LED 2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f003 fd56 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //SET LED 3
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2110      	movs	r1, #16
 8001b1c:	481f      	ldr	r0, [pc, #124]	; (8001b9c <debugLEDs+0xdc>)
 8001b1e:	f003 fd51 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //LED 4
 8001b22:	2200      	movs	r2, #0
 8001b24:	2120      	movs	r1, #32
 8001b26:	481d      	ldr	r0, [pc, #116]	; (8001b9c <debugLEDs+0xdc>)
 8001b28:	f003 fd4c 	bl	80055c4 <HAL_GPIO_WritePin>
		if (current_emergency==SOS||current_emergency==custom_message){
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <debugLEDs+0xe0>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d003      	beq.n	8001b3c <debugLEDs+0x7c>
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <debugLEDs+0xe0>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d106      	bne.n	8001b4a <debugLEDs+0x8a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1); //LED 5
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b42:	4816      	ldr	r0, [pc, #88]	; (8001b9c <debugLEDs+0xdc>)
 8001b44:	f003 fd3e 	bl	80055c4 <HAL_GPIO_WritePin>
	break;
 8001b48:	e022      	b.n	8001b90 <debugLEDs+0xd0>
		}else if(current_emergency==Strobe){
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <debugLEDs+0xe0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d11e      	bne.n	8001b90 <debugLEDs+0xd0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //LED 5
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b58:	4810      	ldr	r0, [pc, #64]	; (8001b9c <debugLEDs+0xdc>)
 8001b5a:	f003 fd33 	bl	80055c4 <HAL_GPIO_WritePin>
	break;
 8001b5e:	e017      	b.n	8001b90 <debugLEDs+0xd0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0); //LED 2
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f003 fd2b 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0); //LED 3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2110      	movs	r1, #16
 8001b72:	480a      	ldr	r0, [pc, #40]	; (8001b9c <debugLEDs+0xdc>)
 8001b74:	f003 fd26 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //SET LED 4
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <debugLEDs+0xdc>)
 8001b7e:	f003 fd21 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0); //LED 5
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <debugLEDs+0xdc>)
 8001b8a:	f003 fd1b 	bl	80055c4 <HAL_GPIO_WritePin>
	break;
 8001b8e:	e000      	b.n	8001b92 <debugLEDs+0xd2>
	break;
 8001b90:	bf00      	nop
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000119 	.word	0x20000119
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	2000011a 	.word	0x2000011a

08001ba4 <MorseIndex>:
extern char CustomMessage[20];



//Morse code lookup table
void MorseIndex(char c ){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]

switch(c){
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	3b20      	subs	r3, #32
 8001bb2:	2b3a      	cmp	r3, #58	; 0x3a
 8001bb4:	f200 825c 	bhi.w	8002070 <MorseIndex+0x4cc>
 8001bb8:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <MorseIndex+0x1c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	0800204b 	.word	0x0800204b
 8001bc4:	08002071 	.word	0x08002071
 8001bc8:	08002071 	.word	0x08002071
 8001bcc:	08002071 	.word	0x08002071
 8001bd0:	08002071 	.word	0x08002071
 8001bd4:	08002071 	.word	0x08002071
 8001bd8:	08002071 	.word	0x08002071
 8001bdc:	08002071 	.word	0x08002071
 8001be0:	08002071 	.word	0x08002071
 8001be4:	08002071 	.word	0x08002071
 8001be8:	08002071 	.word	0x08002071
 8001bec:	08002071 	.word	0x08002071
 8001bf0:	08002071 	.word	0x08002071
 8001bf4:	08002071 	.word	0x08002071
 8001bf8:	08002071 	.word	0x08002071
 8001bfc:	08002071 	.word	0x08002071
 8001c00:	08001ee9 	.word	0x08001ee9
 8001c04:	08001f85 	.word	0x08001f85
 8001c08:	08001f9b 	.word	0x08001f9b
 8001c0c:	08001fb1 	.word	0x08001fb1
 8001c10:	08001fc7 	.word	0x08001fc7
 8001c14:	08001fdd 	.word	0x08001fdd
 8001c18:	08001ff3 	.word	0x08001ff3
 8001c1c:	08002009 	.word	0x08002009
 8001c20:	0800201f 	.word	0x0800201f
 8001c24:	08002035 	.word	0x08002035
 8001c28:	08002071 	.word	0x08002071
 8001c2c:	08002071 	.word	0x08002071
 8001c30:	08002071 	.word	0x08002071
 8001c34:	08002071 	.word	0x08002071
 8001c38:	08002071 	.word	0x08002071
 8001c3c:	08002071 	.word	0x08002071
 8001c40:	08002071 	.word	0x08002071
 8001c44:	08001cad 	.word	0x08001cad
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001cd9 	.word	0x08001cd9
 8001c50:	08001cef 	.word	0x08001cef
 8001c54:	08001d05 	.word	0x08001d05
 8001c58:	08001d1b 	.word	0x08001d1b
 8001c5c:	08001d31 	.word	0x08001d31
 8001c60:	08001d47 	.word	0x08001d47
 8001c64:	08001d5d 	.word	0x08001d5d
 8001c68:	08001d73 	.word	0x08001d73
 8001c6c:	08001d89 	.word	0x08001d89
 8001c70:	08001d9f 	.word	0x08001d9f
 8001c74:	08001db5 	.word	0x08001db5
 8001c78:	08001dcb 	.word	0x08001dcb
 8001c7c:	08001de1 	.word	0x08001de1
 8001c80:	08001df7 	.word	0x08001df7
 8001c84:	08001e0d 	.word	0x08001e0d
 8001c88:	08001e23 	.word	0x08001e23
 8001c8c:	08001e39 	.word	0x08001e39
 8001c90:	08001e4f 	.word	0x08001e4f
 8001c94:	08001e65 	.word	0x08001e65
 8001c98:	08001e7b 	.word	0x08001e7b
 8001c9c:	08001e91 	.word	0x08001e91
 8001ca0:	08001ea7 	.word	0x08001ea7
 8001ca4:	08001ebd 	.word	0x08001ebd
 8001ca8:	08001ed3 	.word	0x08001ed3

case 'A':
	strcat(CustomMessage,A);
 8001cac:	4998      	ldr	r1, [pc, #608]	; (8001f10 <MorseIndex+0x36c>)
 8001cae:	4899      	ldr	r0, [pc, #612]	; (8001f14 <MorseIndex+0x370>)
 8001cb0:	f008 fcb0 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(A)-1;
 8001cb4:	4b98      	ldr	r3, [pc, #608]	; (8001f18 <MorseIndex+0x374>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b96      	ldr	r3, [pc, #600]	; (8001f18 <MorseIndex+0x374>)
 8001cbe:	701a      	strb	r2, [r3, #0]
	break;
 8001cc0:	e1d6      	b.n	8002070 <MorseIndex+0x4cc>
case 'B':
	strcat(CustomMessage,B);
 8001cc2:	4996      	ldr	r1, [pc, #600]	; (8001f1c <MorseIndex+0x378>)
 8001cc4:	4893      	ldr	r0, [pc, #588]	; (8001f14 <MorseIndex+0x370>)
 8001cc6:	f008 fca5 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(B)-1;
 8001cca:	4b93      	ldr	r3, [pc, #588]	; (8001f18 <MorseIndex+0x374>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3303      	adds	r3, #3
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b91      	ldr	r3, [pc, #580]	; (8001f18 <MorseIndex+0x374>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	break;
 8001cd6:	e1cb      	b.n	8002070 <MorseIndex+0x4cc>
case 'C':
	strcat(CustomMessage,C);
 8001cd8:	4991      	ldr	r1, [pc, #580]	; (8001f20 <MorseIndex+0x37c>)
 8001cda:	488e      	ldr	r0, [pc, #568]	; (8001f14 <MorseIndex+0x370>)
 8001cdc:	f008 fc9a 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(C)-1;
 8001ce0:	4b8d      	ldr	r3, [pc, #564]	; (8001f18 <MorseIndex+0x374>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <MorseIndex+0x374>)
 8001cea:	701a      	strb	r2, [r3, #0]
	break;
 8001cec:	e1c0      	b.n	8002070 <MorseIndex+0x4cc>
case 'D':
	strcat(CustomMessage,D);
 8001cee:	498d      	ldr	r1, [pc, #564]	; (8001f24 <MorseIndex+0x380>)
 8001cf0:	4888      	ldr	r0, [pc, #544]	; (8001f14 <MorseIndex+0x370>)
 8001cf2:	f008 fc8f 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(D)-1;
 8001cf6:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <MorseIndex+0x374>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b86      	ldr	r3, [pc, #536]	; (8001f18 <MorseIndex+0x374>)
 8001d00:	701a      	strb	r2, [r3, #0]
	break;
 8001d02:	e1b5      	b.n	8002070 <MorseIndex+0x4cc>
case 'E':
	strcat(CustomMessage,E);
 8001d04:	4988      	ldr	r1, [pc, #544]	; (8001f28 <MorseIndex+0x384>)
 8001d06:	4883      	ldr	r0, [pc, #524]	; (8001f14 <MorseIndex+0x370>)
 8001d08:	f008 fc84 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(E)-1;
 8001d0c:	4b82      	ldr	r3, [pc, #520]	; (8001f18 <MorseIndex+0x374>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <MorseIndex+0x374>)
 8001d16:	701a      	strb	r2, [r3, #0]
	break;
 8001d18:	e1aa      	b.n	8002070 <MorseIndex+0x4cc>
case 'F':
	strcat(CustomMessage,F);
 8001d1a:	4984      	ldr	r1, [pc, #528]	; (8001f2c <MorseIndex+0x388>)
 8001d1c:	487d      	ldr	r0, [pc, #500]	; (8001f14 <MorseIndex+0x370>)
 8001d1e:	f008 fc79 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(F)-1;
 8001d22:	4b7d      	ldr	r3, [pc, #500]	; (8001f18 <MorseIndex+0x374>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3304      	adds	r3, #4
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <MorseIndex+0x374>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	break;
 8001d2e:	e19f      	b.n	8002070 <MorseIndex+0x4cc>
case 'G':
	strcat(CustomMessage,G);
 8001d30:	497f      	ldr	r1, [pc, #508]	; (8001f30 <MorseIndex+0x38c>)
 8001d32:	4878      	ldr	r0, [pc, #480]	; (8001f14 <MorseIndex+0x370>)
 8001d34:	f008 fc6e 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(G)-1;
 8001d38:	4b77      	ldr	r3, [pc, #476]	; (8001f18 <MorseIndex+0x374>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <MorseIndex+0x374>)
 8001d42:	701a      	strb	r2, [r3, #0]
	break;
 8001d44:	e194      	b.n	8002070 <MorseIndex+0x4cc>
case 'H':
	strcat(CustomMessage,H);
 8001d46:	497b      	ldr	r1, [pc, #492]	; (8001f34 <MorseIndex+0x390>)
 8001d48:	4872      	ldr	r0, [pc, #456]	; (8001f14 <MorseIndex+0x370>)
 8001d4a:	f008 fc63 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(H)-1;
 8001d4e:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <MorseIndex+0x374>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3304      	adds	r3, #4
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <MorseIndex+0x374>)
 8001d58:	701a      	strb	r2, [r3, #0]
	break;
 8001d5a:	e189      	b.n	8002070 <MorseIndex+0x4cc>
case 'I':
	strcat(CustomMessage,I);
 8001d5c:	4976      	ldr	r1, [pc, #472]	; (8001f38 <MorseIndex+0x394>)
 8001d5e:	486d      	ldr	r0, [pc, #436]	; (8001f14 <MorseIndex+0x370>)
 8001d60:	f008 fc58 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(I)-1;
 8001d64:	4b6c      	ldr	r3, [pc, #432]	; (8001f18 <MorseIndex+0x374>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3302      	adds	r3, #2
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <MorseIndex+0x374>)
 8001d6e:	701a      	strb	r2, [r3, #0]
	break;
 8001d70:	e17e      	b.n	8002070 <MorseIndex+0x4cc>
case 'J':
	strcat(CustomMessage,J);
 8001d72:	4972      	ldr	r1, [pc, #456]	; (8001f3c <MorseIndex+0x398>)
 8001d74:	4867      	ldr	r0, [pc, #412]	; (8001f14 <MorseIndex+0x370>)
 8001d76:	f008 fc4d 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(J)-1;
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <MorseIndex+0x374>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b65      	ldr	r3, [pc, #404]	; (8001f18 <MorseIndex+0x374>)
 8001d84:	701a      	strb	r2, [r3, #0]
	break;
 8001d86:	e173      	b.n	8002070 <MorseIndex+0x4cc>
case 'K':
	strcat(CustomMessage,K);
 8001d88:	496d      	ldr	r1, [pc, #436]	; (8001f40 <MorseIndex+0x39c>)
 8001d8a:	4862      	ldr	r0, [pc, #392]	; (8001f14 <MorseIndex+0x370>)
 8001d8c:	f008 fc42 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(K)-1;
 8001d90:	4b61      	ldr	r3, [pc, #388]	; (8001f18 <MorseIndex+0x374>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3303      	adds	r3, #3
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <MorseIndex+0x374>)
 8001d9a:	701a      	strb	r2, [r3, #0]
	break;
 8001d9c:	e168      	b.n	8002070 <MorseIndex+0x4cc>
case 'L':
	strcat(CustomMessage,L);
 8001d9e:	4969      	ldr	r1, [pc, #420]	; (8001f44 <MorseIndex+0x3a0>)
 8001da0:	485c      	ldr	r0, [pc, #368]	; (8001f14 <MorseIndex+0x370>)
 8001da2:	f008 fc37 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(L)-1;
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <MorseIndex+0x374>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	3304      	adds	r3, #4
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b5a      	ldr	r3, [pc, #360]	; (8001f18 <MorseIndex+0x374>)
 8001db0:	701a      	strb	r2, [r3, #0]
	break;
 8001db2:	e15d      	b.n	8002070 <MorseIndex+0x4cc>
case 'M':
	strcat(CustomMessage,M);
 8001db4:	4964      	ldr	r1, [pc, #400]	; (8001f48 <MorseIndex+0x3a4>)
 8001db6:	4857      	ldr	r0, [pc, #348]	; (8001f14 <MorseIndex+0x370>)
 8001db8:	f008 fc2c 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(M)-1;
 8001dbc:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <MorseIndex+0x374>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <MorseIndex+0x374>)
 8001dc6:	701a      	strb	r2, [r3, #0]
	break;
 8001dc8:	e152      	b.n	8002070 <MorseIndex+0x4cc>
case 'N':
	strcat(CustomMessage,N);
 8001dca:	4960      	ldr	r1, [pc, #384]	; (8001f4c <MorseIndex+0x3a8>)
 8001dcc:	4851      	ldr	r0, [pc, #324]	; (8001f14 <MorseIndex+0x370>)
 8001dce:	f008 fc21 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(N)-1;
 8001dd2:	4b51      	ldr	r3, [pc, #324]	; (8001f18 <MorseIndex+0x374>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <MorseIndex+0x374>)
 8001ddc:	701a      	strb	r2, [r3, #0]
	break;
 8001dde:	e147      	b.n	8002070 <MorseIndex+0x4cc>
case 'O':
	strcat(CustomMessage,O);
 8001de0:	495b      	ldr	r1, [pc, #364]	; (8001f50 <MorseIndex+0x3ac>)
 8001de2:	484c      	ldr	r0, [pc, #304]	; (8001f14 <MorseIndex+0x370>)
 8001de4:	f008 fc16 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(O)-1;
 8001de8:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <MorseIndex+0x374>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3303      	adds	r3, #3
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b49      	ldr	r3, [pc, #292]	; (8001f18 <MorseIndex+0x374>)
 8001df2:	701a      	strb	r2, [r3, #0]
	break;
 8001df4:	e13c      	b.n	8002070 <MorseIndex+0x4cc>
case 'P':
	strcat(CustomMessage,P);
 8001df6:	4957      	ldr	r1, [pc, #348]	; (8001f54 <MorseIndex+0x3b0>)
 8001df8:	4846      	ldr	r0, [pc, #280]	; (8001f14 <MorseIndex+0x370>)
 8001dfa:	f008 fc0b 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(P)-1;
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <MorseIndex+0x374>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3304      	adds	r3, #4
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b44      	ldr	r3, [pc, #272]	; (8001f18 <MorseIndex+0x374>)
 8001e08:	701a      	strb	r2, [r3, #0]
	break;
 8001e0a:	e131      	b.n	8002070 <MorseIndex+0x4cc>
case 'Q':
	strcat(CustomMessage,Q);
 8001e0c:	4952      	ldr	r1, [pc, #328]	; (8001f58 <MorseIndex+0x3b4>)
 8001e0e:	4841      	ldr	r0, [pc, #260]	; (8001f14 <MorseIndex+0x370>)
 8001e10:	f008 fc00 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(Q)-1;
 8001e14:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <MorseIndex+0x374>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <MorseIndex+0x374>)
 8001e1e:	701a      	strb	r2, [r3, #0]
	break;
 8001e20:	e126      	b.n	8002070 <MorseIndex+0x4cc>
case 'R':
	strcat(CustomMessage,R);
 8001e22:	494e      	ldr	r1, [pc, #312]	; (8001f5c <MorseIndex+0x3b8>)
 8001e24:	483b      	ldr	r0, [pc, #236]	; (8001f14 <MorseIndex+0x370>)
 8001e26:	f008 fbf5 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(R)-1;
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <MorseIndex+0x374>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3303      	adds	r3, #3
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <MorseIndex+0x374>)
 8001e34:	701a      	strb	r2, [r3, #0]
	break;
 8001e36:	e11b      	b.n	8002070 <MorseIndex+0x4cc>
case 'S':
	strcat(CustomMessage,S);
 8001e38:	4949      	ldr	r1, [pc, #292]	; (8001f60 <MorseIndex+0x3bc>)
 8001e3a:	4836      	ldr	r0, [pc, #216]	; (8001f14 <MorseIndex+0x370>)
 8001e3c:	f008 fbea 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(S)-1;
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <MorseIndex+0x374>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3303      	adds	r3, #3
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b33      	ldr	r3, [pc, #204]	; (8001f18 <MorseIndex+0x374>)
 8001e4a:	701a      	strb	r2, [r3, #0]
	break;
 8001e4c:	e110      	b.n	8002070 <MorseIndex+0x4cc>
case 'T':
	strcat(CustomMessage,T);
 8001e4e:	4945      	ldr	r1, [pc, #276]	; (8001f64 <MorseIndex+0x3c0>)
 8001e50:	4830      	ldr	r0, [pc, #192]	; (8001f14 <MorseIndex+0x370>)
 8001e52:	f008 fbdf 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(T)-1;
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <MorseIndex+0x374>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <MorseIndex+0x374>)
 8001e60:	701a      	strb	r2, [r3, #0]
	break;
 8001e62:	e105      	b.n	8002070 <MorseIndex+0x4cc>
case 'U':
	strcat(CustomMessage,U);
 8001e64:	4940      	ldr	r1, [pc, #256]	; (8001f68 <MorseIndex+0x3c4>)
 8001e66:	482b      	ldr	r0, [pc, #172]	; (8001f14 <MorseIndex+0x370>)
 8001e68:	f008 fbd4 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(U)-1;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <MorseIndex+0x374>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3303      	adds	r3, #3
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <MorseIndex+0x374>)
 8001e76:	701a      	strb	r2, [r3, #0]
	break;
 8001e78:	e0fa      	b.n	8002070 <MorseIndex+0x4cc>
case 'V':
	strcat(CustomMessage,V);
 8001e7a:	493c      	ldr	r1, [pc, #240]	; (8001f6c <MorseIndex+0x3c8>)
 8001e7c:	4825      	ldr	r0, [pc, #148]	; (8001f14 <MorseIndex+0x370>)
 8001e7e:	f008 fbc9 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(V)-1;
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <MorseIndex+0x374>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	3303      	adds	r3, #3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <MorseIndex+0x374>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	break;
 8001e8e:	e0ef      	b.n	8002070 <MorseIndex+0x4cc>
case 'W':
	strcat(CustomMessage,W);
 8001e90:	4937      	ldr	r1, [pc, #220]	; (8001f70 <MorseIndex+0x3cc>)
 8001e92:	4820      	ldr	r0, [pc, #128]	; (8001f14 <MorseIndex+0x370>)
 8001e94:	f008 fbbe 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(W)-1;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MorseIndex+0x374>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3303      	adds	r3, #3
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MorseIndex+0x374>)
 8001ea2:	701a      	strb	r2, [r3, #0]
	break;
 8001ea4:	e0e4      	b.n	8002070 <MorseIndex+0x4cc>
case 'X':
	strcat(CustomMessage,X);
 8001ea6:	4933      	ldr	r1, [pc, #204]	; (8001f74 <MorseIndex+0x3d0>)
 8001ea8:	481a      	ldr	r0, [pc, #104]	; (8001f14 <MorseIndex+0x370>)
 8001eaa:	f008 fbb3 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(X)-1;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MorseIndex+0x374>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MorseIndex+0x374>)
 8001eb8:	701a      	strb	r2, [r3, #0]
	break;
 8001eba:	e0d9      	b.n	8002070 <MorseIndex+0x4cc>
case 'Y':
	strcat(CustomMessage,Y);
 8001ebc:	492e      	ldr	r1, [pc, #184]	; (8001f78 <MorseIndex+0x3d4>)
 8001ebe:	4815      	ldr	r0, [pc, #84]	; (8001f14 <MorseIndex+0x370>)
 8001ec0:	f008 fba8 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(Y)-1;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MorseIndex+0x374>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MorseIndex+0x374>)
 8001ece:	701a      	strb	r2, [r3, #0]
	break;
 8001ed0:	e0ce      	b.n	8002070 <MorseIndex+0x4cc>
case 'Z':
	strcat(CustomMessage,Z);
 8001ed2:	492a      	ldr	r1, [pc, #168]	; (8001f7c <MorseIndex+0x3d8>)
 8001ed4:	480f      	ldr	r0, [pc, #60]	; (8001f14 <MorseIndex+0x370>)
 8001ed6:	f008 fb9d 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(Z)-1;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MorseIndex+0x374>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <MorseIndex+0x374>)
 8001ee4:	701a      	strb	r2, [r3, #0]
	break;
 8001ee6:	e0c3      	b.n	8002070 <MorseIndex+0x4cc>
case '0':
	strcat(CustomMessage,"-----");
 8001ee8:	480a      	ldr	r0, [pc, #40]	; (8001f14 <MorseIndex+0x370>)
 8001eea:	f7fe f983 	bl	80001f4 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MorseIndex+0x370>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a22      	ldr	r2, [pc, #136]	; (8001f80 <MorseIndex+0x3dc>)
 8001ef8:	6810      	ldr	r0, [r2, #0]
 8001efa:	6018      	str	r0, [r3, #0]
 8001efc:	8892      	ldrh	r2, [r2, #4]
 8001efe:	809a      	strh	r2, [r3, #4]
	Custom_Length=Custom_Length+5;
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <MorseIndex+0x374>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	3305      	adds	r3, #5
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <MorseIndex+0x374>)
 8001f0a:	701a      	strb	r2, [r3, #0]
	break;
 8001f0c:	e0b0      	b.n	8002070 <MorseIndex+0x4cc>
 8001f0e:	bf00      	nop
 8001f10:	20000040 	.word	0x20000040
 8001f14:	20000014 	.word	0x20000014
 8001f18:	2000003d 	.word	0x2000003d
 8001f1c:	20000044 	.word	0x20000044
 8001f20:	20000048 	.word	0x20000048
 8001f24:	20000050 	.word	0x20000050
 8001f28:	20000054 	.word	0x20000054
 8001f2c:	20000058 	.word	0x20000058
 8001f30:	20000060 	.word	0x20000060
 8001f34:	20000064 	.word	0x20000064
 8001f38:	2000006c 	.word	0x2000006c
 8001f3c:	20000070 	.word	0x20000070
 8001f40:	20000078 	.word	0x20000078
 8001f44:	2000007c 	.word	0x2000007c
 8001f48:	20000084 	.word	0x20000084
 8001f4c:	20000088 	.word	0x20000088
 8001f50:	2000008c 	.word	0x2000008c
 8001f54:	20000090 	.word	0x20000090
 8001f58:	20000098 	.word	0x20000098
 8001f5c:	200000a0 	.word	0x200000a0
 8001f60:	200000a4 	.word	0x200000a4
 8001f64:	200000a8 	.word	0x200000a8
 8001f68:	200000ac 	.word	0x200000ac
 8001f6c:	200000b0 	.word	0x200000b0
 8001f70:	200000b4 	.word	0x200000b4
 8001f74:	200000b8 	.word	0x200000b8
 8001f78:	200000c0 	.word	0x200000c0
 8001f7c:	200000c8 	.word	0x200000c8
 8001f80:	0800b044 	.word	0x0800b044
case '1':
	strcat(CustomMessage,ONE);
 8001f84:	493c      	ldr	r1, [pc, #240]	; (8002078 <MorseIndex+0x4d4>)
 8001f86:	483d      	ldr	r0, [pc, #244]	; (800207c <MorseIndex+0x4d8>)
 8001f88:	f008 fb44 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(ONE)-1;
 8001f8c:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <MorseIndex+0x4dc>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	3305      	adds	r3, #5
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <MorseIndex+0x4dc>)
 8001f96:	701a      	strb	r2, [r3, #0]
	break;
 8001f98:	e06a      	b.n	8002070 <MorseIndex+0x4cc>
case '2':
	strcat(CustomMessage,TWO);
 8001f9a:	493a      	ldr	r1, [pc, #232]	; (8002084 <MorseIndex+0x4e0>)
 8001f9c:	4837      	ldr	r0, [pc, #220]	; (800207c <MorseIndex+0x4d8>)
 8001f9e:	f008 fb39 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(TWO)-1;
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <MorseIndex+0x4dc>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	3305      	adds	r3, #5
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <MorseIndex+0x4dc>)
 8001fac:	701a      	strb	r2, [r3, #0]
	break;
 8001fae:	e05f      	b.n	8002070 <MorseIndex+0x4cc>
case '3':
	strcat(CustomMessage,THREE);
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <MorseIndex+0x4e4>)
 8001fb2:	4832      	ldr	r0, [pc, #200]	; (800207c <MorseIndex+0x4d8>)
 8001fb4:	f008 fb2e 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(THREE)-1;
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <MorseIndex+0x4dc>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3305      	adds	r3, #5
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <MorseIndex+0x4dc>)
 8001fc2:	701a      	strb	r2, [r3, #0]
	break;
 8001fc4:	e054      	b.n	8002070 <MorseIndex+0x4cc>
case '4':
	strcat(CustomMessage,FOUR);
 8001fc6:	4931      	ldr	r1, [pc, #196]	; (800208c <MorseIndex+0x4e8>)
 8001fc8:	482c      	ldr	r0, [pc, #176]	; (800207c <MorseIndex+0x4d8>)
 8001fca:	f008 fb23 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(FOUR)-1;
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <MorseIndex+0x4dc>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <MorseIndex+0x4dc>)
 8001fd8:	701a      	strb	r2, [r3, #0]
	break;
 8001fda:	e049      	b.n	8002070 <MorseIndex+0x4cc>
case '5':
	strcat(CustomMessage,FIVE);
 8001fdc:	492c      	ldr	r1, [pc, #176]	; (8002090 <MorseIndex+0x4ec>)
 8001fde:	4827      	ldr	r0, [pc, #156]	; (800207c <MorseIndex+0x4d8>)
 8001fe0:	f008 fb18 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(FIVE)-1;
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <MorseIndex+0x4dc>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3305      	adds	r3, #5
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <MorseIndex+0x4dc>)
 8001fee:	701a      	strb	r2, [r3, #0]
	break;
 8001ff0:	e03e      	b.n	8002070 <MorseIndex+0x4cc>
case '6':
	strcat(CustomMessage,SIX);
 8001ff2:	4928      	ldr	r1, [pc, #160]	; (8002094 <MorseIndex+0x4f0>)
 8001ff4:	4821      	ldr	r0, [pc, #132]	; (800207c <MorseIndex+0x4d8>)
 8001ff6:	f008 fb0d 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(SIX)-1;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <MorseIndex+0x4dc>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	3305      	adds	r3, #5
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MorseIndex+0x4dc>)
 8002004:	701a      	strb	r2, [r3, #0]
	break;
 8002006:	e033      	b.n	8002070 <MorseIndex+0x4cc>
case '7':
	strcat(CustomMessage,SEVEN);
 8002008:	4923      	ldr	r1, [pc, #140]	; (8002098 <MorseIndex+0x4f4>)
 800200a:	481c      	ldr	r0, [pc, #112]	; (800207c <MorseIndex+0x4d8>)
 800200c:	f008 fb02 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(SEVEN)-1;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MorseIndex+0x4dc>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	3305      	adds	r3, #5
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MorseIndex+0x4dc>)
 800201a:	701a      	strb	r2, [r3, #0]
	break;
 800201c:	e028      	b.n	8002070 <MorseIndex+0x4cc>
case '8':
	strcat(CustomMessage,EIGHT);
 800201e:	491f      	ldr	r1, [pc, #124]	; (800209c <MorseIndex+0x4f8>)
 8002020:	4816      	ldr	r0, [pc, #88]	; (800207c <MorseIndex+0x4d8>)
 8002022:	f008 faf7 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(EIGHT)-1;
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MorseIndex+0x4dc>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	3305      	adds	r3, #5
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MorseIndex+0x4dc>)
 8002030:	701a      	strb	r2, [r3, #0]
	break;
 8002032:	e01d      	b.n	8002070 <MorseIndex+0x4cc>
case '9':
	strcat(CustomMessage,NINE);
 8002034:	491a      	ldr	r1, [pc, #104]	; (80020a0 <MorseIndex+0x4fc>)
 8002036:	4811      	ldr	r0, [pc, #68]	; (800207c <MorseIndex+0x4d8>)
 8002038:	f008 faec 	bl	800a614 <strcat>
	Custom_Length=Custom_Length+sizeof(NINE)-1;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <MorseIndex+0x4dc>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	3305      	adds	r3, #5
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <MorseIndex+0x4dc>)
 8002046:	701a      	strb	r2, [r3, #0]
	break;
 8002048:	e012      	b.n	8002070 <MorseIndex+0x4cc>
case ' ':
	strcat(CustomMessage," ");
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <MorseIndex+0x4d8>)
 800204c:	f7fe f8d2 	bl	80001f4 <strlen>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <MorseIndex+0x4d8>)
 8002056:	4413      	add	r3, r2
 8002058:	4912      	ldr	r1, [pc, #72]	; (80020a4 <MorseIndex+0x500>)
 800205a:	461a      	mov	r2, r3
 800205c:	460b      	mov	r3, r1
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	8013      	strh	r3, [r2, #0]
	Custom_Length++;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <MorseIndex+0x4dc>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <MorseIndex+0x4dc>)
 800206c:	701a      	strb	r2, [r3, #0]
	break;
 800206e:	bf00      	nop


}


}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200000d0 	.word	0x200000d0
 800207c:	20000014 	.word	0x20000014
 8002080:	2000003d 	.word	0x2000003d
 8002084:	200000d8 	.word	0x200000d8
 8002088:	200000e0 	.word	0x200000e0
 800208c:	200000e8 	.word	0x200000e8
 8002090:	200000f0 	.word	0x200000f0
 8002094:	200000f8 	.word	0x200000f8
 8002098:	20000100 	.word	0x20000100
 800209c:	20000108 	.word	0x20000108
 80020a0:	20000110 	.word	0x20000110
 80020a4:	0800b04c 	.word	0x0800b04c

080020a8 <writeByte>:





void writeByte(uint8_t MemAddress,uint8_t numBytes, uint8_t data[]){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af04      	add	r7, sp, #16
 80020ae:	4603      	mov	r3, r0
 80020b0:	603a      	str	r2, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
 80020b4:	460b      	mov	r3, r1
 80020b6:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write (&hi2c1,DevAddress<<1,MemAddress,1,(uint8_t*)data,numBytes,1000);
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020c4:	9102      	str	r1, [sp, #8]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	21ac      	movs	r1, #172	; 0xac
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <writeByte+0x38>)
 80020d2:	f003 fb51 	bl	8005778 <HAL_I2C_Mem_Write>


}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000278 	.word	0x20000278

080020e4 <readByte>:


void readByte(uint8_t MemAddress,uint8_t numBytes, uint8_t data[]){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	4603      	mov	r3, r0
 80020ec:	603a      	str	r2, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
 80020f0:	460b      	mov	r3, r1
 80020f2:	71bb      	strb	r3, [r7, #6]

	if(!HAL_GPIO_ReadPin(GPIOC,Ready_Pin)){
 80020f4:	2120      	movs	r1, #32
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <readByte+0x44>)
 80020f8:	f003 fa4c 	bl	8005594 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <readByte+0x3c>
		HAL_I2C_Mem_Read (&hi2c1,DevAddress<<1,MemAddress,1,(uint8_t*)data,numBytes,1000);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	b29a      	uxth	r2, r3
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	b29b      	uxth	r3, r3
 800210a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800210e:	9102      	str	r1, [sp, #8]
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2301      	movs	r3, #1
 8002118:	21ac      	movs	r1, #172	; 0xac
 800211a:	4804      	ldr	r0, [pc, #16]	; (800212c <readByte+0x48>)
 800211c:	f003 fc40 	bl	80059a0 <HAL_I2C_Mem_Read>
	}




}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	48000800 	.word	0x48000800
 800212c:	20000278 	.word	0x20000278

08002130 <getProductNum>:



void getProductNum(){
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0

	char productlow[5];

	uint8_t transferBytes[2];

	uint8_t prodNumLow =0;
 8002136:	2300      	movs	r3, #0
 8002138:	73fb      	strb	r3, [r7, #15]
	uint8_t prodNumHigh =0;
 800213a:	2300      	movs	r3, #0
 800213c:	73bb      	strb	r3, [r7, #14]
	uint16_t prodNumReturn =0;
 800213e:	2300      	movs	r3, #0
 8002140:	81bb      	strh	r3, [r7, #12]


	readByte(IQS7211A_MM_PROD_NUM,2,transferBytes);
 8002142:	463b      	mov	r3, r7
 8002144:	461a      	mov	r2, r3
 8002146:	2102      	movs	r1, #2
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <readByte>


	prodNumLow = transferBytes[0];
 800214e:	783b      	ldrb	r3, [r7, #0]
 8002150:	73fb      	strb	r3, [r7, #15]
	prodNumHigh = transferBytes[1];
 8002152:	787b      	ldrb	r3, [r7, #1]
 8002154:	73bb      	strb	r3, [r7, #14]
	prodNumReturn = (uint16_t) (prodNumLow);
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	81bb      	strh	r3, [r7, #12]
	prodNumReturn |= (uint16_t) (prodNumHigh<<8);
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	b29b      	uxth	r3, r3
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b29a      	uxth	r2, r3
 8002162:	89bb      	ldrh	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	81bb      	strh	r3, [r7, #12]

	sprintf(productlow, "%03d\n", prodNumReturn);
 8002168:	89ba      	ldrh	r2, [r7, #12]
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <getProductNum+0x4c>)
 800216e:	4618      	mov	r0, r3
 8002170:	f008 fa30 	bl	800a5d4 <siprintf>
	if (prodNumLow>0){
		//HAL_UART_Transmit(&huart2,(uint8_t*)productlow,4,50);
	}

}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	0800b050 	.word	0x0800b050

08002180 <writeMM>:


void writeMM(){
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
	uint8_t transferBytes[30];	// Temporary array which holds the bytes to be transferred.

	  /* Change the ATI Settings */
	  /* Memory Map Position 0x30 - 0x3D */
	  transferBytes[0] = TP_ATI_MULTIPLIERS_DIVIDERS_0;
 8002186:	23e1      	movs	r3, #225	; 0xe1
 8002188:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = TP_ATI_MULTIPLIERS_DIVIDERS_1;
 800218a:	2333      	movs	r3, #51	; 0x33
 800218c:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = TP_COMPENSATION_DIV_0;
 800218e:	230c      	movs	r3, #12
 8002190:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = TP_COMPENSATION_DIV_1;
 8002192:	2300      	movs	r3, #0
 8002194:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = TP_ATI_TARGET_0;
 8002196:	232c      	movs	r3, #44	; 0x2c
 8002198:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = TP_ATI_TARGET_1;
 800219a:	2301      	movs	r3, #1
 800219c:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = TP_REF_DRIFT_LIMIT_0;
 800219e:	2332      	movs	r3, #50	; 0x32
 80021a0:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = TP_REF_DRIFT_LIMIT_1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = TP_MIN_COUNT_REATI_0;
 80021a6:	2332      	movs	r3, #50	; 0x32
 80021a8:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = TP_MIN_COUNT_REATI_1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = REATI_RETRY_TIME_0;
 80021ae:	2305      	movs	r3, #5
 80021b0:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = REATI_RETRY_TIME_1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = ALP_ATI_MULTIPLIERS_DIVIDERS_0;
 80021b6:	2323      	movs	r3, #35	; 0x23
 80021b8:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = ALP_ATI_MULTIPLIERS_DIVIDERS_1;
 80021ba:	2302      	movs	r3, #2
 80021bc:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = ALP_COMPENSATION_DIV_0;
 80021be:	2302      	movs	r3, #2
 80021c0:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = ALP_COMPENSATION_DIV_1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
	  transferBytes[16] = ALP_ATI_TARGET_0;
 80021c6:	23c8      	movs	r3, #200	; 0xc8
 80021c8:	743b      	strb	r3, [r7, #16]
	  transferBytes[17] = ALP_ATI_TARGET_1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	747b      	strb	r3, [r7, #17]
	  transferBytes[18] = ALP_LTA_DRIFT_LIMIT_0;
 80021ce:	2314      	movs	r3, #20
 80021d0:	74bb      	strb	r3, [r7, #18]
	  transferBytes[19] = ALP_LTA_DRIFT_LIMIT_1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	74fb      	strb	r3, [r7, #19]

	  /* Change the ALP ATI Compensation */
	  /* Memory Map Position 0x3A - 0x3D */
	  transferBytes[20] = ALP_COMPENSATION_A_0;
 80021d6:	23e8      	movs	r3, #232	; 0xe8
 80021d8:	753b      	strb	r3, [r7, #20]
	  transferBytes[21] = ALP_COMPENSATION_A_1;
 80021da:	2301      	movs	r3, #1
 80021dc:	757b      	strb	r3, [r7, #21]
	  transferBytes[22] = ALP_COMPENSATION_B_0;
 80021de:	23d3      	movs	r3, #211	; 0xd3
 80021e0:	75bb      	strb	r3, [r7, #22]
	  transferBytes[23] = ALP_COMPENSATION_B_1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 80021e6:	bf00      	nop
 80021e8:	2120      	movs	r1, #32
 80021ea:	48eb      	ldr	r0, [pc, #940]	; (8002598 <writeMM+0x418>)
 80021ec:	f003 f9d2 	bl	8005594 <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f8      	bne.n	80021e8 <writeMM+0x68>
	  writeByte(IQS7211A_MM_TP_ATI_MIR, 24, transferBytes);
 80021f6:	463b      	mov	r3, r7
 80021f8:	461a      	mov	r2, r3
 80021fa:	2118      	movs	r1, #24
 80021fc:	2030      	movs	r0, #48	; 0x30
 80021fe:	f7ff ff53 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 8002202:	2001      	movs	r0, #1
 8002204:	f001 fbc2 	bl	800398c <HAL_Delay>

	  /* Change the Report Rates and Timing */
	  /* Memory Map Position 0x40 - 0x4A */
	  transferBytes[0] = ACTIVE_MODE_REPORT_RATE_0;
 8002208:	230a      	movs	r3, #10
 800220a:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = ACTIVE_MODE_REPORT_RATE_1;
 800220c:	2300      	movs	r3, #0
 800220e:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = IDLE_TOUCH_MODE_REPORT_RATE_0;
 8002210:	2332      	movs	r3, #50	; 0x32
 8002212:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = IDLE_TOUCH_MODE_REPORT_RATE_1;
 8002214:	2300      	movs	r3, #0
 8002216:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = IDLE_MODE_REPORT_RATE_0;
 8002218:	2332      	movs	r3, #50	; 0x32
 800221a:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = IDLE_MODE_REPORT_RATE_1;
 800221c:	2300      	movs	r3, #0
 800221e:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = LP1_MODE_REPORT_RATE_0;
 8002220:	2350      	movs	r3, #80	; 0x50
 8002222:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = LP1_MODE_REPORT_RATE_1;
 8002224:	2300      	movs	r3, #0
 8002226:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = LP2_MODE_REPORT_RATE_0;
 8002228:	23a0      	movs	r3, #160	; 0xa0
 800222a:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = LP2_MODE_REPORT_RATE_1;
 800222c:	2300      	movs	r3, #0
 800222e:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = ACTIVE_MODE_TIMEOUT_0;
 8002230:	230a      	movs	r3, #10
 8002232:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = ACTIVE_MODE_TIMEOUT_1;
 8002234:	2300      	movs	r3, #0
 8002236:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = IDLE_TOUCH_MODE_TIMEOUT_0;
 8002238:	233c      	movs	r3, #60	; 0x3c
 800223a:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = IDLE_TOUCH_MODE_TIMEOUT_1;
 800223c:	2300      	movs	r3, #0
 800223e:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = IDLE_MODE_TIMEOUT_0;
 8002240:	2314      	movs	r3, #20
 8002242:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = IDLE_MODE_TIMEOUT_1;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
	  transferBytes[16] = LP1_MODE_TIMEOUT_0;
 8002248:	230a      	movs	r3, #10
 800224a:	743b      	strb	r3, [r7, #16]
	  transferBytes[17] = LP1_MODE_TIMEOUT_1;
 800224c:	2300      	movs	r3, #0
 800224e:	747b      	strb	r3, [r7, #17]
	  transferBytes[18] = REF_UPDATE_TIME_0;
 8002250:	2308      	movs	r3, #8
 8002252:	74bb      	strb	r3, [r7, #18]
	  transferBytes[19] = REF_UPDATE_TIME_1;
 8002254:	2300      	movs	r3, #0
 8002256:	74fb      	strb	r3, [r7, #19]
	  transferBytes[20] = I2C_TIMEOUT_0;
 8002258:	2364      	movs	r3, #100	; 0x64
 800225a:	753b      	strb	r3, [r7, #20]
	  transferBytes[21] = I2C_TIMEOUT_1;
 800225c:	2300      	movs	r3, #0
 800225e:	757b      	strb	r3, [r7, #21]
		while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8002260:	bf00      	nop
 8002262:	2120      	movs	r1, #32
 8002264:	48cc      	ldr	r0, [pc, #816]	; (8002598 <writeMM+0x418>)
 8002266:	f003 f995 	bl	8005594 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f8      	bne.n	8002262 <writeMM+0xe2>
	  writeByte(IQS7211A_MM_ACTIVE_MODE_RR, 22, transferBytes);
 8002270:	463b      	mov	r3, r7
 8002272:	461a      	mov	r2, r3
 8002274:	2116      	movs	r1, #22
 8002276:	2040      	movs	r0, #64	; 0x40
 8002278:	f7ff ff16 	bl	80020a8 <writeByte>


	  /* Change the System Settings */
	  /* Memory Map Position 0x50 - 0x5B */
	  transferBytes[0] = SYSTEM_CONTROL_0;
 800227c:	2300      	movs	r3, #0
 800227e:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = SYSTEM_CONTROL_1;
 8002280:	2300      	movs	r3, #0
 8002282:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = CONFIG_SETTINGS0;
 8002284:	233c      	movs	r3, #60	; 0x3c
 8002286:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = CONFIG_SETTINGS1;
 8002288:	2306      	movs	r3, #6
 800228a:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = OTHER_SETTINGS_0;
 800228c:	2320      	movs	r3, #32
 800228e:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = OTHER_SETTINGS_1;
 8002290:	23ff      	movs	r3, #255	; 0xff
 8002292:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = TRACKPAD_TOUCH_SET_THRESHOLD;
 8002294:	2332      	movs	r3, #50	; 0x32
 8002296:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = TRACKPAD_TOUCH_CLEAR_THRESHOLD;
 8002298:	2314      	movs	r3, #20
 800229a:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = ALP_THRESHOLD_0;
 800229c:	2308      	movs	r3, #8
 800229e:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = ALP_THRESHOLD_1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = OPEN_0_0;
 80022a4:	23ff      	movs	r3, #255	; 0xff
 80022a6:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = OPEN_0_1;
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = ALP_SET_DEBOUNCE;
 80022ac:	2304      	movs	r3, #4
 80022ae:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = ALP_CLEAR_DEBOUNCE;
 80022b0:	2304      	movs	r3, #4
 80022b2:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = OPEN_1_0;
 80022b4:	23ff      	movs	r3, #255	; 0xff
 80022b6:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = OPEN_1_1;
 80022b8:	23ff      	movs	r3, #255	; 0xff
 80022ba:	73fb      	strb	r3, [r7, #15]
	  transferBytes[16] = TP_CONVERSION_FREQUENCY_UP_PASS_LENGTH;
 80022bc:	2302      	movs	r3, #2
 80022be:	743b      	strb	r3, [r7, #16]
	  transferBytes[17] = TP_CONVERSION_FREQUENCY_FRACTION_VALUE;
 80022c0:	231a      	movs	r3, #26
 80022c2:	747b      	strb	r3, [r7, #17]
	  transferBytes[18] = ALP_CONVERSION_FREQUENCY_UP_PASS_LENGTH;
 80022c4:	2302      	movs	r3, #2
 80022c6:	74bb      	strb	r3, [r7, #18]
	  transferBytes[19] = ALP_CONVERSION_FREQUENCY_FRACTION_VALUE;
 80022c8:	231a      	movs	r3, #26
 80022ca:	74fb      	strb	r3, [r7, #19]
	  transferBytes[20] = TRACKPAD_HARDWARE_SETTINGS_0;
 80022cc:	2301      	movs	r3, #1
 80022ce:	753b      	strb	r3, [r7, #20]
	  transferBytes[21] = TRACKPAD_HARDWARE_SETTINGS_1;
 80022d0:	238d      	movs	r3, #141	; 0x8d
 80022d2:	757b      	strb	r3, [r7, #21]
	  transferBytes[22] = ALP_HARDWARE_SETTINGS_0;
 80022d4:	2365      	movs	r3, #101	; 0x65
 80022d6:	75bb      	strb	r3, [r7, #22]
	  transferBytes[23] = ALP_HARDWARE_SETTINGS_1;
 80022d8:	239d      	movs	r3, #157	; 0x9d
 80022da:	75fb      	strb	r3, [r7, #23]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 80022dc:	bf00      	nop
 80022de:	2120      	movs	r1, #32
 80022e0:	48ad      	ldr	r0, [pc, #692]	; (8002598 <writeMM+0x418>)
 80022e2:	f003 f957 	bl	8005594 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f8      	bne.n	80022de <writeMM+0x15e>
	  writeByte(IQS7211A_MM_SYSTEM_CONTROL, 24, transferBytes);
 80022ec:	463b      	mov	r3, r7
 80022ee:	461a      	mov	r2, r3
 80022f0:	2118      	movs	r1, #24
 80022f2:	2050      	movs	r0, #80	; 0x50
 80022f4:	f7ff fed8 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 80022f8:	2001      	movs	r0, #1
 80022fa:	f001 fb47 	bl	800398c <HAL_Delay>

	  /* Change the Trackpad Settings */
	  /* Memory Map Position 0x60 - 0x69 */
	  transferBytes[0] = TRACKPAD_SETTINGS_0_0;
 80022fe:	2328      	movs	r3, #40	; 0x28
 8002300:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = TRACKPAD_SETTINGS_0_1;
 8002302:	2308      	movs	r3, #8
 8002304:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = TRACKPAD_SETTINGS_1_0;
 8002306:	2304      	movs	r3, #4
 8002308:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = TRACKPAD_SETTINGS_1_1;
 800230a:	2302      	movs	r3, #2
 800230c:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = X_RESOLUTION_0;
 800230e:	2300      	movs	r3, #0
 8002310:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = X_RESOLUTION_1;
 8002312:	2307      	movs	r3, #7
 8002314:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = Y_RESOLUTION_0;
 8002316:	2300      	movs	r3, #0
 8002318:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = Y_RESOLUTION_1;
 800231a:	2303      	movs	r3, #3
 800231c:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = XY_DYNAMIC_FILTER_BOTTOM_SPEED_0;
 800231e:	2306      	movs	r3, #6
 8002320:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = XY_DYNAMIC_FILTER_BOTTOM_SPEED_1;
 8002322:	2300      	movs	r3, #0
 8002324:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = XY_DYNAMIC_FILTER_TOP_SPEED_0;
 8002326:	237c      	movs	r3, #124	; 0x7c
 8002328:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = XY_DYNAMIC_FILTER_TOP_SPEED_1;
 800232a:	2300      	movs	r3, #0
 800232c:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = XY_DYNAMIC_FILTER_BOTTOM_BETA;
 800232e:	2307      	movs	r3, #7
 8002330:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = XY_DYNAMIC_FILTER_STATIC_FILTER_BETA;
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = STATIONARY_TOUCH_MOV_THRESHOLD;
 8002336:	2314      	movs	r3, #20
 8002338:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = FINGER_SPLIT_FACTOR;
 800233a:	2303      	movs	r3, #3
 800233c:	73fb      	strb	r3, [r7, #15]
	  transferBytes[16] = X_TRIM_VALUE_0;
 800233e:	2314      	movs	r3, #20
 8002340:	743b      	strb	r3, [r7, #16]
	  transferBytes[17] = X_TRIM_VALUE_1;
 8002342:	2300      	movs	r3, #0
 8002344:	747b      	strb	r3, [r7, #17]
	  transferBytes[18] = Y_TRIM_VALUE_0;
 8002346:	2314      	movs	r3, #20
 8002348:	74bb      	strb	r3, [r7, #18]
	  transferBytes[19] = Y_TRIM_VALUE_1;
 800234a:	2300      	movs	r3, #0
 800234c:	74fb      	strb	r3, [r7, #19]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 800234e:	bf00      	nop
 8002350:	2120      	movs	r1, #32
 8002352:	4891      	ldr	r0, [pc, #580]	; (8002598 <writeMM+0x418>)
 8002354:	f003 f91e 	bl	8005594 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f8      	bne.n	8002350 <writeMM+0x1d0>
	  writeByte(IQS7211A_MM_TP_SETTINGS_0, 20, transferBytes);
 800235e:	463b      	mov	r3, r7
 8002360:	461a      	mov	r2, r3
 8002362:	2114      	movs	r1, #20
 8002364:	2060      	movs	r0, #96	; 0x60
 8002366:	f7ff fe9f 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 800236a:	2001      	movs	r0, #1
 800236c:	f001 fb0e 	bl	800398c <HAL_Delay>

	  /* Change the ALP Settings */
	  /* Memory Map Position 0x70 - 0x74 */
	  transferBytes[0] = ALP_COUNT_FILTER_BETA_0;
 8002370:	23b4      	movs	r3, #180	; 0xb4
 8002372:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = OPEN_0;
 8002374:	2300      	movs	r3, #0
 8002376:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = ALP_LTA_BETA_LP1;
 8002378:	2306      	movs	r3, #6
 800237a:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = ALP_LTA_BETA_LP2;
 800237c:	2304      	movs	r3, #4
 800237e:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = ALP_SETUP_0;
 8002380:	23aa      	movs	r3, #170	; 0xaa
 8002382:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = ALP_SETUP_1;
 8002384:	2303      	movs	r3, #3
 8002386:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = ALP_TX_ENABLE_0;
 8002388:	2300      	movs	r3, #0
 800238a:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = ALP_TX_ENABLE_1;
 800238c:	230f      	movs	r3, #15
 800238e:	71fb      	strb	r3, [r7, #7]

	  /* Change the Settings Version Numbers */
	  /* Memory Map Position 0x74 - 0x75 */
	  transferBytes[8] = MINOR_VERSION;
 8002390:	2300      	movs	r3, #0
 8002392:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = MAJOR_VERSION;
 8002394:	2300      	movs	r3, #0
 8002396:	727b      	strb	r3, [r7, #9]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8002398:	bf00      	nop
 800239a:	2120      	movs	r1, #32
 800239c:	487e      	ldr	r0, [pc, #504]	; (8002598 <writeMM+0x418>)
 800239e:	f003 f8f9 	bl	8005594 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f8      	bne.n	800239a <writeMM+0x21a>
	  writeByte(IQS7211A_MM_ALP_COUNT_FILTER_BETA, 10, transferBytes);
 80023a8:	463b      	mov	r3, r7
 80023aa:	461a      	mov	r2, r3
 80023ac:	210a      	movs	r1, #10
 80023ae:	2070      	movs	r0, #112	; 0x70
 80023b0:	f7ff fe7a 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 80023b4:	2001      	movs	r0, #1
 80023b6:	f001 fae9 	bl	800398c <HAL_Delay>

	  /* Change the Gesture Settings */
	  /* Memory Map Position 0x80 - 0x8F */
	  transferBytes[0] = GESTURE_ENABLE_0;
 80023ba:	233f      	movs	r3, #63	; 0x3f
 80023bc:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = GESTURE_ENABLE_1;
 80023be:	230f      	movs	r3, #15
 80023c0:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = TAP_TIME_0;
 80023c2:	2396      	movs	r3, #150	; 0x96
 80023c4:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = TAP_TIME_1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = TAP_DISTANCE_0;
 80023ca:	2332      	movs	r3, #50	; 0x32
 80023cc:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = TAP_DISTANCE_1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = HOLD_TIME_0;
 80023d2:	232c      	movs	r3, #44	; 0x2c
 80023d4:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = HOLD_TIME_1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = SWIPE_TIME_0;
 80023da:	2396      	movs	r3, #150	; 0x96
 80023dc:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = SWIPE_TIME_1;
 80023de:	2300      	movs	r3, #0
 80023e0:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = SWIPE_X_DISTANCE_0;
 80023e2:	23c8      	movs	r3, #200	; 0xc8
 80023e4:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = SWIPE_X_DISTANCE_1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = SWIPE_Y_DISTANCE_0;
 80023ea:	23c8      	movs	r3, #200	; 0xc8
 80023ec:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = SWIPE_Y_DISTANCE_1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = SWIPE_ANGLE_0;
 80023f2:	2317      	movs	r3, #23
 80023f4:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = GESTURE_OPEN_0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 80023fa:	bf00      	nop
 80023fc:	2120      	movs	r1, #32
 80023fe:	4866      	ldr	r0, [pc, #408]	; (8002598 <writeMM+0x418>)
 8002400:	f003 f8c8 	bl	8005594 <HAL_GPIO_ReadPin>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f8      	bne.n	80023fc <writeMM+0x27c>
	  writeByte(IQS7211A_MM_GESTURE_ENABLE, 16, transferBytes);
 800240a:	463b      	mov	r3, r7
 800240c:	461a      	mov	r2, r3
 800240e:	2110      	movs	r1, #16
 8002410:	2080      	movs	r0, #128	; 0x80
 8002412:	f7ff fe49 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 8002416:	2001      	movs	r0, #1
 8002418:	f001 fab8 	bl	800398c <HAL_Delay>

	  /* Change the RxTx Mapping */
	  /* Memory Map Position 0x90 - 0x9C */
	  transferBytes[0] = RX_TX_MAP_0;
 800241c:	2307      	movs	r3, #7
 800241e:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = RX_TX_MAP_1;
 8002420:	2306      	movs	r3, #6
 8002422:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = RX_TX_MAP_2;
 8002424:	2305      	movs	r3, #5
 8002426:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = RX_TX_MAP_3;
 8002428:	2304      	movs	r3, #4
 800242a:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = RX_TX_MAP_4;
 800242c:	2303      	movs	r3, #3
 800242e:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = RX_TX_MAP_5;
 8002430:	2302      	movs	r3, #2
 8002432:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = RX_TX_MAP_6;
 8002434:	2301      	movs	r3, #1
 8002436:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = RX_TX_MAP_7;
 8002438:	2300      	movs	r3, #0
 800243a:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = RX_TX_MAP_8;
 800243c:	2308      	movs	r3, #8
 800243e:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = RX_TX_MAP_9;
 8002440:	2309      	movs	r3, #9
 8002442:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = RX_TX_MAP_10;
 8002444:	230a      	movs	r3, #10
 8002446:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = RX_TX_MAP_11;
 8002448:	230b      	movs	r3, #11
 800244a:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = RX_TX_MAP_12;
 800244c:	2300      	movs	r3, #0
 800244e:	733b      	strb	r3, [r7, #12]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 8002450:	bf00      	nop
 8002452:	2120      	movs	r1, #32
 8002454:	4850      	ldr	r0, [pc, #320]	; (8002598 <writeMM+0x418>)
 8002456:	f003 f89d 	bl	8005594 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f8      	bne.n	8002452 <writeMM+0x2d2>
	  writeByte(IQS7211A_MM_RXTX_MAPPING_1_0, 13, transferBytes);
 8002460:	463b      	mov	r3, r7
 8002462:	461a      	mov	r2, r3
 8002464:	210d      	movs	r1, #13
 8002466:	2090      	movs	r0, #144	; 0x90
 8002468:	f7ff fe1e 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 800246c:	2001      	movs	r0, #1
 800246e:	f001 fa8d 	bl	800398c <HAL_Delay>

	  /* Change the Allocation of channels into cycles 0-9 */
	  /* Memory Map Position 0xA0 - 0xBD */
	  transferBytes[0] = PLACEHOLDER_0;
 8002472:	2305      	movs	r3, #5
 8002474:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = CH_1_CYCLE_0;
 8002476:	2304      	movs	r3, #4
 8002478:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = CH_2_CYCLE_0;
 800247a:	2300      	movs	r3, #0
 800247c:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = PLACEHOLDER_1;
 800247e:	2305      	movs	r3, #5
 8002480:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = CH_1_CYCLE_1;
 8002482:	2305      	movs	r3, #5
 8002484:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = CH_2_CYCLE_1;
 8002486:	2301      	movs	r3, #1
 8002488:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = PLACEHOLDER_2;
 800248a:	2305      	movs	r3, #5
 800248c:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = CH_1_CYCLE_2;
 800248e:	2306      	movs	r3, #6
 8002490:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = CH_2_CYCLE_2;
 8002492:	2302      	movs	r3, #2
 8002494:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = PLACEHOLDER_3;
 8002496:	2305      	movs	r3, #5
 8002498:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = CH_1_CYCLE_3;
 800249a:	2307      	movs	r3, #7
 800249c:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = CH_2_CYCLE_3;
 800249e:	2303      	movs	r3, #3
 80024a0:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = PLACEHOLDER_4;
 80024a2:	2305      	movs	r3, #5
 80024a4:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = CH_1_CYCLE_4;
 80024a6:	230c      	movs	r3, #12
 80024a8:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = CH_2_CYCLE_4;
 80024aa:	2308      	movs	r3, #8
 80024ac:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = PLACEHOLDER_5;
 80024ae:	2305      	movs	r3, #5
 80024b0:	73fb      	strb	r3, [r7, #15]
	  transferBytes[16] = CH_1_CYCLE_5;
 80024b2:	230d      	movs	r3, #13
 80024b4:	743b      	strb	r3, [r7, #16]
	  transferBytes[17] = CH_2_CYCLE_5;
 80024b6:	2309      	movs	r3, #9
 80024b8:	747b      	strb	r3, [r7, #17]
	  transferBytes[18] = PLACEHOLDER_6;
 80024ba:	2305      	movs	r3, #5
 80024bc:	74bb      	strb	r3, [r7, #18]
	  transferBytes[19] = CH_1_CYCLE_6;
 80024be:	230e      	movs	r3, #14
 80024c0:	74fb      	strb	r3, [r7, #19]
	  transferBytes[20] = CH_2_CYCLE_6;
 80024c2:	230a      	movs	r3, #10
 80024c4:	753b      	strb	r3, [r7, #20]
	  transferBytes[21] = PLACEHOLDER_7;
 80024c6:	2305      	movs	r3, #5
 80024c8:	757b      	strb	r3, [r7, #21]
	  transferBytes[22] = CH_1_CYCLE_7;
 80024ca:	230f      	movs	r3, #15
 80024cc:	75bb      	strb	r3, [r7, #22]
	  transferBytes[23] = CH_2_CYCLE_7;
 80024ce:	230b      	movs	r3, #11
 80024d0:	75fb      	strb	r3, [r7, #23]
	  transferBytes[24] = PLACEHOLDER_8;
 80024d2:	2305      	movs	r3, #5
 80024d4:	763b      	strb	r3, [r7, #24]
	  transferBytes[25] = CH_1_CYCLE_8;
 80024d6:	2314      	movs	r3, #20
 80024d8:	767b      	strb	r3, [r7, #25]
	  transferBytes[26] = CH_2_CYCLE_8;
 80024da:	2310      	movs	r3, #16
 80024dc:	76bb      	strb	r3, [r7, #26]
	  transferBytes[27] = PLACEHOLDER_9;
 80024de:	2305      	movs	r3, #5
 80024e0:	76fb      	strb	r3, [r7, #27]
	  transferBytes[28] = CH_1_CYCLE_9;
 80024e2:	2315      	movs	r3, #21
 80024e4:	773b      	strb	r3, [r7, #28]
	  transferBytes[29] = CH_2_CYCLE_9;
 80024e6:	2311      	movs	r3, #17
 80024e8:	777b      	strb	r3, [r7, #29]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 80024ea:	bf00      	nop
 80024ec:	2120      	movs	r1, #32
 80024ee:	482a      	ldr	r0, [pc, #168]	; (8002598 <writeMM+0x418>)
 80024f0:	f003 f850 	bl	8005594 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f8      	bne.n	80024ec <writeMM+0x36c>
	  writeByte(IQS7211A_MM_CYCLE_SETUP_0_9, 30, transferBytes);
 80024fa:	463b      	mov	r3, r7
 80024fc:	461a      	mov	r2, r3
 80024fe:	211e      	movs	r1, #30
 8002500:	20a0      	movs	r0, #160	; 0xa0
 8002502:	f7ff fdd1 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 8002506:	2001      	movs	r0, #1
 8002508:	f001 fa40 	bl	800398c <HAL_Delay>

	  /* Change the Allocation of channels into cycles 10-17 */
	  /* Memory Map Position 0xB0 - 0xCA */
	  transferBytes[0] = PLACEHOLDER_10;
 800250c:	2305      	movs	r3, #5
 800250e:	703b      	strb	r3, [r7, #0]
	  transferBytes[1] = CH_1_CYCLE_10;
 8002510:	2316      	movs	r3, #22
 8002512:	707b      	strb	r3, [r7, #1]
	  transferBytes[2] = CH_2_CYCLE_10;
 8002514:	2312      	movs	r3, #18
 8002516:	70bb      	strb	r3, [r7, #2]
	  transferBytes[3] = PLACEHOLDER_11;
 8002518:	2305      	movs	r3, #5
 800251a:	70fb      	strb	r3, [r7, #3]
	  transferBytes[4] = CH_1_CYCLE_11;
 800251c:	2317      	movs	r3, #23
 800251e:	713b      	strb	r3, [r7, #4]
	  transferBytes[5] = CH_2_CYCLE_11;
 8002520:	2313      	movs	r3, #19
 8002522:	717b      	strb	r3, [r7, #5]
	  transferBytes[6] = PLACEHOLDER_12;
 8002524:	2305      	movs	r3, #5
 8002526:	71bb      	strb	r3, [r7, #6]
	  transferBytes[7] = CH_1_CYCLE_12;
 8002528:	231c      	movs	r3, #28
 800252a:	71fb      	strb	r3, [r7, #7]
	  transferBytes[8] = CH_2_CYCLE_12;
 800252c:	2318      	movs	r3, #24
 800252e:	723b      	strb	r3, [r7, #8]
	  transferBytes[9] = PLACEHOLDER_13;
 8002530:	2305      	movs	r3, #5
 8002532:	727b      	strb	r3, [r7, #9]
	  transferBytes[10] = CH_1_CYCLE_13;
 8002534:	231d      	movs	r3, #29
 8002536:	72bb      	strb	r3, [r7, #10]
	  transferBytes[11] = CH_2_CYCLE_13;
 8002538:	2319      	movs	r3, #25
 800253a:	72fb      	strb	r3, [r7, #11]
	  transferBytes[12] = PLACEHOLDER_14;
 800253c:	2305      	movs	r3, #5
 800253e:	733b      	strb	r3, [r7, #12]
	  transferBytes[13] = CH_1_CYCLE_14;
 8002540:	231e      	movs	r3, #30
 8002542:	737b      	strb	r3, [r7, #13]
	  transferBytes[14] = CH_2_CYCLE_14;
 8002544:	231a      	movs	r3, #26
 8002546:	73bb      	strb	r3, [r7, #14]
	  transferBytes[15] = PLACEHOLDER_15;
 8002548:	2305      	movs	r3, #5
 800254a:	73fb      	strb	r3, [r7, #15]
	  transferBytes[16] = CH_1_CYCLE_15;
 800254c:	231f      	movs	r3, #31
 800254e:	743b      	strb	r3, [r7, #16]
	  transferBytes[17] = CH_2_CYCLE_15;
 8002550:	231b      	movs	r3, #27
 8002552:	747b      	strb	r3, [r7, #17]
	  transferBytes[18] = PLACEHOLDER_16;
 8002554:	2305      	movs	r3, #5
 8002556:	74bb      	strb	r3, [r7, #18]
	  transferBytes[19] = CH_1_CYCLE_16;
 8002558:	23ff      	movs	r3, #255	; 0xff
 800255a:	74fb      	strb	r3, [r7, #19]
	  transferBytes[20] = CH_2_CYCLE_16;
 800255c:	23ff      	movs	r3, #255	; 0xff
 800255e:	753b      	strb	r3, [r7, #20]
	  transferBytes[21] = PLACEHOLDER_17;
 8002560:	2305      	movs	r3, #5
 8002562:	757b      	strb	r3, [r7, #21]
	  transferBytes[22] = CH_1_CYCLE_17;
 8002564:	23ff      	movs	r3, #255	; 0xff
 8002566:	75bb      	strb	r3, [r7, #22]
	  transferBytes[23] = CH_2_CYCLE_17;
 8002568:	23ff      	movs	r3, #255	; 0xff
 800256a:	75fb      	strb	r3, [r7, #23]
	  while(HAL_GPIO_ReadPin(GPIOC,Ready_Pin));// Waits for the ready line to be low
 800256c:	bf00      	nop
 800256e:	2120      	movs	r1, #32
 8002570:	4809      	ldr	r0, [pc, #36]	; (8002598 <writeMM+0x418>)
 8002572:	f003 f80f 	bl	8005594 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f8      	bne.n	800256e <writeMM+0x3ee>
	  writeByte(IQS7211A_MM_CYCLE_SETUP_10_17, 24, transferBytes);
 800257c:	463b      	mov	r3, r7
 800257e:	461a      	mov	r2, r3
 8002580:	2118      	movs	r1, #24
 8002582:	20b0      	movs	r0, #176	; 0xb0
 8002584:	f7ff fd90 	bl	80020a8 <writeByte>
	  HAL_Delay(1);//This is just hear to prevent another read/write byte starting immediately as this one ends corrupting data
 8002588:	2001      	movs	r0, #1
 800258a:	f001 f9ff 	bl	800398c <HAL_Delay>

}
 800258e:	bf00      	nop
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	48000800 	.word	0x48000800

0800259c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80025c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025da:	2201      	movs	r2, #1
 80025dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <MX_ADC1_Init+0xdc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <MX_ADC1_Init+0xdc>)
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <MX_ADC1_Init+0xdc>)
 8002608:	2204      	movs	r2, #4
 800260a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_ADC1_Init+0xdc>)
 800260e:	2200      	movs	r2, #0
 8002610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <MX_ADC1_Init+0xdc>)
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002618:	4817      	ldr	r0, [pc, #92]	; (8002678 <MX_ADC1_Init+0xdc>)
 800261a:	f001 f9db 	bl	80039d4 <HAL_ADC_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002624:	f000 fc3a 	bl	8002e9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <MX_ADC1_Init+0xdc>)
 8002634:	f002 f8da 	bl	80047ec <HAL_ADCEx_MultiModeConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800263e:	f000 fc2d 	bl	8002e9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002642:	2301      	movs	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002646:	2301      	movs	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <MX_ADC1_Init+0xdc>)
 8002660:	f001 fdd8 	bl	8004214 <HAL_ADC_ConfigChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800266a:	f000 fc17 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200001fc 	.word	0x200001fc

0800267c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d124      	bne.n	80026e8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_ADC_MspInit+0x74>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <HAL_ADC_MspInit+0x74>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_ADC_MspInit+0x74>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_ADC_MspInit+0x74>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_ADC_MspInit+0x74>)
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	6153      	str	r3, [r2, #20]
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_ADC_MspInit+0x74>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ce:	2301      	movs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d2:	2303      	movs	r3, #3
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e4:	f002 fdcc 	bl	8005280 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_DAC1_Init+0x4c>)
 8002706:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <MX_DAC1_Init+0x50>)
 8002708:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_DAC1_Init+0x4c>)
 800270c:	f002 fb3b 	bl	8004d86 <HAL_DAC_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8002716:	f000 fbc1 	bl	8002e9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2200      	movs	r2, #0
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_DAC1_Init+0x4c>)
 800272a:	f002 fbbe 	bl	8004eaa <HAL_DAC_ConfigChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8002734:	f000 fbb2 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000024c 	.word	0x2000024c
 8002744:	40007400 	.word	0x40007400

08002748 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_DAC_MspInit+0x74>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d124      	bne.n	80027b4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_DAC_MspInit+0x78>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_DAC_MspInit+0x78>)
 8002770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002774:	61d3      	str	r3, [r2, #28]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_DAC_MspInit+0x78>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_DAC_MspInit+0x78>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_DAC_MspInit+0x78>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278c:	6153      	str	r3, [r2, #20]
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_DAC_MspInit+0x78>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800279a:	2310      	movs	r3, #16
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279e:	2303      	movs	r3, #3
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b0:	f002 fd66 	bl	8005280 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40007400 	.word	0x40007400
 80027c0:	40021000 	.word	0x40021000

080027c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_DMA_Init+0x38>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <MX_DMA_Init+0x38>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6153      	str	r3, [r2, #20]
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_DMA_Init+0x38>)
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	200c      	movs	r0, #12
 80027e8:	f002 fa97 	bl	8004d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80027ec:	200c      	movs	r0, #12
 80027ee:	f002 fab0 	bl	8004d52 <HAL_NVIC_EnableIRQ>

}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <MX_GPIO_Init+0x154>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4a4e      	ldr	r2, [pc, #312]	; (8002954 <MX_GPIO_Init+0x154>)
 800281c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002820:	6153      	str	r3, [r2, #20]
 8002822:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <MX_GPIO_Init+0x154>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800282e:	4b49      	ldr	r3, [pc, #292]	; (8002954 <MX_GPIO_Init+0x154>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4a48      	ldr	r2, [pc, #288]	; (8002954 <MX_GPIO_Init+0x154>)
 8002834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002838:	6153      	str	r3, [r2, #20]
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <MX_GPIO_Init+0x154>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <MX_GPIO_Init+0x154>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4a42      	ldr	r2, [pc, #264]	; (8002954 <MX_GPIO_Init+0x154>)
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	6153      	str	r3, [r2, #20]
 8002852:	4b40      	ldr	r3, [pc, #256]	; (8002954 <MX_GPIO_Init+0x154>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <MX_GPIO_Init+0x154>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a3c      	ldr	r2, [pc, #240]	; (8002954 <MX_GPIO_Init+0x154>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002868:	6153      	str	r3, [r2, #20]
 800286a:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <MX_GPIO_Init+0x154>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800287c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002880:	f002 fea0 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_5_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800288a:	4833      	ldr	r0, [pc, #204]	; (8002958 <MX_GPIO_Init+0x158>)
 800288c:	f002 fe9a 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCLR_GPIO_Port, MCLR_Pin, GPIO_PIN_RESET);
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	4831      	ldr	r0, [pc, #196]	; (800295c <MX_GPIO_Init+0x15c>)
 8002896:	f002 fe95 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_2_Pin;
 800289a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800289e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b6:	f002 fce3 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Ready_Pin;
 80028ba:	2320      	movs	r3, #32
 80028bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Ready_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	4823      	ldr	r0, [pc, #140]	; (800295c <MX_GPIO_Init+0x15c>)
 80028d0:	f002 fcd6 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_5_Pin|LED_3_Pin|LED_4_Pin;
 80028d4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80028d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	481a      	ldr	r0, [pc, #104]	; (8002958 <MX_GPIO_Init+0x158>)
 80028ee:	f002 fcc7 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Middle_Pin|Left_Pin|Right_Pin;
 80028f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80028f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028fe:	2301      	movs	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4813      	ldr	r0, [pc, #76]	; (8002958 <MX_GPIO_Init+0x158>)
 800290a:	f002 fcb9 	bl	8005280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCLR_Pin;
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCLR_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_GPIO_Init+0x15c>)
 8002926:	f002 fcab 	bl	8005280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2017      	movs	r0, #23
 8002930:	f002 f9f3 	bl	8004d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002934:	2017      	movs	r0, #23
 8002936:	f002 fa0c 	bl	8004d52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2028      	movs	r0, #40	; 0x28
 8002940:	f002 f9eb 	bl	8004d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002944:	2028      	movs	r0, #40	; 0x28
 8002946:	f002 fa04 	bl	8004d52 <HAL_NVIC_EnableIRQ>

}
 800294a:	bf00      	nop
 800294c:	3728      	adds	r7, #40	; 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400
 800295c:	48000800 	.word	0x48000800

08002960 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]

	Current_Time=HAL_GetTick();
 800296a:	f001 f803 	bl	8003974 <HAL_GetTick>
 800296e:	4603      	mov	r3, r0
 8002970:	4a8e      	ldr	r2, [pc, #568]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002972:	6013      	str	r3, [r2, #0]

//&&((HAL_GetTick()-TrackPadPauseTime)>50)
	if ((GPIO_Pin==Ready_Pin)&&(TrackPadReady)){//Only starts looking for gestures once the track pad is setup
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b20      	cmp	r3, #32
 8002978:	d107      	bne.n	800298a <HAL_GPIO_EXTI_Callback+0x2a>
 800297a:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x250>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_EXTI_Callback+0x2a>

		TrackPadInput();
 8002982:	f7fe f8ad 	bl	8000ae0 <TrackPadInput>
		SystemRefresh();
 8002986:	f7fe fe09 	bl	800159c <SystemRefresh>
	}



	//Button Debouncing for Middle Button-GPIO_13
	if ((GPIO_Pin == GPIO_PIN_13)&&(Current_Time-Last_Button_Press>20)){
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002990:	d145      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0xbe>
 8002992:	4b86      	ldr	r3, [pc, #536]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b87      	ldr	r3, [pc, #540]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b14      	cmp	r3, #20
 800299e:	d93e      	bls.n	8002a1e <HAL_GPIO_EXTI_Callback+0xbe>
		Button_State= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13);
 80029a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a4:	4884      	ldr	r0, [pc, #528]	; (8002bb8 <HAL_GPIO_EXTI_Callback+0x258>)
 80029a6:	f002 fdf5 	bl	8005594 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b83      	ldr	r3, [pc, #524]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 80029b0:	701a      	strb	r2, [r3, #0]
		if ((Prev_State_Middle==1)&&(Button_State==0)){
 80029b2:	4b83      	ldr	r3, [pc, #524]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x260>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d11d      	bne.n	80029f8 <HAL_GPIO_EXTI_Callback+0x98>
 80029bc:	4b7f      	ldr	r3, [pc, #508]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <HAL_GPIO_EXTI_Callback+0x98>


			White_LED= !White_LED;
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x264>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x264>)
 80029da:	701a      	strb	r2, [r3, #0]
			Strobe_Flag=1;
 80029dc:	4b7a      	ldr	r3, [pc, #488]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x268>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
			SystemRefresh();//Refreshes the system after any button click has occurred
 80029e2:	f7fe fddb 	bl	800159c <SystemRefresh>
			Last_Button_Press=Current_Time;
 80029e6:	4b71      	ldr	r3, [pc, #452]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a72      	ldr	r2, [pc, #456]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 80029ec:	6013      	str	r3, [r2, #0]
			Prev_State_Middle=Button_State;
 80029ee:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x260>)
 80029f6:	701a      	strb	r2, [r3, #0]
		}
		if ((Prev_State_Middle==0)&&(Button_State==1)){
 80029f8:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x260>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0xbe>
 8002a02:	4b6e      	ldr	r3, [pc, #440]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d108      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0xbe>
			Last_Button_Press=Current_Time;
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 8002a12:	6013      	str	r3, [r2, #0]
			Prev_State_Middle=Button_State;
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x260>)
 8002a1c:	701a      	strb	r2, [r3, #0]
		}
	}


	//Button Debouncing for Left Button-GPIO_14
	if ((GPIO_Pin == GPIO_PIN_14)&&(Current_Time-Last_Button_Press>20)){
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a24:	d16e      	bne.n	8002b04 <HAL_GPIO_EXTI_Callback+0x1a4>
 8002a26:	4b61      	ldr	r3, [pc, #388]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b14      	cmp	r3, #20
 8002a32:	d967      	bls.n	8002b04 <HAL_GPIO_EXTI_Callback+0x1a4>
		Button_State= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
 8002a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a38:	485f      	ldr	r0, [pc, #380]	; (8002bb8 <HAL_GPIO_EXTI_Callback+0x258>)
 8002a3a:	f002 fdab 	bl	8005594 <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002a44:	701a      	strb	r2, [r3, #0]
		if ((Prev_State_Left==1)&&(Button_State==0)){
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x26c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d146      	bne.n	8002ade <HAL_GPIO_EXTI_Callback+0x17e>
 8002a50:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d141      	bne.n	8002ade <HAL_GPIO_EXTI_Callback+0x17e>

			if (current_state==Mood){
 8002a5a:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d106      	bne.n	8002a72 <HAL_GPIO_EXTI_Callback+0x112>
				current_state=Flashlight;
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
				White_LED=0; //Sets the White LED to OFF when changing to flashlight mode
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x264>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_EXTI_Callback+0x120>
			} else current_state++; //Checks if the state is in the final state and then wraps round to the beginning
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002a7e:	701a      	strb	r2, [r3, #0]
			if (current_state==Emergency){//Sets the emergency mode to Strobe when changing to Emergency state
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_GPIO_EXTI_Callback+0x146>
				current_emergency=Strobe;
 8002a8a:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
				Strobe_Time=512;
 8002a90:	4b51      	ldr	r3, [pc, #324]	; (8002bd8 <HAL_GPIO_EXTI_Callback+0x278>)
 8002a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a96:	801a      	strh	r2, [r3, #0]
				Strobe_Count=0;
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_GPIO_EXTI_Callback+0x27c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
				White_LED=0; //Sets the White LED to OFF when changing to emergency mode
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x264>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e010      	b.n	8002ac8 <HAL_GPIO_EXTI_Callback+0x168>
			} else if (current_state ==Mood){
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d10b      	bne.n	8002ac8 <HAL_GPIO_EXTI_Callback+0x168>
				Red_Intensity=128;
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <HAL_GPIO_EXTI_Callback+0x280>)
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	801a      	strh	r2, [r3, #0]
				Green_Intensity=128;
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <HAL_GPIO_EXTI_Callback+0x284>)
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	801a      	strh	r2, [r3, #0]
				Blue_Intensity=128;
 8002abc:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x288>)
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	801a      	strh	r2, [r3, #0]
				White_LED=0; //Sets the White LED to OFF when changing to Mood mode
 8002ac2:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x264>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
			}
			SystemRefresh();//Refreshes the system after any button click has occurred
 8002ac8:	f7fe fd68 	bl	800159c <SystemRefresh>
			Last_Button_Press=Current_Time;
 8002acc:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 8002ad2:	6013      	str	r3, [r2, #0]
			Prev_State_Left=Button_State;
 8002ad4:	4b39      	ldr	r3, [pc, #228]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x26c>)
 8002adc:	701a      	strb	r2, [r3, #0]
		}
		if ((Prev_State_Left==0)&&(Button_State==1)){
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x26c>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_GPIO_EXTI_Callback+0x1a4>
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d108      	bne.n	8002b04 <HAL_GPIO_EXTI_Callback+0x1a4>
			Last_Button_Press=Current_Time;
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 8002af8:	6013      	str	r3, [r2, #0]
			Prev_State_Left=Button_State;
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_GPIO_EXTI_Callback+0x26c>)
 8002b02:	701a      	strb	r2, [r3, #0]
		}
	}
	//Button Debouncing for Right Button-GPIO_15
	if ((GPIO_Pin == GPIO_PIN_15)&&(Current_Time-Last_Button_Press>20)){
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0a:	f040 809e 	bne.w	8002c4a <HAL_GPIO_EXTI_Callback+0x2ea>
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_GPIO_EXTI_Callback+0x24c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x254>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b14      	cmp	r3, #20
 8002b1a:	f240 8096 	bls.w	8002c4a <HAL_GPIO_EXTI_Callback+0x2ea>
		Button_State= HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15);
 8002b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b22:	4825      	ldr	r0, [pc, #148]	; (8002bb8 <HAL_GPIO_EXTI_Callback+0x258>)
 8002b24:	f002 fd36 	bl	8005594 <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002b2e:	701a      	strb	r2, [r3, #0]
		if ((Prev_State_Right==1)&&(Button_State==0)){
 8002b30:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_GPIO_EXTI_Callback+0x28c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d174      	bne.n	8002c24 <HAL_GPIO_EXTI_Callback+0x2c4>
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x25c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d16f      	bne.n	8002c24 <HAL_GPIO_EXTI_Callback+0x2c4>

			if(current_state==Emergency){
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_GPIO_EXTI_Callback+0x270>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d15f      	bne.n	8002c0e <HAL_GPIO_EXTI_Callback+0x2ae>

				if ((current_emergency==Strobe)){
 8002b4e:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d109      	bne.n	8002b6c <HAL_GPIO_EXTI_Callback+0x20c>
					Morse_Index=0;//Resets the morse index on changing state
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
					Strobe_Flag=0;//Starts in off state
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x268>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
					Morse_Length=12;
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_GPIO_EXTI_Callback+0x294>)
 8002b66:	220c      	movs	r2, #12
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e012      	b.n	8002b92 <HAL_GPIO_EXTI_Callback+0x232>
					//White_LED=1;
				}else if (current_emergency==SOS){
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d10d      	bne.n	8002b92 <HAL_GPIO_EXTI_Callback+0x232>

					//strcpy(CustomMessage,SOS_Morse);
					//Morse_Length=9;
					//White_LED=1;
					if (CustomSet){
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x298>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_EXTI_Callback+0x226>
						Morse_Length=Custom_Length;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x29c>)
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_GPIO_EXTI_Callback+0x294>)
 8002b84:	701a      	strb	r2, [r3, #0]
					}
					Morse_Index=0;//Resets the morse index on changing state
 8002b86:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x290>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
					Strobe_Flag=0;//Starts in off state
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_GPIO_EXTI_Callback+0x268>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
				}
				if (current_emergency==custom_message){
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d131      	bne.n	8002c00 <HAL_GPIO_EXTI_Callback+0x2a0>
					current_emergency=Strobe;
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_GPIO_EXTI_Callback+0x274>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
					Strobe_Time=512;
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_GPIO_EXTI_Callback+0x278>)
 8002ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	e030      	b.n	8002c0e <HAL_GPIO_EXTI_Callback+0x2ae>
 8002bac:	2000026c 	.word	0x2000026c
 8002bb0:	200001c2 	.word	0x200001c2
 8002bb4:	20000264 	.word	0x20000264
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	20000268 	.word	0x20000268
 8002bc0:	20000116 	.word	0x20000116
 8002bc4:	20000260 	.word	0x20000260
 8002bc8:	20000270 	.word	0x20000270
 8002bcc:	20000118 	.word	0x20000118
 8002bd0:	20000119 	.word	0x20000119
 8002bd4:	2000011a 	.word	0x2000011a
 8002bd8:	2000011c 	.word	0x2000011c
 8002bdc:	20000272 	.word	0x20000272
 8002be0:	200002c4 	.word	0x200002c4
 8002be4:	200002c6 	.word	0x200002c6
 8002be8:	200002c8 	.word	0x200002c8
 8002bec:	20000117 	.word	0x20000117
 8002bf0:	20000274 	.word	0x20000274
 8002bf4:	2000003c 	.word	0x2000003c
 8002bf8:	200001fb 	.word	0x200001fb
 8002bfc:	2000003d 	.word	0x2000003d
				}else current_emergency++;
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002c0c:	701a      	strb	r2, [r3, #0]
			}

			SystemRefresh();//Refreshes the system after any button click has occurred
 8002c0e:	f7fe fcc5 	bl	800159c <SystemRefresh>
			Last_Button_Press=Current_Time;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8002c18:	6013      	str	r3, [r2, #0]
			Prev_State_Right=Button_State;
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_GPIO_EXTI_Callback+0x300>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_GPIO_EXTI_Callback+0x304>)
 8002c22:	701a      	strb	r2, [r3, #0]
		}
		if ((Prev_State_Right==0)&&(Button_State==1)){
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_GPIO_EXTI_Callback+0x304>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <HAL_GPIO_EXTI_Callback+0x2ea>
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_GPIO_EXTI_Callback+0x300>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d108      	bne.n	8002c4a <HAL_GPIO_EXTI_Callback+0x2ea>
			Last_Button_Press=Current_Time;
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8002c3e:	6013      	str	r3, [r2, #0]
			Prev_State_Right=Button_State;
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_GPIO_EXTI_Callback+0x300>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_GPIO_EXTI_Callback+0x304>)
 8002c48:	701a      	strb	r2, [r3, #0]
		}
	}


}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000011a 	.word	0x2000011a
 8002c58:	2000026c 	.word	0x2000026c
 8002c5c:	20000264 	.word	0x20000264
 8002c60:	20000268 	.word	0x20000268
 8002c64:	20000117 	.word	0x20000117

08002c68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <MX_I2C1_Init+0x78>)
 8002c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c74:	f240 220b 	movw	r2, #523	; 0x20b
 8002c78:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ca4:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002ca6:	f002 fcd7 	bl	8005658 <HAL_I2C_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cb0:	f000 f8f4 	bl	8002e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002cb8:	f003 f9b8 	bl	800602c <HAL_I2CEx_ConfigAnalogFilter>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002cc2:	f000 f8eb 	bl	8002e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4804      	ldr	r0, [pc, #16]	; (8002cdc <MX_I2C1_Init+0x74>)
 8002cca:	f003 f9fa 	bl	80060c2 <HAL_I2CEx_ConfigDigitalFilter>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002cd4:	f000 f8e2 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000278 	.word	0x20000278
 8002ce0:	40005400 	.word	0x40005400

08002ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_I2C_MspInit+0x7c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d128      	bne.n	8002d58 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <HAL_I2C_MspInit+0x80>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_I2C_MspInit+0x80>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6153      	str	r3, [r2, #20]
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_I2C_MspInit+0x80>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d24:	2312      	movs	r3, #18
 8002d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d30:	2304      	movs	r3, #4
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480b      	ldr	r0, [pc, #44]	; (8002d68 <HAL_I2C_MspInit+0x84>)
 8002d3c:	f002 faa0 	bl	8005280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_I2C_MspInit+0x80>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_I2C_MspInit+0x80>)
 8002d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d4a:	61d3      	str	r3, [r2, #28]
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_I2C_MspInit+0x80>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40005400 	.word	0x40005400
 8002d64:	40021000 	.word	0x40021000
 8002d68:	48000400 	.word	0x48000400

08002d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d70:	f000 fda6 	bl	80038c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d74:	f000 f822 	bl	8002dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d78:	f7ff fd42 	bl	8002800 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d7c:	f7ff fd22 	bl	80027c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002d80:	f000 fcf8 	bl	8003774 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002d84:	f7ff fc0a 	bl	800259c <MX_ADC1_Init>
  MX_DAC1_Init();
 8002d88:	f7ff fcb4 	bl	80026f4 <MX_DAC1_Init>
  MX_TIM1_Init();
 8002d8c:	f000 f96a 	bl	8003064 <MX_TIM1_Init>
  MX_TIM16_Init();
 8002d90:	f000 fb22 	bl	80033d8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002d94:	f000 fb46 	bl	8003424 <MX_TIM17_Init>
  MX_I2C1_Init();
 8002d98:	f7ff ff66 	bl	8002c68 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002d9c:	f000 fa0e 	bl	80031bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002da0:	f000 fa66 	bl	8003270 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002da4:	f000 fabe 	bl	8003324 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  Setup();//Calls the setup function for first time setup
 8002da8:	f7fe fdd2 	bl	8001950 <Setup>
  TrackPadSetup();//Setups up the track pad for gesture control
 8002dac:	f7fe f8a4 	bl	8000ef8 <TrackPadSetup>
  SystemRefresh();
 8002db0:	f7fe fbf4 	bl	800159c <SystemRefresh>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Slider_Update();
 8002db4:	f7fe fe10 	bl	80019d8 <Slider_Update>
 8002db8:	e7fc      	b.n	8002db4 <main+0x48>
	...

08002dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b0a6      	sub	sp, #152	; 0x98
 8002dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dc6:	2228      	movs	r2, #40	; 0x28
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f007 fbfa 	bl	800a5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2258      	movs	r2, #88	; 0x58
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f007 fbec 	bl	800a5c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dec:	2302      	movs	r3, #2
 8002dee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002df0:	2301      	movs	r3, #1
 8002df2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002df4:	2310      	movs	r3, #16
 8002df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 f99e 	bl	800615c <HAL_RCC_OscConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002e26:	f000 f839 	bl	8002e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e2a:	230f      	movs	r3, #15
 8002e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e32:	2300      	movs	r3, #0
 8002e34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 f9dc 	bl	8007204 <HAL_RCC_ClockConfig>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e52:	f000 f823 	bl	8002e9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <SystemClock_Config+0xdc>)
 8002e58:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_TIM17|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002e64:	2300      	movs	r3, #0
 8002e66:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fbf6 	bl	8007670 <HAL_RCCEx_PeriphCLKConfig>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002e8a:	f000 f807 	bl	8002e9c <Error_Handler>
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3798      	adds	r7, #152	; 0x98
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	01b010a2 	.word	0x01b010a2

08002e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea0:	b672      	cpsid	i
}
 8002ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <Error_Handler+0x8>
	...

08002ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <HAL_MspInit+0x44>)
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <HAL_MspInit+0x44>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6193      	str	r3, [r2, #24]
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_MspInit+0x44>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_MspInit+0x44>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <HAL_MspInit+0x44>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	61d3      	str	r3, [r2, #28]
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_MspInit+0x44>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ede:	2007      	movs	r0, #7
 8002ee0:	f001 ff10 	bl	8004d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000

08002ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <NMI_Handler+0x4>

08002ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002efa:	e7fe      	b.n	8002efa <HardFault_Handler+0x4>

08002efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <MemManage_Handler+0x4>

08002f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f06:	e7fe      	b.n	8002f06 <BusFault_Handler+0x4>

08002f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f0c:	e7fe      	b.n	8002f0c <UsageFault_Handler+0x4>

08002f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3c:	f000 fd06 	bl	800394c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <DMA1_Channel2_IRQHandler+0x10>)
 8002f4a:	f002 f8b9 	bl	80050c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000498 	.word	0x20000498

08002f58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ready_Pin);
 8002f5c:	2020      	movs	r0, #32
 8002f5e:	f002 fb63 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f6c:	4803      	ldr	r0, [pc, #12]	; (8002f7c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002f6e:	f004 ffc9 	bl	8007f04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002f72:	4803      	ldr	r0, [pc, #12]	; (8002f80 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002f74:	f004 ffc6 	bl	8007f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	200002d0 	.word	0x200002d0
 8002f80:	20000400 	.word	0x20000400

08002f84 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f88:	4803      	ldr	r0, [pc, #12]	; (8002f98 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8002f8a:	f004 ffbb 	bl	8007f04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002f8e:	4803      	ldr	r0, [pc, #12]	; (8002f9c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002f90:	f004 ffb8 	bl	8007f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200002d0 	.word	0x200002d0
 8002f9c:	2000044c 	.word	0x2000044c

08002fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <USART2_IRQHandler+0x10>)
 8002fa6:	f006 f997 	bl	80092d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200004dc 	.word	0x200004dc

08002fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Middle_Pin);
 8002fb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fbc:	f002 fb34 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_Pin);
 8002fc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fc4:	f002 fb30 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_Pin);
 8002fc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fcc:	f002 fb2c 	bl	8005628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_sbrk>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
 8003004:	f007 faa6 	bl	800a554 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20010000 	.word	0x20010000
 8003034:	00000400 	.word	0x00000400
 8003038:	200002cc 	.word	0x200002cc
 800303c:	20000578 	.word	0x20000578

08003040 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <SystemInit+0x20>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	4a05      	ldr	r2, [pc, #20]	; (8003060 <SystemInit+0x20>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b09a      	sub	sp, #104	; 0x68
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800306a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003078:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
 8003094:	615a      	str	r2, [r3, #20]
 8003096:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	222c      	movs	r2, #44	; 0x2c
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f007 fa90 	bl	800a5c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030a6:	4a44      	ldr	r2, [pc, #272]	; (80031b8 <MX_TIM1_Init+0x154>)
 80030a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80030aa:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030ac:	220d      	movs	r2, #13
 80030ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b0:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 511;
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80030bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030c4:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ca:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030d0:	4838      	ldr	r0, [pc, #224]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030d2:	f004 fceb 	bl	8007aac <HAL_TIM_Base_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80030dc:	f7ff fede 	bl	8002e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030ea:	4619      	mov	r1, r3
 80030ec:	4831      	ldr	r0, [pc, #196]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030ee:	f005 f93d 	bl	800836c <HAL_TIM_ConfigClockSource>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80030f8:	f7ff fed0 	bl	8002e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030fc:	482d      	ldr	r0, [pc, #180]	; (80031b4 <MX_TIM1_Init+0x150>)
 80030fe:	f004 fd9d 	bl	8007c3c <HAL_TIM_PWM_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003108:	f7ff fec8 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800311c:	4619      	mov	r1, r3
 800311e:	4825      	ldr	r0, [pc, #148]	; (80031b4 <MX_TIM1_Init+0x150>)
 8003120:	f005 fe7a 	bl	8008e18 <HAL_TIMEx_MasterConfigSynchronization>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800312a:	f7ff feb7 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800312e:	2360      	movs	r3, #96	; 0x60
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003136:	2300      	movs	r3, #0
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800313a:	2300      	movs	r3, #0
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800313e:	2300      	movs	r3, #0
 8003140:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800314a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	4619      	mov	r1, r3
 8003152:	4818      	ldr	r0, [pc, #96]	; (80031b4 <MX_TIM1_Init+0x150>)
 8003154:	f004 fff6 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800315e:	f7ff fe9d 	bl	8002e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800317a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4807      	ldr	r0, [pc, #28]	; (80031b4 <MX_TIM1_Init+0x150>)
 8003198:	f005 feca 	bl	8008f30 <HAL_TIMEx_ConfigBreakDeadTime>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80031a2:	f7ff fe7b 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031a6:	4803      	ldr	r0, [pc, #12]	; (80031b4 <MX_TIM1_Init+0x150>)
 80031a8:	f000 fa3c 	bl	8003624 <HAL_TIM_MspPostInit>

}
 80031ac:	bf00      	nop
 80031ae:	3768      	adds	r7, #104	; 0x68
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200002d0 	.word	0x200002d0
 80031b8:	40012c00 	.word	0x40012c00

080031bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031ce:	463b      	mov	r3, r7
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
 80031dc:	615a      	str	r2, [r3, #20]
 80031de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <MX_TIM2_Init+0xb0>)
 80031e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <MX_TIM2_Init+0xb0>)
 80031ea:	2208      	movs	r2, #8
 80031ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <MX_TIM2_Init+0xb0>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 511;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <MX_TIM2_Init+0xb0>)
 80031f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <MX_TIM2_Init+0xb0>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <MX_TIM2_Init+0xb0>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003208:	4818      	ldr	r0, [pc, #96]	; (800326c <MX_TIM2_Init+0xb0>)
 800320a:	f004 fd17 	bl	8007c3c <HAL_TIM_PWM_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003214:	f7ff fe42 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	4619      	mov	r1, r3
 8003226:	4811      	ldr	r0, [pc, #68]	; (800326c <MX_TIM2_Init+0xb0>)
 8003228:	f005 fdf6 	bl	8008e18 <HAL_TIMEx_MasterConfigSynchronization>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003232:	f7ff fe33 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003236:	2360      	movs	r3, #96	; 0x60
 8003238:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003246:	463b      	mov	r3, r7
 8003248:	220c      	movs	r2, #12
 800324a:	4619      	mov	r1, r3
 800324c:	4807      	ldr	r0, [pc, #28]	; (800326c <MX_TIM2_Init+0xb0>)
 800324e:	f004 ff79 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003258:	f7ff fe20 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800325c:	4803      	ldr	r0, [pc, #12]	; (800326c <MX_TIM2_Init+0xb0>)
 800325e:	f000 f9e1 	bl	8003624 <HAL_TIM_MspPostInit>

}
 8003262:	bf00      	nop
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000031c 	.word	0x2000031c

08003270 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003282:	463b      	mov	r3, r7
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	615a      	str	r2, [r3, #20]
 8003292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <MX_TIM3_Init+0xac>)
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <MX_TIM3_Init+0xb0>)
 8003298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <MX_TIM3_Init+0xac>)
 800329c:	2208      	movs	r2, #8
 800329e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <MX_TIM3_Init+0xac>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 511;
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <MX_TIM3_Init+0xac>)
 80032a8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <MX_TIM3_Init+0xac>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <MX_TIM3_Init+0xac>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032ba:	4818      	ldr	r0, [pc, #96]	; (800331c <MX_TIM3_Init+0xac>)
 80032bc:	f004 fcbe 	bl	8007c3c <HAL_TIM_PWM_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80032c6:	f7ff fde9 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032d2:	f107 031c 	add.w	r3, r7, #28
 80032d6:	4619      	mov	r1, r3
 80032d8:	4810      	ldr	r0, [pc, #64]	; (800331c <MX_TIM3_Init+0xac>)
 80032da:	f005 fd9d 	bl	8008e18 <HAL_TIMEx_MasterConfigSynchronization>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80032e4:	f7ff fdda 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e8:	2360      	movs	r3, #96	; 0x60
 80032ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032f8:	463b      	mov	r3, r7
 80032fa:	2208      	movs	r2, #8
 80032fc:	4619      	mov	r1, r3
 80032fe:	4807      	ldr	r0, [pc, #28]	; (800331c <MX_TIM3_Init+0xac>)
 8003300:	f004 ff20 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800330a:	f7ff fdc7 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800330e:	4803      	ldr	r0, [pc, #12]	; (800331c <MX_TIM3_Init+0xac>)
 8003310:	f000 f988 	bl	8003624 <HAL_TIM_MspPostInit>

}
 8003314:	bf00      	nop
 8003316:	3728      	adds	r7, #40	; 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000368 	.word	0x20000368
 8003320:	40000400 	.word	0x40000400

08003324 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003336:	463b      	mov	r3, r7
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
 8003344:	615a      	str	r2, [r3, #20]
 8003346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <MX_TIM4_Init+0xac>)
 800334a:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <MX_TIM4_Init+0xb0>)
 800334c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <MX_TIM4_Init+0xac>)
 8003350:	2208      	movs	r2, #8
 8003352:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <MX_TIM4_Init+0xac>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 511;
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <MX_TIM4_Init+0xac>)
 800335c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003360:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <MX_TIM4_Init+0xac>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <MX_TIM4_Init+0xac>)
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800336e:	4818      	ldr	r0, [pc, #96]	; (80033d0 <MX_TIM4_Init+0xac>)
 8003370:	f004 fc64 	bl	8007c3c <HAL_TIM_PWM_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800337a:	f7ff fd8f 	bl	8002e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003386:	f107 031c 	add.w	r3, r7, #28
 800338a:	4619      	mov	r1, r3
 800338c:	4810      	ldr	r0, [pc, #64]	; (80033d0 <MX_TIM4_Init+0xac>)
 800338e:	f005 fd43 	bl	8008e18 <HAL_TIMEx_MasterConfigSynchronization>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003398:	f7ff fd80 	bl	8002e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800339c:	2360      	movs	r3, #96	; 0x60
 800339e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033ac:	463b      	mov	r3, r7
 80033ae:	2204      	movs	r2, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4807      	ldr	r0, [pc, #28]	; (80033d0 <MX_TIM4_Init+0xac>)
 80033b4:	f004 fec6 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80033be:	f7ff fd6d 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80033c2:	4803      	ldr	r0, [pc, #12]	; (80033d0 <MX_TIM4_Init+0xac>)
 80033c4:	f000 f92e 	bl	8003624 <HAL_TIM_MspPostInit>

}
 80033c8:	bf00      	nop
 80033ca:	3728      	adds	r7, #40	; 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200003b4 	.word	0x200003b4
 80033d4:	40000800 	.word	0x40000800

080033d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <MX_TIM16_Init+0x44>)
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <MX_TIM16_Init+0x48>)
 80033e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_TIM16_Init+0x44>)
 80033e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80033e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_TIM16_Init+0x44>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9-1;
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <MX_TIM16_Init+0x44>)
 80033f2:	2208      	movs	r2, #8
 80033f4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_TIM16_Init+0x44>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <MX_TIM16_Init+0x44>)
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <MX_TIM16_Init+0x44>)
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003408:	4804      	ldr	r0, [pc, #16]	; (800341c <MX_TIM16_Init+0x44>)
 800340a:	f004 fb4f 	bl	8007aac <HAL_TIM_Base_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003414:	f7ff fd42 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000400 	.word	0x20000400
 8003420:	40014400 	.word	0x40014400

08003424 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <MX_TIM17_Init+0x48>)
 800342a:	4a11      	ldr	r2, [pc, #68]	; (8003470 <MX_TIM17_Init+0x4c>)
 800342c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <MX_TIM17_Init+0x48>)
 8003430:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003434:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <MX_TIM17_Init+0x48>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4609-1;
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <MX_TIM17_Init+0x48>)
 800343e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8003442:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_TIM17_Init+0x48>)
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MX_TIM17_Init+0x48>)
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_TIM17_Init+0x48>)
 8003452:	2200      	movs	r2, #0
 8003454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_TIM17_Init+0x48>)
 8003458:	f004 fb28 	bl	8007aac <HAL_TIM_Base_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8003462:	f7ff fd1b 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2000044c 	.word	0x2000044c
 8003470:	40014800 	.word	0x40014800

08003474 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3f      	ldr	r2, [pc, #252]	; (8003580 <HAL_TIM_Base_MspInit+0x10c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d144      	bne.n	8003510 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003486:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4a3e      	ldr	r2, [pc, #248]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 800348c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003490:	6193      	str	r3, [r2, #24]
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800349e:	4b3a      	ldr	r3, [pc, #232]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034a0:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_TIM_Base_MspInit+0x118>)
 80034a2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034a4:	4b38      	ldr	r3, [pc, #224]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034a6:	2210      	movs	r2, #16
 80034a8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034bc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034be:	4b32      	ldr	r3, [pc, #200]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80034cc:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80034d2:	482d      	ldr	r0, [pc, #180]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034d4:	f001 fd36 	bl	8004f44 <HAL_DMA_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80034de:	f7ff fcdd 	bl	8002e9c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
 80034e8:	4a27      	ldr	r2, [pc, #156]	; (8003588 <HAL_TIM_Base_MspInit+0x114>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	2019      	movs	r0, #25
 80034f4:	f001 fc11 	bl	8004d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80034f8:	2019      	movs	r0, #25
 80034fa:	f001 fc2a 	bl	8004d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	201a      	movs	r0, #26
 8003504:	f001 fc09 	bl	8004d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003508:	201a      	movs	r0, #26
 800350a:	f001 fc22 	bl	8004d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800350e:	e032      	b.n	8003576 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM16)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_TIM_Base_MspInit+0x11c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d114      	bne.n	8003544 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800351a:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003524:	6193      	str	r3, [r2, #24]
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	2019      	movs	r0, #25
 8003538:	f001 fbef 	bl	8004d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800353c:	2019      	movs	r0, #25
 800353e:	f001 fc08 	bl	8004d52 <HAL_NVIC_EnableIRQ>
}
 8003542:	e018      	b.n	8003576 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM17)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a12      	ldr	r2, [pc, #72]	; (8003594 <HAL_TIM_Base_MspInit+0x120>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d113      	bne.n	8003576 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6193      	str	r3, [r2, #24]
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_TIM_Base_MspInit+0x110>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	201a      	movs	r0, #26
 800356c:	f001 fbd5 	bl	8004d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003570:	201a      	movs	r0, #26
 8003572:	f001 fbee 	bl	8004d52 <HAL_NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40021000 	.word	0x40021000
 8003588:	20000498 	.word	0x20000498
 800358c:	4002001c 	.word	0x4002001c
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800

08003598 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d10c      	bne.n	80035c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	61d3      	str	r3, [r2, #28]
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80035c2:	e022      	b.n	800360a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_TIM_PWM_MspInit+0x84>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10c      	bne.n	80035e8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	61d3      	str	r3, [r2, #28]
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
}
 80035e6:	e010      	b.n	800360a <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <HAL_TIM_PWM_MspInit+0x88>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10b      	bne.n	800360a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035f2:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	61d3      	str	r3, [r2, #28]
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_TIM_PWM_MspInit+0x80>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800

08003624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a46      	ldr	r2, [pc, #280]	; (800375c <HAL_TIM_MspPostInit+0x138>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d11c      	bne.n	8003680 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003646:	4b46      	ldr	r3, [pc, #280]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4a45      	ldr	r2, [pc, #276]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 800364c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003650:	6153      	str	r3, [r2, #20]
 8003652:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_Output_Pin;
 800365e:	2301      	movs	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800366e:	2302      	movs	r3, #2
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_Output_GPIO_Port, &GPIO_InitStruct);
 8003672:	f107 031c 	add.w	r3, r7, #28
 8003676:	4619      	mov	r1, r3
 8003678:	483a      	ldr	r0, [pc, #232]	; (8003764 <HAL_TIM_MspPostInit+0x140>)
 800367a:	f001 fe01 	bl	8005280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800367e:	e068      	b.n	8003752 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d11d      	bne.n	80036c6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003694:	6153      	str	r3, [r2, #20]
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BLUE_Pin;
 80036a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	4619      	mov	r1, r3
 80036be:	482a      	ldr	r0, [pc, #168]	; (8003768 <HAL_TIM_MspPostInit+0x144>)
 80036c0:	f001 fdde 	bl	8005280 <HAL_GPIO_Init>
}
 80036c4:	e045      	b.n	8003752 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM3)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a28      	ldr	r2, [pc, #160]	; (800376c <HAL_TIM_MspPostInit+0x148>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d11d      	bne.n	800370c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036d0:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 80036d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036da:	6153      	str	r3, [r2, #20]
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RED_Pin;
 80036e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036fa:	2302      	movs	r3, #2
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 031c 	add.w	r3, r7, #28
 8003702:	4619      	mov	r1, r3
 8003704:	4817      	ldr	r0, [pc, #92]	; (8003764 <HAL_TIM_MspPostInit+0x140>)
 8003706:	f001 fdbb 	bl	8005280 <HAL_GPIO_Init>
}
 800370a:	e022      	b.n	8003752 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM4)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_TIM_MspPostInit+0x14c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d11d      	bne.n	8003752 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4a11      	ldr	r2, [pc, #68]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	6153      	str	r3, [r2, #20]
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <HAL_TIM_MspPostInit+0x13c>)
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GREEN_Pin;
 800372e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003740:	230a      	movs	r3, #10
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8003744:	f107 031c 	add.w	r3, r7, #28
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374e:	f001 fd97 	bl	8005280 <HAL_GPIO_Init>
}
 8003752:	bf00      	nop
 8003754:	3730      	adds	r7, #48	; 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40021000 	.word	0x40021000
 8003764:	48000800 	.word	0x48000800
 8003768:	48000400 	.word	0x48000400
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800

08003774 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <MX_USART2_UART_Init+0x60>)
 800377c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 8003780:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 8003788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800378c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 8003790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 8003798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800379c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 80037a0:	220c      	movs	r2, #12
 80037a2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037bc:	4804      	ldr	r0, [pc, #16]	; (80037d0 <MX_USART2_UART_Init+0x5c>)
 80037be:	f005 fc5b 	bl	8009078 <HAL_UART_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80037c8:	f7ff fb68 	bl	8002e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200004dc 	.word	0x200004dc
 80037d4:	40004400 	.word	0x40004400

080037d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_UART_MspInit+0x8c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d130      	bne.n	800385c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_UART_MspInit+0x90>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_UART_MspInit+0x90>)
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	61d3      	str	r3, [r2, #28]
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_UART_MspInit+0x90>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_UART_MspInit+0x90>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_UART_MspInit+0x90>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	6153      	str	r3, [r2, #20]
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_UART_MspInit+0x90>)
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800382a:	230c      	movs	r3, #12
 800382c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800383a:	2307      	movs	r3, #7
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003848:	f001 fd1a 	bl	8005280 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2026      	movs	r0, #38	; 0x26
 8003852:	f001 fa62 	bl	8004d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003856:	2026      	movs	r0, #38	; 0x26
 8003858:	f001 fa7b 	bl	8004d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40004400 	.word	0x40004400
 8003868:	40021000 	.word	0x40021000

0800386c <Reset_Handler>:
 800386c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038a4 <LoopForever+0x2>
 8003870:	480d      	ldr	r0, [pc, #52]	; (80038a8 <LoopForever+0x6>)
 8003872:	490e      	ldr	r1, [pc, #56]	; (80038ac <LoopForever+0xa>)
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <LoopForever+0xe>)
 8003876:	2300      	movs	r3, #0
 8003878:	e002      	b.n	8003880 <LoopCopyDataInit>

0800387a <CopyDataInit>:
 800387a:	58d4      	ldr	r4, [r2, r3]
 800387c:	50c4      	str	r4, [r0, r3]
 800387e:	3304      	adds	r3, #4

08003880 <LoopCopyDataInit>:
 8003880:	18c4      	adds	r4, r0, r3
 8003882:	428c      	cmp	r4, r1
 8003884:	d3f9      	bcc.n	800387a <CopyDataInit>
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <LoopForever+0x12>)
 8003888:	4c0b      	ldr	r4, [pc, #44]	; (80038b8 <LoopForever+0x16>)
 800388a:	2300      	movs	r3, #0
 800388c:	e001      	b.n	8003892 <LoopFillZerobss>

0800388e <FillZerobss>:
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	3204      	adds	r2, #4

08003892 <LoopFillZerobss>:
 8003892:	42a2      	cmp	r2, r4
 8003894:	d3fb      	bcc.n	800388e <FillZerobss>
 8003896:	f7ff fbd3 	bl	8003040 <SystemInit>
 800389a:	f006 fe61 	bl	800a560 <__libc_init_array>
 800389e:	f7ff fa65 	bl	8002d6c <main>

080038a2 <LoopForever>:
 80038a2:	e7fe      	b.n	80038a2 <LoopForever>
 80038a4:	20010000 	.word	0x20010000
 80038a8:	20000000 	.word	0x20000000
 80038ac:	20000190 	.word	0x20000190
 80038b0:	0800b1cc 	.word	0x0800b1cc
 80038b4:	20000190 	.word	0x20000190
 80038b8:	20000574 	.word	0x20000574

080038bc <ADC1_2_IRQHandler>:
 80038bc:	e7fe      	b.n	80038bc <ADC1_2_IRQHandler>
	...

080038c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_Init+0x28>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_Init+0x28>)
 80038ca:	f043 0310 	orr.w	r3, r3, #16
 80038ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d0:	2003      	movs	r0, #3
 80038d2:	f001 fa17 	bl	8004d04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d6:	2000      	movs	r0, #0
 80038d8:	f000 f808 	bl	80038ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038dc:	f7ff fae4 	bl	8002ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000

080038ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_InitTick+0x54>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_InitTick+0x58>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003902:	fbb3 f3f1 	udiv	r3, r3, r1
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fa2f 	bl	8004d6e <HAL_SYSTICK_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e00e      	b.n	8003938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d80a      	bhi.n	8003936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003920:	2200      	movs	r2, #0
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f001 f9f7 	bl	8004d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <HAL_InitTick+0x5c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000120 	.word	0x20000120
 8003944:	20000128 	.word	0x20000128
 8003948:	20000124 	.word	0x20000124

0800394c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_IncTick+0x20>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x24>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_IncTick+0x24>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000128 	.word	0x20000128
 8003970:	20000560 	.word	0x20000560

08003974 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return uwTick;  
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_GetTick+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000560 	.word	0x20000560

0800398c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003994:	f7ff ffee 	bl	8003974 <HAL_GetTick>
 8003998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d005      	beq.n	80039b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_Delay+0x44>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80039b2:	bf00      	nop
 80039b4:	f7ff ffde 	bl	8003974 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d8f7      	bhi.n	80039b4 <HAL_Delay+0x28>
  {
  }
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000128 	.word	0x20000128

080039d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b09a      	sub	sp, #104	; 0x68
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e1e3      	b.n	8003dbc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d176      	bne.n	8003af4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d152      	bne.n	8003ab4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fe fe27 	bl	800267c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d13b      	bne.n	8003ab4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f001 f82b 	bl	8004a98 <ADC_Disable>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d12f      	bne.n	8003ab4 <HAL_ADC_Init+0xe0>
 8003a54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d12b      	bne.n	8003ab4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a64:	f023 0302 	bic.w	r3, r3, #2
 8003a68:	f043 0202 	orr.w	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a7e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a8e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a90:	4b92      	ldr	r3, [pc, #584]	; (8003cdc <HAL_ADC_Init+0x308>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a92      	ldr	r2, [pc, #584]	; (8003ce0 <HAL_ADC_Init+0x30c>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	0c9a      	lsrs	r2, r3, #18
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aa6:	e002      	b.n	8003aae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f9      	bne.n	8003aa8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad0:	d110      	bne.n	8003af4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f023 0312 	bic.w	r3, r3, #18
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 8150 	bne.w	8003da2 <HAL_ADC_Init+0x3ce>
 8003b02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 814b 	bne.w	8003da2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8143 	bne.w	8003da2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b24:	f043 0202 	orr.w	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b34:	d004      	beq.n	8003b40 <HAL_ADC_Init+0x16c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <HAL_ADC_Init+0x310>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_Init+0x170>
 8003b40:	4b69      	ldr	r3, [pc, #420]	; (8003ce8 <HAL_ADC_Init+0x314>)
 8003b42:	e000      	b.n	8003b46 <HAL_ADC_Init+0x172>
 8003b44:	4b69      	ldr	r3, [pc, #420]	; (8003cec <HAL_ADC_Init+0x318>)
 8003b46:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b50:	d102      	bne.n	8003b58 <HAL_ADC_Init+0x184>
 8003b52:	4b64      	ldr	r3, [pc, #400]	; (8003ce4 <HAL_ADC_Init+0x310>)
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e01a      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a61      	ldr	r2, [pc, #388]	; (8003ce4 <HAL_ADC_Init+0x310>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d103      	bne.n	8003b6a <HAL_ADC_Init+0x196>
 8003b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e011      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a60      	ldr	r2, [pc, #384]	; (8003cf0 <HAL_ADC_Init+0x31c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d102      	bne.n	8003b7a <HAL_ADC_Init+0x1a6>
 8003b74:	4b5f      	ldr	r3, [pc, #380]	; (8003cf4 <HAL_ADC_Init+0x320>)
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e009      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <HAL_ADC_Init+0x320>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d102      	bne.n	8003b8a <HAL_ADC_Init+0x1b6>
 8003b84:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <HAL_ADC_Init+0x31c>)
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e001      	b.n	8003b8e <HAL_ADC_Init+0x1ba>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d108      	bne.n	8003bae <HAL_ADC_Init+0x1da>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_Init+0x1da>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_ADC_Init+0x1dc>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11c      	bne.n	8003bee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_ADC_Init+0x202>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADC_Init+0x202>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_ADC_Init+0x204>
 8003bd6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7e5b      	ldrb	r3, [r3, #25]
 8003bf2:	035b      	lsls	r3, r3, #13
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bf8:	2a01      	cmp	r2, #1
 8003bfa:	d002      	beq.n	8003c02 <HAL_ADC_Init+0x22e>
 8003bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c00:	e000      	b.n	8003c04 <HAL_ADC_Init+0x230>
 8003c02:	2200      	movs	r2, #0
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c14:	4313      	orrs	r3, r2
 8003c16:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d11b      	bne.n	8003c5a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7e5b      	ldrb	r3, [r3, #25]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d109      	bne.n	8003c3e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	045a      	lsls	r2, r3, #17
 8003c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c3c:	e00d      	b.n	8003c5a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c46:	f043 0220 	orr.w	r2, r3, #32
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d054      	beq.n	8003d0c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <HAL_ADC_Init+0x31c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_ADC_Init+0x2a2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <HAL_ADC_Init+0x320>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d140      	bne.n	8003cf8 <HAL_ADC_Init+0x324>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003c7e:	d02a      	beq.n	8003cd6 <HAL_ADC_Init+0x302>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c88:	d022      	beq.n	8003cd0 <HAL_ADC_Init+0x2fc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003c92:	d01a      	beq.n	8003cca <HAL_ADC_Init+0x2f6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003c9c:	d012      	beq.n	8003cc4 <HAL_ADC_Init+0x2f0>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8003ca6:	d00a      	beq.n	8003cbe <HAL_ADC_Init+0x2ea>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_ADC_Init+0x2e4>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	e023      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cb8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003cbc:	e020      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cbe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003cc2:	e01d      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cc4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003cc8:	e01a      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cce:	e017      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cd0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003cd4:	e014      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cd6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003cda:	e011      	b.n	8003d00 <HAL_ADC_Init+0x32c>
 8003cdc:	20000120 	.word	0x20000120
 8003ce0:	431bde83 	.word	0x431bde83
 8003ce4:	50000100 	.word	0x50000100
 8003ce8:	50000300 	.word	0x50000300
 8003cec:	50000700 	.word	0x50000700
 8003cf0:	50000400 	.word	0x50000400
 8003cf4:	50000500 	.word	0x50000500
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d04:	4313      	orrs	r3, r2
 8003d06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d114      	bne.n	8003d44 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d28:	f023 0302 	bic.w	r3, r3, #2
 8003d2c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7e1b      	ldrb	r3, [r3, #24]
 8003d32:	039a      	lsls	r2, r3, #14
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d40:	4313      	orrs	r3, r2
 8003d42:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <HAL_ADC_Init+0x3f0>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d54:	430b      	orrs	r3, r1
 8003d56:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d10c      	bne.n	8003d7a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f023 010f 	bic.w	r1, r3, #15
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
 8003d78:	e007      	b.n	8003d8a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 020f 	bic.w	r2, r2, #15
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f023 0303 	bic.w	r3, r3, #3
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003da0:	e00a      	b.n	8003db8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f023 0312 	bic.w	r3, r3, #18
 8003daa:	f043 0210 	orr.w	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003db8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3768      	adds	r7, #104	; 0x68
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	fff0c007 	.word	0xfff0c007

08003dc8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 80f9 	bne.w	8003fd6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_Start+0x2a>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0f4      	b.n	8003fdc <HAL_ADC_Start+0x214>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fde8 	bl	80049d0 <ADC_Enable>
 8003e00:	4603      	mov	r3, r0
 8003e02:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80e0 	bne.w	8003fcc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e28:	d004      	beq.n	8003e34 <HAL_ADC_Start+0x6c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_ADC_Start+0x21c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d106      	bne.n	8003e42 <HAL_ADC_Start+0x7a>
 8003e34:	4b6c      	ldr	r3, [pc, #432]	; (8003fe8 <HAL_ADC_Start+0x220>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <HAL_ADC_Start+0x9a>
 8003e40:	e005      	b.n	8003e4e <HAL_ADC_Start+0x86>
 8003e42:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_ADC_Start+0x224>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_ADC_Start+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e56:	d004      	beq.n	8003e62 <HAL_ADC_Start+0x9a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a64      	ldr	r2, [pc, #400]	; (8003ff0 <HAL_ADC_Start+0x228>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d115      	bne.n	8003e8e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d036      	beq.n	8003eea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e8c:	e02d      	b.n	8003eea <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea2:	d004      	beq.n	8003eae <HAL_ADC_Start+0xe6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a4e      	ldr	r2, [pc, #312]	; (8003fe4 <HAL_ADC_Start+0x21c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10a      	bne.n	8003ec4 <HAL_ADC_Start+0xfc>
 8003eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e008      	b.n	8003ed6 <HAL_ADC_Start+0x10e>
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_ADC_Start+0x228>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ee2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	d106      	bne.n	8003f06 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f023 0206 	bic.w	r2, r3, #6
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
 8003f04:	e002      	b.n	8003f0c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	221c      	movs	r2, #28
 8003f1a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_Start+0x168>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2e      	ldr	r2, [pc, #184]	; (8003fe4 <HAL_ADC_Start+0x21c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d106      	bne.n	8003f3e <HAL_ADC_Start+0x176>
 8003f30:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <HAL_ADC_Start+0x220>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d03e      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003f3c:	e005      	b.n	8003f4a <HAL_ADC_Start+0x182>
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_ADC_Start+0x224>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d037      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f52:	d004      	beq.n	8003f5e <HAL_ADC_Start+0x196>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <HAL_ADC_Start+0x21c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d106      	bne.n	8003f6c <HAL_ADC_Start+0x1a4>
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_ADC_Start+0x220>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d027      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003f6a:	e005      	b.n	8003f78 <HAL_ADC_Start+0x1b0>
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <HAL_ADC_Start+0x224>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d020      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_Start+0x1c4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <HAL_ADC_Start+0x21c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d106      	bne.n	8003f9a <HAL_ADC_Start+0x1d2>
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_ADC_Start+0x220>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	d010      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003f98:	e005      	b.n	8003fa6 <HAL_ADC_Start+0x1de>
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_ADC_Start+0x224>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	d009      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fae:	d004      	beq.n	8003fba <HAL_ADC_Start+0x1f2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_ADC_Start+0x228>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10f      	bne.n	8003fda <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0204 	orr.w	r2, r2, #4
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	e006      	b.n	8003fda <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fd4:	e001      	b.n	8003fda <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	50000100 	.word	0x50000100
 8003fe8:	50000300 	.word	0x50000300
 8003fec:	50000700 	.word	0x50000700
 8003ff0:	50000400 	.word	0x50000400

08003ff4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d102      	bne.n	8004010 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800400a:	2308      	movs	r3, #8
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e03a      	b.n	8004086 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004018:	d004      	beq.n	8004024 <HAL_ADC_PollForConversion+0x30>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a72      	ldr	r2, [pc, #456]	; (80041e8 <HAL_ADC_PollForConversion+0x1f4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_ADC_PollForConversion+0x34>
 8004024:	4b71      	ldr	r3, [pc, #452]	; (80041ec <HAL_ADC_PollForConversion+0x1f8>)
 8004026:	e000      	b.n	800402a <HAL_ADC_PollForConversion+0x36>
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <HAL_ADC_PollForConversion+0x1fc>)
 800402a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2b00      	cmp	r3, #0
 8004036:	d112      	bne.n	800405e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d11d      	bne.n	8004082 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0bf      	b.n	80041de <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0ad      	b.n	80041de <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004082:	230c      	movs	r3, #12
 8004084:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800408e:	d004      	beq.n	800409a <HAL_ADC_PollForConversion+0xa6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a54      	ldr	r2, [pc, #336]	; (80041e8 <HAL_ADC_PollForConversion+0x1f4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d106      	bne.n	80040a8 <HAL_ADC_PollForConversion+0xb4>
 800409a:	4b54      	ldr	r3, [pc, #336]	; (80041ec <HAL_ADC_PollForConversion+0x1f8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d010      	beq.n	80040c8 <HAL_ADC_PollForConversion+0xd4>
 80040a6:	e005      	b.n	80040b4 <HAL_ADC_PollForConversion+0xc0>
 80040a8:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <HAL_ADC_PollForConversion+0x1fc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_ADC_PollForConversion+0xd4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040bc:	d004      	beq.n	80040c8 <HAL_ADC_PollForConversion+0xd4>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a4c      	ldr	r2, [pc, #304]	; (80041f4 <HAL_ADC_PollForConversion+0x200>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d104      	bne.n	80040d2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e00f      	b.n	80040f2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040da:	d004      	beq.n	80040e6 <HAL_ADC_PollForConversion+0xf2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a41      	ldr	r2, [pc, #260]	; (80041e8 <HAL_ADC_PollForConversion+0x1f4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d102      	bne.n	80040ec <HAL_ADC_PollForConversion+0xf8>
 80040e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040ea:	e000      	b.n	80040ee <HAL_ADC_PollForConversion+0xfa>
 80040ec:	4b41      	ldr	r3, [pc, #260]	; (80041f4 <HAL_ADC_PollForConversion+0x200>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80040f2:	f7ff fc3f 	bl	8003974 <HAL_GetTick>
 80040f6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040f8:	e021      	b.n	800413e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d01d      	beq.n	800413e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_ADC_PollForConversion+0x124>
 8004108:	f7ff fc34 	bl	8003974 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d212      	bcs.n	800413e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0204 	orr.w	r2, r3, #4
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e04f      	b.n	80041de <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0d6      	beq.n	80040fa <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004162:	2b00      	cmp	r3, #0
 8004164:	d131      	bne.n	80041ca <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800416c:	2b00      	cmp	r3, #0
 800416e:	d12c      	bne.n	80041ca <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b08      	cmp	r3, #8
 800417c:	d125      	bne.n	80041ca <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d112      	bne.n	80041b2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d112      	bne.n	80041ca <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f043 0201 	orr.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
 80041b0:	e00b      	b.n	80041ca <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	50000100 	.word	0x50000100
 80041ec:	50000300 	.word	0x50000300
 80041f0:	50000700 	.word	0x50000700
 80041f4:	50000400 	.word	0x50000400

080041f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b09b      	sub	sp, #108	; 0x6c
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x22>
 8004232:	2302      	movs	r3, #2
 8004234:	e2ca      	b.n	80047cc <HAL_ADC_ConfigChannel+0x5b8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 82ae 	bne.w	80047aa <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d81c      	bhi.n	8004290 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	461a      	mov	r2, r3
 800426a:	231f      	movs	r3, #31
 800426c:	4093      	lsls	r3, r2
 800426e:	43db      	mvns	r3, r3
 8004270:	4019      	ands	r1, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fa00 f203 	lsl.w	r2, r0, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
 800428e:	e063      	b.n	8004358 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b09      	cmp	r3, #9
 8004296:	d81e      	bhi.n	80042d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	3b1e      	subs	r3, #30
 80042ac:	221f      	movs	r2, #31
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	4019      	ands	r1, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	3b1e      	subs	r3, #30
 80042c8:	fa00 f203 	lsl.w	r2, r0, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	635a      	str	r2, [r3, #52]	; 0x34
 80042d4:	e040      	b.n	8004358 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b0e      	cmp	r3, #14
 80042dc:	d81e      	bhi.n	800431c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	3b3c      	subs	r3, #60	; 0x3c
 80042f2:	221f      	movs	r2, #31
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	4019      	ands	r1, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4413      	add	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	3b3c      	subs	r3, #60	; 0x3c
 800430e:	fa00 f203 	lsl.w	r2, r0, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
 800431a:	e01d      	b.n	8004358 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	3b5a      	subs	r3, #90	; 0x5a
 8004330:	221f      	movs	r2, #31
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	4019      	ands	r1, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	3b5a      	subs	r3, #90	; 0x5a
 800434c:	fa00 f203 	lsl.w	r2, r0, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 80e5 	bne.w	8004532 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b09      	cmp	r3, #9
 800436e:	d91c      	bls.n	80043aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6999      	ldr	r1, [r3, #24]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	3b1e      	subs	r3, #30
 8004382:	2207      	movs	r2, #7
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	4019      	ands	r1, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6898      	ldr	r0, [r3, #8]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	3b1e      	subs	r3, #30
 800439c:	fa00 f203 	lsl.w	r2, r0, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	619a      	str	r2, [r3, #24]
 80043a8:	e019      	b.n	80043de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6959      	ldr	r1, [r3, #20]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	2207      	movs	r2, #7
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	4019      	ands	r1, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6898      	ldr	r0, [r3, #8]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	fa00 f203 	lsl.w	r2, r0, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d84f      	bhi.n	80044a0 <HAL_ADC_ConfigChannel+0x28c>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <HAL_ADC_ConfigChannel+0x1f4>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	08004419 	.word	0x08004419
 800440c:	0800443b 	.word	0x0800443b
 8004410:	0800445d 	.word	0x0800445d
 8004414:	0800447f 	.word	0x0800447f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800441e:	4b9a      	ldr	r3, [pc, #616]	; (8004688 <HAL_ADC_ConfigChannel+0x474>)
 8004420:	4013      	ands	r3, r2
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	0691      	lsls	r1, r2, #26
 8004428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800442a:	430a      	orrs	r2, r1
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004436:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004438:	e07e      	b.n	8004538 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004440:	4b91      	ldr	r3, [pc, #580]	; (8004688 <HAL_ADC_ConfigChannel+0x474>)
 8004442:	4013      	ands	r3, r2
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	0691      	lsls	r1, r2, #26
 800444a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800444c:	430a      	orrs	r2, r1
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004458:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800445a:	e06d      	b.n	8004538 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <HAL_ADC_ConfigChannel+0x474>)
 8004464:	4013      	ands	r3, r2
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	0691      	lsls	r1, r2, #26
 800446c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800446e:	430a      	orrs	r2, r1
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800447a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800447c:	e05c      	b.n	8004538 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004484:	4b80      	ldr	r3, [pc, #512]	; (8004688 <HAL_ADC_ConfigChannel+0x474>)
 8004486:	4013      	ands	r3, r2
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	0691      	lsls	r1, r2, #26
 800448e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004490:	430a      	orrs	r2, r1
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800449c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800449e:	e04b      	b.n	8004538 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	069b      	lsls	r3, r3, #26
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d107      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	069b      	lsls	r3, r3, #26
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d107      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	069b      	lsls	r3, r3, #26
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d107      	bne.n	800450c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800450a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	069b      	lsls	r3, r3, #26
 800451c:	429a      	cmp	r2, r3
 800451e:	d10a      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800452e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004530:	e001      	b.n	8004536 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004536:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b01      	cmp	r3, #1
 8004544:	d108      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x344>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x344>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_ADC_ConfigChannel+0x346>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 8130 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d00f      	beq.n	8004588 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2201      	movs	r2, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	400a      	ands	r2, r1
 8004582:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004586:	e049      	b.n	800461c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	409a      	lsls	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b09      	cmp	r3, #9
 80045a8:	d91c      	bls.n	80045e4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6999      	ldr	r1, [r3, #24]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	3b1b      	subs	r3, #27
 80045bc:	2207      	movs	r2, #7
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	4019      	ands	r1, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6898      	ldr	r0, [r3, #8]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	3b1b      	subs	r3, #27
 80045d6:	fa00 f203 	lsl.w	r2, r0, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]
 80045e2:	e01b      	b.n	800461c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6959      	ldr	r1, [r3, #20]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	2207      	movs	r2, #7
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	4019      	ands	r1, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6898      	ldr	r0, [r3, #8]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	4613      	mov	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4413      	add	r3, r2
 8004610:	fa00 f203 	lsl.w	r2, r0, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004624:	d004      	beq.n	8004630 <HAL_ADC_ConfigChannel+0x41c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_ADC_ConfigChannel+0x478>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x420>
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_ADC_ConfigChannel+0x47c>)
 8004632:	e000      	b.n	8004636 <HAL_ADC_ConfigChannel+0x422>
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <HAL_ADC_ConfigChannel+0x480>)
 8004636:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b10      	cmp	r3, #16
 800463e:	d105      	bne.n	800464c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004648:	2b00      	cmp	r3, #0
 800464a:	d015      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004650:	2b11      	cmp	r3, #17
 8004652:	d105      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004664:	2b12      	cmp	r3, #18
 8004666:	f040 80ab 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800466a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 80a4 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004680:	d10a      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x484>
 8004682:	4b02      	ldr	r3, [pc, #8]	; (800468c <HAL_ADC_ConfigChannel+0x478>)
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e022      	b.n	80046ce <HAL_ADC_ConfigChannel+0x4ba>
 8004688:	83fff000 	.word	0x83fff000
 800468c:	50000100 	.word	0x50000100
 8004690:	50000300 	.word	0x50000300
 8004694:	50000700 	.word	0x50000700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a4e      	ldr	r2, [pc, #312]	; (80047d8 <HAL_ADC_ConfigChannel+0x5c4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d103      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x496>
 80046a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e011      	b.n	80046ce <HAL_ADC_ConfigChannel+0x4ba>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a4b      	ldr	r2, [pc, #300]	; (80047dc <HAL_ADC_ConfigChannel+0x5c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d102      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x4a6>
 80046b4:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_ADC_ConfigChannel+0x5cc>)
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e009      	b.n	80046ce <HAL_ADC_ConfigChannel+0x4ba>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a48      	ldr	r2, [pc, #288]	; (80047e0 <HAL_ADC_ConfigChannel+0x5cc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d102      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x4b6>
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <HAL_ADC_ConfigChannel+0x5c8>)
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e001      	b.n	80046ce <HAL_ADC_ConfigChannel+0x4ba>
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d108      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x4da>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x4da>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x4dc>
 80046ee:	2300      	movs	r3, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d150      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d010      	beq.n	800471c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d107      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x502>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x502>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_ADC_ConfigChannel+0x504>
 8004716:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d13c      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b10      	cmp	r3, #16
 8004722:	d11d      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x54c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800472c:	d118      	bne.n	8004760 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800472e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004738:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800473a:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <HAL_ADC_ConfigChannel+0x5d0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	0c9a      	lsrs	r2, r3, #18
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004750:	e002      	b.n	8004758 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3b01      	subs	r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f9      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800475e:	e02e      	b.n	80047be <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b11      	cmp	r3, #17
 8004766:	d10b      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x56c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004770:	d106      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800477a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800477e:	e01e      	b.n	80047be <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b12      	cmp	r3, #18
 8004786:	d11a      	bne.n	80047be <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004792:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004794:	e013      	b.n	80047be <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0220 	orr.w	r2, r3, #32
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047a8:	e00a      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80047bc:	e000      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80047be:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80047c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	376c      	adds	r7, #108	; 0x6c
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	50000100 	.word	0x50000100
 80047dc:	50000400 	.word	0x50000400
 80047e0:	50000500 	.word	0x50000500
 80047e4:	20000120 	.word	0x20000120
 80047e8:	431bde83 	.word	0x431bde83

080047ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b099      	sub	sp, #100	; 0x64
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004804:	d102      	bne.n	800480c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004806:	4b6d      	ldr	r3, [pc, #436]	; (80049bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	e01a      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a6a      	ldr	r2, [pc, #424]	; (80049bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d103      	bne.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	e011      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a67      	ldr	r2, [pc, #412]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d102      	bne.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	e009      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a64      	ldr	r2, [pc, #400]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d102      	bne.n	800483e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	e001      	b.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b0      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004856:	2302      	movs	r3, #2
 8004858:	e0a9      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f040 808d 	bne.w	800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	f040 8086 	bne.w	800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004888:	d004      	beq.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a4b      	ldr	r2, [pc, #300]	; (80049bc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004894:	4b4c      	ldr	r3, [pc, #304]	; (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004896:	e000      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004898:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800489a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d040      	beq.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80048a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048b6:	035b      	lsls	r3, r3, #13
 80048b8:	430b      	orrs	r3, r1
 80048ba:	431a      	orrs	r2, r3
 80048bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048be:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d108      	bne.n	80048e0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80048e0:	2300      	movs	r3, #0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d15c      	bne.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d107      	bne.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004902:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004904:	2b00      	cmp	r3, #0
 8004906:	d14b      	bne.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004910:	f023 030f 	bic.w	r3, r3, #15
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	6811      	ldr	r1, [r2, #0]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	6892      	ldr	r2, [r2, #8]
 800491c:	430a      	orrs	r2, r1
 800491e:	431a      	orrs	r2, r3
 8004920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004922:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004924:	e03c      	b.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004930:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d108      	bne.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d123      	bne.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004974:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004976:	2b00      	cmp	r3, #0
 8004978:	d112      	bne.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800497a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004982:	f023 030f 	bic.w	r3, r3, #15
 8004986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004988:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800498a:	e009      	b.n	80049a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800499e:	e000      	b.n	80049a2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80049a0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80049ae:	4618      	mov	r0, r3
 80049b0:	3764      	adds	r7, #100	; 0x64
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	50000100 	.word	0x50000100
 80049c0:	50000400 	.word	0x50000400
 80049c4:	50000500 	.word	0x50000500
 80049c8:	50000300 	.word	0x50000300
 80049cc:	50000700 	.word	0x50000700

080049d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d108      	bne.n	80049fc <ADC_Enable+0x2c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <ADC_Enable+0x2c>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <ADC_Enable+0x2e>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d143      	bne.n	8004a8a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <ADC_Enable+0xc4>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f043 0210 	orr.w	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e02f      	b.n	8004a8c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004a3c:	f7fe ff9a 	bl	8003974 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a42:	e01b      	b.n	8004a7c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a44:	f7fe ff96 	bl	8003974 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d914      	bls.n	8004a7c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d00d      	beq.n	8004a7c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f043 0210 	orr.w	r2, r3, #16
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	f043 0201 	orr.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e007      	b.n	8004a8c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d1dc      	bne.n	8004a44 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	8000003f 	.word	0x8000003f

08004a98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d108      	bne.n	8004ac4 <ADC_Disable+0x2c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <ADC_Disable+0x2c>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <ADC_Disable+0x2e>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d047      	beq.n	8004b5a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030d 	and.w	r3, r3, #13
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10f      	bne.n	8004af8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0202 	orr.w	r2, r2, #2
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2203      	movs	r2, #3
 8004aee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004af0:	f7fe ff40 	bl	8003974 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004af6:	e029      	b.n	8004b4c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0210 	orr.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e023      	b.n	8004b5c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b14:	f7fe ff2e 	bl	8003974 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d914      	bls.n	8004b4c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10d      	bne.n	8004b4c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b40:	f043 0201 	orr.w	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e007      	b.n	8004b5c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d0dc      	beq.n	8004b14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	60d3      	str	r3, [r2, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f003 0307 	and.w	r3, r3, #7
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db0b      	blt.n	8004bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	4907      	ldr	r1, [pc, #28]	; (8004c00 <__NVIC_EnableIRQ+0x38>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2001      	movs	r0, #1
 8004bea:	fa00 f202 	lsl.w	r2, r0, r2
 8004bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e100 	.word	0xe000e100

08004c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	6039      	str	r1, [r7, #0]
 8004c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	db0a      	blt.n	8004c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	490c      	ldr	r1, [pc, #48]	; (8004c50 <__NVIC_SetPriority+0x4c>)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	0112      	lsls	r2, r2, #4
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	440b      	add	r3, r1
 8004c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c2c:	e00a      	b.n	8004c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4908      	ldr	r1, [pc, #32]	; (8004c54 <__NVIC_SetPriority+0x50>)
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	0112      	lsls	r2, r2, #4
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	440b      	add	r3, r1
 8004c42:	761a      	strb	r2, [r3, #24]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000e100 	.word	0xe000e100
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	bf28      	it	cs
 8004c76:	2304      	movcs	r3, #4
 8004c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d902      	bls.n	8004c88 <NVIC_EncodePriority+0x30>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3b03      	subs	r3, #3
 8004c86:	e000      	b.n	8004c8a <NVIC_EncodePriority+0x32>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43d9      	mvns	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb0:	4313      	orrs	r3, r2
         );
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd0:	d301      	bcc.n	8004cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e00f      	b.n	8004cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <SysTick_Config+0x40>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cde:	210f      	movs	r1, #15
 8004ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce4:	f7ff ff8e 	bl	8004c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <SysTick_Config+0x40>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <SysTick_Config+0x40>)
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	e000e010 	.word	0xe000e010

08004d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ff29 	bl	8004b64 <__NVIC_SetPriorityGrouping>
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b086      	sub	sp, #24
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	4603      	mov	r3, r0
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2c:	f7ff ff3e 	bl	8004bac <__NVIC_GetPriorityGrouping>
 8004d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff ff8e 	bl	8004c58 <NVIC_EncodePriority>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff5d 	bl	8004c04 <__NVIC_SetPriority>
}
 8004d4a:	bf00      	nop
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff31 	bl	8004bc8 <__NVIC_EnableIRQ>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ffa2 	bl	8004cc0 <SysTick_Config>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e014      	b.n	8004dc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	791b      	ldrb	r3, [r3, #4]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fd fccd 	bl	8002748 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	3308      	adds	r3, #8
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e004      	b.n	8004dfe <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3314      	adds	r3, #20
 8004dfc:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	461a      	mov	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	795b      	ldrb	r3, [r3, #5]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_DAC_Start+0x16>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e039      	b.n	8004e9e <HAL_DAC_Start+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	409a      	lsls	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004e5a:	2b3c      	cmp	r3, #60	; 0x3c
 8004e5c:	d118      	bne.n	8004e90 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	e00f      	b.n	8004e90 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004e7a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8004e7e:	d107      	bne.n	8004e90 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0202 	orr.w	r2, r2, #2
 8004e8e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	795b      	ldrb	r3, [r3, #5]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_DAC_ConfigChannel+0x20>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e036      	b.n	8004f38 <HAL_DAC_ConfigChannel+0x8e>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004ede:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4013      	ands	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	22c0      	movs	r2, #192	; 0xc0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43da      	mvns	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	400a      	ands	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e037      	b.n	8004fca <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004f74:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f92b 	bl	8005208 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}  
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d008      	beq.n	8004ff6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e020      	b.n	8005038 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 020e 	bic.w	r2, r2, #14
 8005004:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501e:	2101      	movs	r1, #1
 8005020:	fa01 f202 	lsl.w	r2, r1, r2
 8005024:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005056:	2b02      	cmp	r3, #2
 8005058:	d005      	beq.n	8005066 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2204      	movs	r2, #4
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e027      	b.n	80050b6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 020e 	bic.w	r2, r2, #14
 8005074:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	2101      	movs	r1, #1
 8005090:	fa01 f202 	lsl.w	r2, r1, r2
 8005094:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
    } 
  }
  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	2204      	movs	r2, #4
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d024      	beq.n	8005132 <HAL_DMA_IRQHandler+0x72>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01f      	beq.n	8005132 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	2104      	movs	r1, #4
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d06a      	beq.n	80051fe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005130:	e065      	b.n	80051fe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2202      	movs	r2, #2
 8005138:	409a      	lsls	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d02c      	beq.n	800519c <HAL_DMA_IRQHandler+0xdc>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d027      	beq.n	800519c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 020a 	bic.w	r2, r2, #10
 8005168:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	2102      	movs	r1, #2
 800517c:	fa01 f202 	lsl.w	r2, r1, r2
 8005180:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d035      	beq.n	80051fe <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800519a:	e030      	b.n	80051fe <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2208      	movs	r2, #8
 80051a2:	409a      	lsls	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d028      	beq.n	80051fe <HAL_DMA_IRQHandler+0x13e>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d023      	beq.n	80051fe <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 020e 	bic.w	r2, r2, #14
 80051c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
    }
  }
}  
 80051fc:	e7ff      	b.n	80051fe <HAL_DMA_IRQHandler+0x13e>
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	4b14      	ldr	r3, [pc, #80]	; (8005268 <DMA_CalcBaseAndBitshift+0x60>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d80f      	bhi.n	800523c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	4b12      	ldr	r3, [pc, #72]	; (800526c <DMA_CalcBaseAndBitshift+0x64>)
 8005224:	4413      	add	r3, r2
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <DMA_CalcBaseAndBitshift+0x68>)
 8005228:	fba2 2303 	umull	r2, r3, r2, r3
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a0f      	ldr	r2, [pc, #60]	; (8005274 <DMA_CalcBaseAndBitshift+0x6c>)
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800523a:	e00e      	b.n	800525a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <DMA_CalcBaseAndBitshift+0x70>)
 8005244:	4413      	add	r3, r2
 8005246:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <DMA_CalcBaseAndBitshift+0x68>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	009a      	lsls	r2, r3, #2
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a09      	ldr	r2, [pc, #36]	; (800527c <DMA_CalcBaseAndBitshift+0x74>)
 8005258:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40020407 	.word	0x40020407
 800526c:	bffdfff8 	.word	0xbffdfff8
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	40020000 	.word	0x40020000
 8005278:	bffdfbf8 	.word	0xbffdfbf8
 800527c:	40020400 	.word	0x40020400

08005280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800528e:	e160      	b.n	8005552 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2101      	movs	r1, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	4013      	ands	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 8152 	beq.w	800554c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d005      	beq.n	80052c0 <HAL_GPIO_Init+0x40>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d130      	bne.n	8005322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	2203      	movs	r2, #3
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4013      	ands	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f6:	2201      	movs	r2, #1
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 0201 	and.w	r2, r3, #1
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d017      	beq.n	800535e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	2203      	movs	r2, #3
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d123      	bne.n	80053b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	08da      	lsrs	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3208      	adds	r2, #8
 8005372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	220f      	movs	r2, #15
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43db      	mvns	r3, r3
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	08da      	lsrs	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3208      	adds	r2, #8
 80053ac:	6939      	ldr	r1, [r7, #16]
 80053ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	2203      	movs	r2, #3
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43db      	mvns	r3, r3
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4013      	ands	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0203 	and.w	r2, r3, #3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80ac 	beq.w	800554c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f4:	4b5e      	ldr	r3, [pc, #376]	; (8005570 <HAL_GPIO_Init+0x2f0>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	4a5d      	ldr	r2, [pc, #372]	; (8005570 <HAL_GPIO_Init+0x2f0>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	6193      	str	r3, [r2, #24]
 8005400:	4b5b      	ldr	r3, [pc, #364]	; (8005570 <HAL_GPIO_Init+0x2f0>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800540c:	4a59      	ldr	r2, [pc, #356]	; (8005574 <HAL_GPIO_Init+0x2f4>)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	3302      	adds	r3, #2
 8005414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	220f      	movs	r2, #15
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	43db      	mvns	r3, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4013      	ands	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005436:	d025      	beq.n	8005484 <HAL_GPIO_Init+0x204>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a4f      	ldr	r2, [pc, #316]	; (8005578 <HAL_GPIO_Init+0x2f8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01f      	beq.n	8005480 <HAL_GPIO_Init+0x200>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a4e      	ldr	r2, [pc, #312]	; (800557c <HAL_GPIO_Init+0x2fc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d019      	beq.n	800547c <HAL_GPIO_Init+0x1fc>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a4d      	ldr	r2, [pc, #308]	; (8005580 <HAL_GPIO_Init+0x300>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_GPIO_Init+0x1f8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a4c      	ldr	r2, [pc, #304]	; (8005584 <HAL_GPIO_Init+0x304>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00d      	beq.n	8005474 <HAL_GPIO_Init+0x1f4>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a4b      	ldr	r2, [pc, #300]	; (8005588 <HAL_GPIO_Init+0x308>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <HAL_GPIO_Init+0x1f0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a4a      	ldr	r2, [pc, #296]	; (800558c <HAL_GPIO_Init+0x30c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d101      	bne.n	800546c <HAL_GPIO_Init+0x1ec>
 8005468:	2306      	movs	r3, #6
 800546a:	e00c      	b.n	8005486 <HAL_GPIO_Init+0x206>
 800546c:	2307      	movs	r3, #7
 800546e:	e00a      	b.n	8005486 <HAL_GPIO_Init+0x206>
 8005470:	2305      	movs	r3, #5
 8005472:	e008      	b.n	8005486 <HAL_GPIO_Init+0x206>
 8005474:	2304      	movs	r3, #4
 8005476:	e006      	b.n	8005486 <HAL_GPIO_Init+0x206>
 8005478:	2303      	movs	r3, #3
 800547a:	e004      	b.n	8005486 <HAL_GPIO_Init+0x206>
 800547c:	2302      	movs	r3, #2
 800547e:	e002      	b.n	8005486 <HAL_GPIO_Init+0x206>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_GPIO_Init+0x206>
 8005484:	2300      	movs	r3, #0
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	f002 0203 	and.w	r2, r2, #3
 800548c:	0092      	lsls	r2, r2, #2
 800548e:	4093      	lsls	r3, r2
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005496:	4937      	ldr	r1, [pc, #220]	; (8005574 <HAL_GPIO_Init+0x2f4>)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	089b      	lsrs	r3, r3, #2
 800549c:	3302      	adds	r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054a4:	4b3a      	ldr	r3, [pc, #232]	; (8005590 <HAL_GPIO_Init+0x310>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80054c8:	4a31      	ldr	r2, [pc, #196]	; (8005590 <HAL_GPIO_Init+0x310>)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054ce:	4b30      	ldr	r3, [pc, #192]	; (8005590 <HAL_GPIO_Init+0x310>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054f2:	4a27      	ldr	r2, [pc, #156]	; (8005590 <HAL_GPIO_Init+0x310>)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054f8:	4b25      	ldr	r3, [pc, #148]	; (8005590 <HAL_GPIO_Init+0x310>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	43db      	mvns	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800551c:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_GPIO_Init+0x310>)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005522:	4b1b      	ldr	r3, [pc, #108]	; (8005590 <HAL_GPIO_Init+0x310>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	43db      	mvns	r3, r3
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4013      	ands	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <HAL_GPIO_Init+0x310>)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3301      	adds	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f ae97 	bne.w	8005290 <HAL_GPIO_Init+0x10>
  }
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	40021000 	.word	0x40021000
 8005574:	40010000 	.word	0x40010000
 8005578:	48000400 	.word	0x48000400
 800557c:	48000800 	.word	0x48000800
 8005580:	48000c00 	.word	0x48000c00
 8005584:	48001000 	.word	0x48001000
 8005588:	48001400 	.word	0x48001400
 800558c:	48001800 	.word	0x48001800
 8005590:	40010400 	.word	0x40010400

08005594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	887b      	ldrh	r3, [r7, #2]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	e001      	b.n	80055b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
 80055d0:	4613      	mov	r3, r2
 80055d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055d4:	787b      	ldrb	r3, [r7, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055e0:	e002      	b.n	80055e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005606:	887a      	ldrh	r2, [r7, #2]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4013      	ands	r3, r2
 800560c:	041a      	lsls	r2, r3, #16
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	43d9      	mvns	r1, r3
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	400b      	ands	r3, r1
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	619a      	str	r2, [r3, #24]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800563e:	4a05      	ldr	r2, [pc, #20]	; (8005654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	4618      	mov	r0, r3
 8005648:	f7fd f98a 	bl	8002960 <HAL_GPIO_EXTI_Callback>
  }
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40010400 	.word	0x40010400

08005658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e081      	b.n	800576e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fd fb30 	bl	8002ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2224      	movs	r2, #36	; 0x24
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	e006      	b.n	80056e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d104      	bne.n	80056f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6812      	ldr	r2, [r2, #0]
 80056fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005704:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005714:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69d9      	ldr	r1, [r3, #28]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1a      	ldr	r2, [r3, #32]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	817b      	strh	r3, [r7, #10]
 800578a:	460b      	mov	r3, r1
 800578c:	813b      	strh	r3, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b20      	cmp	r3, #32
 800579c:	f040 80f9 	bne.w	8005992 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_I2C_Mem_Write+0x34>
 80057a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0ed      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_I2C_Mem_Write+0x4e>
 80057c2:	2302      	movs	r3, #2
 80057c4:	e0e6      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057ce:	f7fe f8d1 	bl	8003974 <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2319      	movs	r3, #25
 80057da:	2201      	movs	r2, #1
 80057dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fac3 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0d1      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2221      	movs	r2, #33	; 0x21
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2240      	movs	r2, #64	; 0x40
 80057fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a3a      	ldr	r2, [r7, #32]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005818:	88f8      	ldrh	r0, [r7, #6]
 800581a:	893a      	ldrh	r2, [r7, #8]
 800581c:	8979      	ldrh	r1, [r7, #10]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	4603      	mov	r3, r0
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f9d3 	bl	8005bd4 <I2C_RequestMemoryWrite>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0a9      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	2bff      	cmp	r3, #255	; 0xff
 8005848:	d90e      	bls.n	8005868 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	22ff      	movs	r2, #255	; 0xff
 800584e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005854:	b2da      	uxtb	r2, r3
 8005856:	8979      	ldrh	r1, [r7, #10]
 8005858:	2300      	movs	r3, #0
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fbb5 	bl	8005fd0 <I2C_TransferConfig>
 8005866:	e00f      	b.n	8005888 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005876:	b2da      	uxtb	r2, r3
 8005878:	8979      	ldrh	r1, [r7, #10]
 800587a:	2300      	movs	r3, #0
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fba4 	bl	8005fd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 faad 	bl	8005dec <I2C_WaitOnTXISFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e07b      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	781a      	ldrb	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d034      	beq.n	8005940 <HAL_I2C_Mem_Write+0x1c8>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d130      	bne.n	8005940 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	2200      	movs	r2, #0
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fa3f 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e04d      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2bff      	cmp	r3, #255	; 0xff
 8005900:	d90e      	bls.n	8005920 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590c:	b2da      	uxtb	r2, r3
 800590e:	8979      	ldrh	r1, [r7, #10]
 8005910:	2300      	movs	r3, #0
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fb59 	bl	8005fd0 <I2C_TransferConfig>
 800591e:	e00f      	b.n	8005940 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592e:	b2da      	uxtb	r2, r3
 8005930:	8979      	ldrh	r1, [r7, #10]
 8005932:	2300      	movs	r3, #0
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fb48 	bl	8005fd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d19e      	bne.n	8005888 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fa8c 	bl	8005e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e01a      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2220      	movs	r2, #32
 8005964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6859      	ldr	r1, [r3, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <HAL_I2C_Mem_Write+0x224>)
 8005972:	400b      	ands	r3, r1
 8005974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	fe00e800 	.word	0xfe00e800

080059a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	817b      	strh	r3, [r7, #10]
 80059b2:	460b      	mov	r3, r1
 80059b4:	813b      	strh	r3, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	f040 80fd 	bne.w	8005bc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_I2C_Mem_Read+0x34>
 80059ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0f1      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_I2C_Mem_Read+0x4e>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e0ea      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059f6:	f7fd ffbd 	bl	8003974 <HAL_GetTick>
 80059fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	2319      	movs	r3, #25
 8005a02:	2201      	movs	r2, #1
 8005a04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f9af 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0d5      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2222      	movs	r2, #34	; 0x22
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a40:	88f8      	ldrh	r0, [r7, #6]
 8005a42:	893a      	ldrh	r2, [r7, #8]
 8005a44:	8979      	ldrh	r1, [r7, #10]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4603      	mov	r3, r0
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f913 	bl	8005c7c <I2C_RequestMemoryRead>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0ad      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2bff      	cmp	r3, #255	; 0xff
 8005a70:	d90e      	bls.n	8005a90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	22ff      	movs	r2, #255	; 0xff
 8005a76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	8979      	ldrh	r1, [r7, #10]
 8005a80:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <HAL_I2C_Mem_Read+0x22c>)
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 faa1 	bl	8005fd0 <I2C_TransferConfig>
 8005a8e:	e00f      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	8979      	ldrh	r1, [r7, #10]
 8005aa2:	4b4a      	ldr	r3, [pc, #296]	; (8005bcc <HAL_I2C_Mem_Read+0x22c>)
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fa90 	bl	8005fd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2104      	movs	r1, #4
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f956 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07c      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d034      	beq.n	8005b70 <HAL_I2C_Mem_Read+0x1d0>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d130      	bne.n	8005b70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	2200      	movs	r2, #0
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f927 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e04d      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2bff      	cmp	r3, #255	; 0xff
 8005b30:	d90e      	bls.n	8005b50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	22ff      	movs	r2, #255	; 0xff
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	8979      	ldrh	r1, [r7, #10]
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fa41 	bl	8005fd0 <I2C_TransferConfig>
 8005b4e:	e00f      	b.n	8005b70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	8979      	ldrh	r1, [r7, #10]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa30 	bl	8005fd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d19a      	bne.n	8005ab0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f974 	bl	8005e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e01a      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2220      	movs	r2, #32
 8005b94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_I2C_Mem_Read+0x230>)
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	80002400 	.word	0x80002400
 8005bd0:	fe00e800 	.word	0xfe00e800

08005bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	461a      	mov	r2, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	817b      	strh	r3, [r7, #10]
 8005be6:	460b      	mov	r3, r1
 8005be8:	813b      	strh	r3, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	8979      	ldrh	r1, [r7, #10]
 8005bf4:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <I2C_RequestMemoryWrite+0xa4>)
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f9e7 	bl	8005fd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	69b9      	ldr	r1, [r7, #24]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f8f0 	bl	8005dec <I2C_WaitOnTXISFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e02c      	b.n	8005c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	629a      	str	r2, [r3, #40]	; 0x28
 8005c26:	e015      	b.n	8005c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c28:	893b      	ldrh	r3, [r7, #8]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f8d6 	bl	8005dec <I2C_WaitOnTXISFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e012      	b.n	8005c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4a:	893b      	ldrh	r3, [r7, #8]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2180      	movs	r1, #128	; 0x80
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f884 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	80002000 	.word	0x80002000

08005c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	817b      	strh	r3, [r7, #10]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	813b      	strh	r3, [r7, #8]
 8005c92:	4613      	mov	r3, r2
 8005c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	8979      	ldrh	r1, [r7, #10]
 8005c9c:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <I2C_RequestMemoryRead+0xa4>)
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f994 	bl	8005fd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	69b9      	ldr	r1, [r7, #24]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f89d 	bl	8005dec <I2C_WaitOnTXISFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e02c      	b.n	8005d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d105      	bne.n	8005cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cc2:	893b      	ldrh	r3, [r7, #8]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ccc:	e015      	b.n	8005cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cce:	893b      	ldrh	r3, [r7, #8]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f883 	bl	8005dec <I2C_WaitOnTXISFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e012      	b.n	8005d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf0:	893b      	ldrh	r3, [r7, #8]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2200      	movs	r2, #0
 8005d02:	2140      	movs	r1, #64	; 0x40
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f831 	bl	8005d6c <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	80002000 	.word	0x80002000

08005d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d103      	bne.n	8005d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d007      	beq.n	8005d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	619a      	str	r2, [r3, #24]
  }
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d7c:	e022      	b.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d01e      	beq.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fd fdf5 	bl	8003974 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d113      	bne.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da0:	f043 0220 	orr.w	r2, r3, #32
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e00f      	b.n	8005de4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d0cd      	beq.n	8005d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005df8:	e02c      	b.n	8005e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f870 	bl	8005ee4 <I2C_IsAcknowledgeFailed>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e02a      	b.n	8005e64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d01e      	beq.n	8005e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fd fdad 	bl	8003974 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d113      	bne.n	8005e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e007      	b.n	8005e64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d1cb      	bne.n	8005dfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e78:	e028      	b.n	8005ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f830 	bl	8005ee4 <I2C_IsAcknowledgeFailed>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e026      	b.n	8005edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8e:	f7fd fd71 	bl	8003974 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d113      	bne.n	8005ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e007      	b.n	8005edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d1cf      	bne.n	8005e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b10      	cmp	r3, #16
 8005efc:	d161      	bne.n	8005fc2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f0c:	d02b      	beq.n	8005f66 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f1e:	e022      	b.n	8005f66 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d01e      	beq.n	8005f66 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f28:	f7fd fd24 	bl	8003974 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d302      	bcc.n	8005f3e <I2C_IsAcknowledgeFailed+0x5a>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d113      	bne.n	8005f66 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0220 	orr.w	r2, r3, #32
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e02e      	b.n	8005fc4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d1d5      	bne.n	8005f20 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2210      	movs	r2, #16
 8005f7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2220      	movs	r2, #32
 8005f82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fecd 	bl	8005d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <I2C_IsAcknowledgeFailed+0xe8>)
 8005f96:	400b      	ands	r3, r1
 8005f98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	f043 0204 	orr.w	r2, r3, #4
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	fe00e800 	.word	0xfe00e800

08005fd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	607b      	str	r3, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	817b      	strh	r3, [r7, #10]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	0d5b      	lsrs	r3, r3, #21
 8005fec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ff0:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <I2C_TransferConfig+0x58>)
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	ea02 0103 	and.w	r1, r2, r3
 8005ffa:	897b      	ldrh	r3, [r7, #10]
 8005ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006000:	7a7b      	ldrb	r3, [r7, #9]
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	431a      	orrs	r2, r3
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	431a      	orrs	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	03ff63ff 	.word	0x03ff63ff

0800602c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b20      	cmp	r3, #32
 8006040:	d138      	bne.n	80060b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800604c:	2302      	movs	r3, #2
 800604e:	e032      	b.n	80060b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	; 0x24
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800607e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d139      	bne.n	800614c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e033      	b.n	800614e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2224      	movs	r2, #36	; 0x24
 80060f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006114:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	e000      	b.n	800614e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
  }
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006162:	af00      	add	r7, sp, #0
 8006164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800616c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800616e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006172:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f001 b83a 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006182:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 816f 	beq.w	8006476 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006198:	4bb5      	ldr	r3, [pc, #724]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 030c 	and.w	r3, r3, #12
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d00c      	beq.n	80061be <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061a4:	4bb2      	ldr	r3, [pc, #712]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d15c      	bne.n	800626a <HAL_RCC_OscConfig+0x10e>
 80061b0:	4baf      	ldr	r3, [pc, #700]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80061b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061bc:	d155      	bne.n	800626a <HAL_RCC_OscConfig+0x10e>
 80061be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80061ca:	fa93 f3a3 	rbit	r3, r3
 80061ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d102      	bne.n	80061f0 <HAL_RCC_OscConfig+0x94>
 80061ea:	4ba1      	ldr	r3, [pc, #644]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	e015      	b.n	800621c <HAL_RCC_OscConfig+0xc0>
 80061f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061f4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80061fc:	fa93 f3a3 	rbit	r3, r3
 8006200:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006208:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800620c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006210:	fa93 f3a3 	rbit	r3, r3
 8006214:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006218:	4b95      	ldr	r3, [pc, #596]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006220:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006224:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8006228:	fa92 f2a2 	rbit	r2, r2
 800622c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8006230:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006234:	fab2 f282 	clz	r2, r2
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	f042 0220 	orr.w	r2, r2, #32
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	f002 021f 	and.w	r2, r2, #31
 8006244:	2101      	movs	r1, #1
 8006246:	fa01 f202 	lsl.w	r2, r1, r2
 800624a:	4013      	ands	r3, r2
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8111 	beq.w	8006474 <HAL_RCC_OscConfig+0x318>
 8006252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 8108 	bne.w	8006474 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f000 bfc6 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800626a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800626e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x12e>
 800627c:	4b7c      	ldr	r3, [pc, #496]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a7b      	ldr	r2, [pc, #492]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 8006282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e036      	b.n	80062f8 <HAL_RCC_OscConfig+0x19c>
 800628a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800628e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x158>
 800629a:	4b75      	ldr	r3, [pc, #468]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a74      	ldr	r2, [pc, #464]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b72      	ldr	r3, [pc, #456]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a71      	ldr	r2, [pc, #452]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e021      	b.n	80062f8 <HAL_RCC_OscConfig+0x19c>
 80062b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x184>
 80062c6:	4b6a      	ldr	r3, [pc, #424]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a69      	ldr	r2, [pc, #420]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4b67      	ldr	r3, [pc, #412]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a66      	ldr	r2, [pc, #408]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0x19c>
 80062e0:	4b63      	ldr	r3, [pc, #396]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a62      	ldr	r2, [pc, #392]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4b60      	ldr	r3, [pc, #384]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a5f      	ldr	r2, [pc, #380]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 80062f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062f6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d059      	beq.n	80063bc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006308:	f7fd fb34 	bl	8003974 <HAL_GetTick>
 800630c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006310:	e00a      	b.n	8006328 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006312:	f7fd fb2f 	bl	8003974 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b64      	cmp	r3, #100	; 0x64
 8006320:	d902      	bls.n	8006328 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	f000 bf67 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
 8006328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800632c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006330:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800633c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006340:	fab3 f383 	clz	r3, r3
 8006344:	b2db      	uxtb	r3, r3
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	d102      	bne.n	800635a <HAL_RCC_OscConfig+0x1fe>
 8006354:	4b46      	ldr	r3, [pc, #280]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	e015      	b.n	8006386 <HAL_RCC_OscConfig+0x22a>
 800635a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800635e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006366:	fa93 f3a3 	rbit	r3, r3
 800636a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800636e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006372:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006376:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800637a:	fa93 f3a3 	rbit	r3, r3
 800637e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006382:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800638a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800638e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006392:	fa92 f2a2 	rbit	r2, r2
 8006396:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800639a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800639e:	fab2 f282 	clz	r2, r2
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	f042 0220 	orr.w	r2, r2, #32
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	f002 021f 	and.w	r2, r2, #31
 80063ae:	2101      	movs	r1, #1
 80063b0:	fa01 f202 	lsl.w	r2, r1, r2
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0ab      	beq.n	8006312 <HAL_RCC_OscConfig+0x1b6>
 80063ba:	e05c      	b.n	8006476 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063bc:	f7fd fada 	bl	8003974 <HAL_GetTick>
 80063c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c4:	e00a      	b.n	80063dc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063c6:	f7fd fad5 	bl	8003974 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b64      	cmp	r3, #100	; 0x64
 80063d4:	d902      	bls.n	80063dc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	f000 bf0d 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
 80063dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063e0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80063e8:	fa93 f3a3 	rbit	r3, r3
 80063ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80063f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f4:	fab3 f383 	clz	r3, r3
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d102      	bne.n	800640e <HAL_RCC_OscConfig+0x2b2>
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	e015      	b.n	800643a <HAL_RCC_OscConfig+0x2de>
 800640e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006412:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800641a:	fa93 f3a3 	rbit	r3, r3
 800641e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8006422:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006426:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800642a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800642e:	fa93 f3a3 	rbit	r3, r3
 8006432:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <HAL_RCC_OscConfig+0x314>)
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800643e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006442:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006446:	fa92 f2a2 	rbit	r2, r2
 800644a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800644e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006452:	fab2 f282 	clz	r2, r2
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	f042 0220 	orr.w	r2, r2, #32
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	f002 021f 	and.w	r2, r2, #31
 8006462:	2101      	movs	r1, #1
 8006464:	fa01 f202 	lsl.w	r2, r1, r2
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ab      	bne.n	80063c6 <HAL_RCC_OscConfig+0x26a>
 800646e:	e002      	b.n	8006476 <HAL_RCC_OscConfig+0x31a>
 8006470:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800647a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 817f 	beq.w	800678a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800648c:	4ba7      	ldr	r3, [pc, #668]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 030c 	and.w	r3, r3, #12
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006498:	4ba4      	ldr	r3, [pc, #656]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d173      	bne.n	800658c <HAL_RCC_OscConfig+0x430>
 80064a4:	4ba1      	ldr	r3, [pc, #644]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	d16c      	bne.n	800658c <HAL_RCC_OscConfig+0x430>
 80064b2:	2302      	movs	r3, #2
 80064b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80064bc:	fa93 f3a3 	rbit	r3, r3
 80064c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80064c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c8:	fab3 f383 	clz	r3, r3
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f043 0301 	orr.w	r3, r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d102      	bne.n	80064e2 <HAL_RCC_OscConfig+0x386>
 80064dc:	4b93      	ldr	r3, [pc, #588]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	e013      	b.n	800650a <HAL_RCC_OscConfig+0x3ae>
 80064e2:	2302      	movs	r3, #2
 80064e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80064f4:	2302      	movs	r3, #2
 80064f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80064fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80064fe:	fa93 f3a3 	rbit	r3, r3
 8006502:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006506:	4b89      	ldr	r3, [pc, #548]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2202      	movs	r2, #2
 800650c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006510:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006514:	fa92 f2a2 	rbit	r2, r2
 8006518:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800651c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006520:	fab2 f282 	clz	r2, r2
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	f042 0220 	orr.w	r2, r2, #32
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	f002 021f 	and.w	r2, r2, #31
 8006530:	2101      	movs	r1, #1
 8006532:	fa01 f202 	lsl.w	r2, r1, r2
 8006536:	4013      	ands	r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_RCC_OscConfig+0x3f6>
 800653c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d002      	beq.n	8006552 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f000 be52 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b76      	ldr	r3, [pc, #472]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800655e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	21f8      	movs	r1, #248	; 0xf8
 8006568:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006570:	fa91 f1a1 	rbit	r1, r1
 8006574:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006578:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800657c:	fab1 f181 	clz	r1, r1
 8006580:	b2c9      	uxtb	r1, r1
 8006582:	408b      	lsls	r3, r1
 8006584:	4969      	ldr	r1, [pc, #420]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006586:	4313      	orrs	r3, r2
 8006588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800658a:	e0fe      	b.n	800678a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800658c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8088 	beq.w	80066ae <HAL_RCC_OscConfig+0x552>
 800659e:	2301      	movs	r3, #1
 80065a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80065a8:	fa93 f3a3 	rbit	r3, r3
 80065ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80065b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	461a      	mov	r2, r3
 80065c6:	2301      	movs	r3, #1
 80065c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ca:	f7fd f9d3 	bl	8003974 <HAL_GetTick>
 80065ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d2:	e00a      	b.n	80065ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065d4:	f7fd f9ce 	bl	8003974 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d902      	bls.n	80065ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	f000 be06 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80065fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f043 0301 	orr.w	r3, r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <HAL_RCC_OscConfig+0x4be>
 8006614:	4b45      	ldr	r3, [pc, #276]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	e013      	b.n	8006642 <HAL_RCC_OscConfig+0x4e6>
 800661a:	2302      	movs	r3, #2
 800661c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006620:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006624:	fa93 f3a3 	rbit	r3, r3
 8006628:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800662c:	2302      	movs	r3, #2
 800662e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006632:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006636:	fa93 f3a3 	rbit	r3, r3
 800663a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800663e:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2202      	movs	r2, #2
 8006644:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006648:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800664c:	fa92 f2a2 	rbit	r2, r2
 8006650:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006654:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006658:	fab2 f282 	clz	r2, r2
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	f042 0220 	orr.w	r2, r2, #32
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	f002 021f 	and.w	r2, r2, #31
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f202 	lsl.w	r2, r1, r2
 800666e:	4013      	ands	r3, r2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0af      	beq.n	80065d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800667c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	21f8      	movs	r1, #248	; 0xf8
 800668a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006692:	fa91 f1a1 	rbit	r1, r1
 8006696:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800669a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800669e:	fab1 f181 	clz	r1, r1
 80066a2:	b2c9      	uxtb	r1, r1
 80066a4:	408b      	lsls	r3, r1
 80066a6:	4921      	ldr	r1, [pc, #132]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]
 80066ac:	e06d      	b.n	800678a <HAL_RCC_OscConfig+0x62e>
 80066ae:	2301      	movs	r3, #1
 80066b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80066b8:	fa93 f3a3 	rbit	r3, r3
 80066bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80066c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c4:	fab3 f383 	clz	r3, r3
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80066ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	461a      	mov	r2, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066da:	f7fd f94b 	bl	8003974 <HAL_GetTick>
 80066de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e2:	e00a      	b.n	80066fa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e4:	f7fd f946 	bl	8003974 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d902      	bls.n	80066fa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	f000 bd7e 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
 80066fa:	2302      	movs	r3, #2
 80066fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006704:	fa93 f3a3 	rbit	r3, r3
 8006708:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800670c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006710:	fab3 f383 	clz	r3, r3
 8006714:	b2db      	uxtb	r3, r3
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	d105      	bne.n	8006730 <HAL_RCC_OscConfig+0x5d4>
 8006724:	4b01      	ldr	r3, [pc, #4]	; (800672c <HAL_RCC_OscConfig+0x5d0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	e016      	b.n	8006758 <HAL_RCC_OscConfig+0x5fc>
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	2302      	movs	r3, #2
 8006732:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673a:	fa93 f3a3 	rbit	r3, r3
 800673e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006742:	2302      	movs	r3, #2
 8006744:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006748:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800674c:	fa93 f3a3 	rbit	r3, r3
 8006750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006754:	4bbf      	ldr	r3, [pc, #764]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	2202      	movs	r2, #2
 800675a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800675e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006762:	fa92 f2a2 	rbit	r2, r2
 8006766:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800676a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800676e:	fab2 f282 	clz	r2, r2
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	f042 0220 	orr.w	r2, r2, #32
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	f002 021f 	and.w	r2, r2, #31
 800677e:	2101      	movs	r1, #1
 8006780:	fa01 f202 	lsl.w	r2, r1, r2
 8006784:	4013      	ands	r3, r2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1ac      	bne.n	80066e4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800678e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8113 	beq.w	80069c6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d07c      	beq.n	80068aa <HAL_RCC_OscConfig+0x74e>
 80067b0:	2301      	movs	r3, #1
 80067b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ba:	fa93 f3a3 	rbit	r3, r3
 80067be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80067c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067c6:	fab3 f383 	clz	r3, r3
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	4ba2      	ldr	r3, [pc, #648]	; (8006a58 <HAL_RCC_OscConfig+0x8fc>)
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	461a      	mov	r2, r3
 80067d6:	2301      	movs	r3, #1
 80067d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fd f8cb 	bl	8003974 <HAL_GetTick>
 80067de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e2:	e00a      	b.n	80067fa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fd f8c6 	bl	8003974 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d902      	bls.n	80067fa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	f000 bcfe 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
 80067fa:	2302      	movs	r3, #2
 80067fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006804:	fa93 f2a3 	rbit	r2, r3
 8006808:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800680c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800681a:	2202      	movs	r2, #2
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	fa93 f2a3 	rbit	r2, r3
 800682c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800683e:	2202      	movs	r2, #2
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	fa93 f2a3 	rbit	r2, r3
 8006850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006854:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006858:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800685a:	4b7e      	ldr	r3, [pc, #504]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 800685c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800685e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006866:	2102      	movs	r1, #2
 8006868:	6019      	str	r1, [r3, #0]
 800686a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800686e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	fa93 f1a3 	rbit	r1, r3
 8006878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800687c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006880:	6019      	str	r1, [r3, #0]
  return result;
 8006882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006886:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	fab3 f383 	clz	r3, r3
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	2101      	movs	r1, #1
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d09d      	beq.n	80067e4 <HAL_RCC_OscConfig+0x688>
 80068a8:	e08d      	b.n	80069c6 <HAL_RCC_OscConfig+0x86a>
 80068aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	fa93 f2a3 	rbit	r2, r3
 80068c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80068cc:	601a      	str	r2, [r3, #0]
  return result;
 80068ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80068d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068d8:	fab3 f383 	clz	r3, r3
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	4b5d      	ldr	r3, [pc, #372]	; (8006a58 <HAL_RCC_OscConfig+0x8fc>)
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	461a      	mov	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ec:	f7fd f842 	bl	8003974 <HAL_GetTick>
 80068f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	e00a      	b.n	800690c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fd f83d 	bl	8003974 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d902      	bls.n	800690c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	f000 bc75 	b.w	80071f6 <HAL_RCC_OscConfig+0x109a>
 800690c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006910:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006914:	2202      	movs	r2, #2
 8006916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800691c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	fa93 f2a3 	rbit	r2, r3
 8006926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800692a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006938:	2202      	movs	r2, #2
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	fa93 f2a3 	rbit	r2, r3
 800694a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800694e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006958:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800695c:	2202      	movs	r2, #2
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006964:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	fa93 f2a3 	rbit	r2, r3
 800696e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006972:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006976:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006978:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 800697a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800697c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006980:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006984:	2102      	movs	r1, #2
 8006986:	6019      	str	r1, [r3, #0]
 8006988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800698c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	fa93 f1a3 	rbit	r1, r3
 8006996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800699a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800699e:	6019      	str	r1, [r3, #0]
  return result;
 80069a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	fab3 f383 	clz	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 031f 	and.w	r3, r3, #31
 80069ba:	2101      	movs	r1, #1
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d197      	bne.n	80068f6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 81a5 	beq.w	8006d26 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069dc:	2300      	movs	r3, #0
 80069de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d116      	bne.n	8006a1c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 80069f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f8:	61d3      	str	r3, [r2, #28]
 80069fa:	4b16      	ldr	r3, [pc, #88]	; (8006a54 <HAL_RCC_OscConfig+0x8f8>)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <HAL_RCC_OscConfig+0x900>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d121      	bne.n	8006a6c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_RCC_OscConfig+0x900>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <HAL_RCC_OscConfig+0x900>)
 8006a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a34:	f7fc ff9e 	bl	8003974 <HAL_GetTick>
 8006a38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3c:	e010      	b.n	8006a60 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a3e:	f7fc ff99 	bl	8003974 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d908      	bls.n	8006a60 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e3d1      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	10908120 	.word	0x10908120
 8006a5c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	4b8d      	ldr	r3, [pc, #564]	; (8006c98 <HAL_RCC_OscConfig+0xb3c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0e8      	beq.n	8006a3e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCC_OscConfig+0x92e>
 8006a7c:	4b87      	ldr	r3, [pc, #540]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	4a86      	ldr	r2, [pc, #536]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6213      	str	r3, [r2, #32]
 8006a88:	e035      	b.n	8006af6 <HAL_RCC_OscConfig+0x99a>
 8006a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10c      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x958>
 8006a9a:	4b80      	ldr	r3, [pc, #512]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4a7f      	ldr	r2, [pc, #508]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	6213      	str	r3, [r2, #32]
 8006aa6:	4b7d      	ldr	r3, [pc, #500]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4a7c      	ldr	r2, [pc, #496]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006aac:	f023 0304 	bic.w	r3, r3, #4
 8006ab0:	6213      	str	r3, [r2, #32]
 8006ab2:	e020      	b.n	8006af6 <HAL_RCC_OscConfig+0x99a>
 8006ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ab8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b05      	cmp	r3, #5
 8006ac2:	d10c      	bne.n	8006ade <HAL_RCC_OscConfig+0x982>
 8006ac4:	4b75      	ldr	r3, [pc, #468]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	4a74      	ldr	r2, [pc, #464]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006aca:	f043 0304 	orr.w	r3, r3, #4
 8006ace:	6213      	str	r3, [r2, #32]
 8006ad0:	4b72      	ldr	r3, [pc, #456]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	4a71      	ldr	r2, [pc, #452]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6213      	str	r3, [r2, #32]
 8006adc:	e00b      	b.n	8006af6 <HAL_RCC_OscConfig+0x99a>
 8006ade:	4b6f      	ldr	r3, [pc, #444]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	4a6e      	ldr	r2, [pc, #440]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	6213      	str	r3, [r2, #32]
 8006aea:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	4a6b      	ldr	r2, [pc, #428]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006afa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8081 	beq.w	8006c0a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b08:	f7fc ff34 	bl	8003974 <HAL_GetTick>
 8006b0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b10:	e00b      	b.n	8006b2a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b12:	f7fc ff2f 	bl	8003974 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e365      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
 8006b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b32:	2202      	movs	r2, #2
 8006b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b3a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	fa93 f2a3 	rbit	r2, r3
 8006b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006b56:	2202      	movs	r2, #2
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	fa93 f2a3 	rbit	r2, r3
 8006b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b6c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006b70:	601a      	str	r2, [r3, #0]
  return result;
 8006b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b76:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7c:	fab3 f383 	clz	r3, r3
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f043 0302 	orr.w	r3, r3, #2
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d102      	bne.n	8006b96 <HAL_RCC_OscConfig+0xa3a>
 8006b90:	4b42      	ldr	r3, [pc, #264]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	e013      	b.n	8006bbe <HAL_RCC_OscConfig+0xa62>
 8006b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ba6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	fa93 f2a3 	rbit	r2, r3
 8006bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bb4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	4b38      	ldr	r3, [pc, #224]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006bc2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	6011      	str	r1, [r2, #0]
 8006bca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006bce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	fa92 f1a2 	rbit	r1, r2
 8006bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006bdc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006be0:	6011      	str	r1, [r2, #0]
  return result;
 8006be2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006be6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	fab2 f282 	clz	r2, r2
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	f002 021f 	and.w	r2, r2, #31
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d084      	beq.n	8006b12 <HAL_RCC_OscConfig+0x9b6>
 8006c08:	e083      	b.n	8006d12 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c0a:	f7fc feb3 	bl	8003974 <HAL_GetTick>
 8006c0e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c12:	e00b      	b.n	8006c2c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c14:	f7fc feae 	bl	8003974 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e2e4      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
 8006c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006c34:	2202      	movs	r2, #2
 8006c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c3c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	fa93 f2a3 	rbit	r2, r3
 8006c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006c58:	2202      	movs	r2, #2
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c60:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	fa93 f2a3 	rbit	r2, r3
 8006c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c6e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006c72:	601a      	str	r2, [r3, #0]
  return result;
 8006c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c78:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006c7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c7e:	fab3 f383 	clz	r3, r3
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f043 0302 	orr.w	r3, r3, #2
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d106      	bne.n	8006ca0 <HAL_RCC_OscConfig+0xb44>
 8006c92:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <HAL_RCC_OscConfig+0xb40>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	e017      	b.n	8006cc8 <HAL_RCC_OscConfig+0xb6c>
 8006c98:	40007000 	.word	0x40007000
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ca4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006ca8:	2202      	movs	r2, #2
 8006caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cb0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	fa93 f2a3 	rbit	r2, r3
 8006cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cbe:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	4bb3      	ldr	r3, [pc, #716]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ccc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	6011      	str	r1, [r2, #0]
 8006cd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cd8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	fa92 f1a2 	rbit	r1, r2
 8006ce2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ce6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006cea:	6011      	str	r1, [r2, #0]
  return result;
 8006cec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006cf0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	fab2 f282 	clz	r2, r2
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	f002 021f 	and.w	r2, r2, #31
 8006d06:	2101      	movs	r1, #1
 8006d08:	fa01 f202 	lsl.w	r2, r1, r2
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d180      	bne.n	8006c14 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d12:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d105      	bne.n	8006d26 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d1a:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4a9d      	ldr	r2, [pc, #628]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d24:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 825e 	beq.w	80071f4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d38:	4b96      	ldr	r3, [pc, #600]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	f000 821f 	beq.w	8007184 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	f040 8170 	bne.w	8007038 <HAL_RCC_OscConfig+0xedc>
 8006d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	fa93 f2a3 	rbit	r2, r3
 8006d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d78:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006d7c:	601a      	str	r2, [r3, #0]
  return result;
 8006d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006d86:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d88:	fab3 f383 	clz	r3, r3
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d9e:	f7fc fde9 	bl	8003974 <HAL_GetTick>
 8006da2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006da6:	e009      	b.n	8006dbc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006da8:	f7fc fde4 	bl	8003974 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e21c      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
 8006dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	fa93 f2a3 	rbit	r2, r3
 8006dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ddc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006de0:	601a      	str	r2, [r3, #0]
  return result;
 8006de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006de6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006dea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dec:	fab3 f383 	clz	r3, r3
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d102      	bne.n	8006e06 <HAL_RCC_OscConfig+0xcaa>
 8006e00:	4b64      	ldr	r3, [pc, #400]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	e027      	b.n	8006e56 <HAL_RCC_OscConfig+0xcfa>
 8006e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006e0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e18:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	fa93 f2a3 	rbit	r2, r3
 8006e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	fa93 f2a3 	rbit	r2, r3
 8006e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e4c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	4b50      	ldr	r3, [pc, #320]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006e5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e62:	6011      	str	r1, [r2, #0]
 8006e64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	fa92 f1a2 	rbit	r1, r2
 8006e72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e76:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006e7a:	6011      	str	r1, [r2, #0]
  return result;
 8006e7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006e80:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	fab2 f282 	clz	r2, r2
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	f042 0220 	orr.w	r2, r2, #32
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	f002 021f 	and.w	r2, r2, #31
 8006e96:	2101      	movs	r1, #1
 8006e98:	fa01 f202 	lsl.w	r2, r1, r2
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d182      	bne.n	8006da8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea2:	4b3c      	ldr	r3, [pc, #240]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	f023 020f 	bic.w	r2, r3, #15
 8006eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006eae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	4937      	ldr	r1, [pc, #220]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6a19      	ldr	r1, [r3, #32]
 8006ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	430b      	orrs	r3, r1
 8006ede:	492d      	ldr	r1, [pc, #180]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ee8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ef6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	fa93 f2a3 	rbit	r2, r3
 8006f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006f08:	601a      	str	r2, [r3, #0]
  return result;
 8006f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006f12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f14:	fab3 f383 	clz	r3, r3
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	461a      	mov	r2, r3
 8006f26:	2301      	movs	r3, #1
 8006f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2a:	f7fc fd23 	bl	8003974 <HAL_GetTick>
 8006f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f32:	e009      	b.n	8006f48 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f34:	f7fc fd1e 	bl	8003974 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e156      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
 8006f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	fa93 f2a3 	rbit	r2, r3
 8006f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006f6c:	601a      	str	r2, [r3, #0]
  return result;
 8006f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f78:	fab3 f383 	clz	r3, r3
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d105      	bne.n	8006f98 <HAL_RCC_OscConfig+0xe3c>
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <HAL_RCC_OscConfig+0xe38>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	e02a      	b.n	8006fe8 <HAL_RCC_OscConfig+0xe8c>
 8006f92:	bf00      	nop
 8006f94:	40021000 	.word	0x40021000
 8006f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006faa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	fa93 f2a3 	rbit	r2, r3
 8006fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fb8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fd0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	fa93 f2a3 	rbit	r2, r3
 8006fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fde:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	4b86      	ldr	r3, [pc, #536]	; (8007200 <HAL_RCC_OscConfig+0x10a4>)
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006fec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ffa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	fa92 f1a2 	rbit	r1, r2
 8007004:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007008:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800700c:	6011      	str	r1, [r2, #0]
  return result;
 800700e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007012:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	fab2 f282 	clz	r2, r2
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	f042 0220 	orr.w	r2, r2, #32
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	f002 021f 	and.w	r2, r2, #31
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f202 	lsl.w	r2, r1, r2
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	f43f af7f 	beq.w	8006f34 <HAL_RCC_OscConfig+0xdd8>
 8007036:	e0dd      	b.n	80071f4 <HAL_RCC_OscConfig+0x1098>
 8007038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800703c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800704a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	fa93 f2a3 	rbit	r2, r3
 8007054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007058:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800705c:	601a      	str	r2, [r3, #0]
  return result;
 800705e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007062:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007066:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007068:	fab3 f383 	clz	r3, r3
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007072:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	461a      	mov	r2, r3
 800707a:	2300      	movs	r3, #0
 800707c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707e:	f7fc fc79 	bl	8003974 <HAL_GetTick>
 8007082:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007086:	e009      	b.n	800709c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007088:	f7fc fc74 	bl	8003974 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e0ac      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
 800709c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80070a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	fa93 f2a3 	rbit	r2, r3
 80070b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070bc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80070c0:	601a      	str	r2, [r3, #0]
  return result;
 80070c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80070ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070cc:	fab3 f383 	clz	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d102      	bne.n	80070e6 <HAL_RCC_OscConfig+0xf8a>
 80070e0:	4b47      	ldr	r3, [pc, #284]	; (8007200 <HAL_RCC_OscConfig+0x10a4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	e027      	b.n	8007136 <HAL_RCC_OscConfig+0xfda>
 80070e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070ea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80070ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070f8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	fa93 f2a3 	rbit	r2, r3
 8007102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007106:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007110:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800711e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	fa93 f2a3 	rbit	r2, r3
 8007128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800712c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	4b33      	ldr	r3, [pc, #204]	; (8007200 <HAL_RCC_OscConfig+0x10a4>)
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800713a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800713e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007142:	6011      	str	r1, [r2, #0]
 8007144:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007148:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	fa92 f1a2 	rbit	r1, r2
 8007152:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007156:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800715a:	6011      	str	r1, [r2, #0]
  return result;
 800715c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007160:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	fab2 f282 	clz	r2, r2
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	f042 0220 	orr.w	r2, r2, #32
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	f002 021f 	and.w	r2, r2, #31
 8007176:	2101      	movs	r1, #1
 8007178:	fa01 f202 	lsl.w	r2, r1, r2
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d182      	bne.n	8007088 <HAL_RCC_OscConfig+0xf2c>
 8007182:	e037      	b.n	80071f4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007188:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e02e      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_RCC_OscConfig+0x10a4>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <HAL_RCC_OscConfig+0x10a4>)
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80071a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80071ac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80071b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d117      	bne.n	80071f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80071c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80071c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80071c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d10b      	bne.n	80071f0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80071d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d001      	beq.n	80071f4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40021000 	.word	0x40021000

08007204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b09e      	sub	sp, #120	; 0x78
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e162      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800721c:	4b90      	ldr	r3, [pc, #576]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d910      	bls.n	800724c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800722a:	4b8d      	ldr	r3, [pc, #564]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f023 0207 	bic.w	r2, r3, #7
 8007232:	498b      	ldr	r1, [pc, #556]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	4313      	orrs	r3, r2
 8007238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	4b89      	ldr	r3, [pc, #548]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d001      	beq.n	800724c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e14a      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d008      	beq.n	800726a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007258:	4b82      	ldr	r3, [pc, #520]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	497f      	ldr	r1, [pc, #508]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 8007266:	4313      	orrs	r3, r2
 8007268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80dc 	beq.w	8007430 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d13c      	bne.n	80072fa <HAL_RCC_ClockConfig+0xf6>
 8007280:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007284:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007288:	fa93 f3a3 	rbit	r3, r3
 800728c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800728e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007290:	fab3 f383 	clz	r3, r3
 8007294:	b2db      	uxtb	r3, r3
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	b2db      	uxtb	r3, r3
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d102      	bne.n	80072aa <HAL_RCC_ClockConfig+0xa6>
 80072a4:	4b6f      	ldr	r3, [pc, #444]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	e00f      	b.n	80072ca <HAL_RCC_ClockConfig+0xc6>
 80072aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b2:	fa93 f3a3 	rbit	r3, r3
 80072b6:	667b      	str	r3, [r7, #100]	; 0x64
 80072b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072bc:	663b      	str	r3, [r7, #96]	; 0x60
 80072be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072c0:	fa93 f3a3 	rbit	r3, r3
 80072c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c6:	4b67      	ldr	r3, [pc, #412]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80072d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072d2:	fa92 f2a2 	rbit	r2, r2
 80072d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80072d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072da:	fab2 f282 	clz	r2, r2
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	f042 0220 	orr.w	r2, r2, #32
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	f002 021f 	and.w	r2, r2, #31
 80072ea:	2101      	movs	r1, #1
 80072ec:	fa01 f202 	lsl.w	r2, r1, r2
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d17b      	bne.n	80073ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e0f3      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d13c      	bne.n	800737c <HAL_RCC_ClockConfig+0x178>
 8007302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007306:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800730a:	fa93 f3a3 	rbit	r3, r3
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007312:	fab3 f383 	clz	r3, r3
 8007316:	b2db      	uxtb	r3, r3
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	b2db      	uxtb	r3, r3
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d102      	bne.n	800732c <HAL_RCC_ClockConfig+0x128>
 8007326:	4b4f      	ldr	r3, [pc, #316]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	e00f      	b.n	800734c <HAL_RCC_ClockConfig+0x148>
 800732c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007334:	fa93 f3a3 	rbit	r3, r3
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
 800733a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800733e:	643b      	str	r3, [r7, #64]	; 0x40
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007342:	fa93 f3a3 	rbit	r3, r3
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007348:	4b46      	ldr	r3, [pc, #280]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007350:	63ba      	str	r2, [r7, #56]	; 0x38
 8007352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007354:	fa92 f2a2 	rbit	r2, r2
 8007358:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800735a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800735c:	fab2 f282 	clz	r2, r2
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	f042 0220 	orr.w	r2, r2, #32
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	f002 021f 	and.w	r2, r2, #31
 800736c:	2101      	movs	r1, #1
 800736e:	fa01 f202 	lsl.w	r2, r1, r2
 8007372:	4013      	ands	r3, r2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d13a      	bne.n	80073ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0b2      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
 800737c:	2302      	movs	r3, #2
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	fa93 f3a3 	rbit	r3, r3
 8007386:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738a:	fab3 f383 	clz	r3, r3
 800738e:	b2db      	uxtb	r3, r3
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b01      	cmp	r3, #1
 800739c:	d102      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x1a0>
 800739e:	4b31      	ldr	r3, [pc, #196]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	e00d      	b.n	80073c0 <HAL_RCC_ClockConfig+0x1bc>
 80073a4:	2302      	movs	r3, #2
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
 80073b0:	2302      	movs	r3, #2
 80073b2:	623b      	str	r3, [r7, #32]
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	fa93 f3a3 	rbit	r3, r3
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	4b29      	ldr	r3, [pc, #164]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2202      	movs	r2, #2
 80073c2:	61ba      	str	r2, [r7, #24]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	fa92 f2a2 	rbit	r2, r2
 80073ca:	617a      	str	r2, [r7, #20]
  return result;
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	fab2 f282 	clz	r2, r2
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	f042 0220 	orr.w	r2, r2, #32
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	f002 021f 	and.w	r2, r2, #31
 80073de:	2101      	movs	r1, #1
 80073e0:	fa01 f202 	lsl.w	r2, r1, r2
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e079      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ee:	4b1d      	ldr	r3, [pc, #116]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f023 0203 	bic.w	r2, r3, #3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	491a      	ldr	r1, [pc, #104]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007400:	f7fc fab8 	bl	8003974 <HAL_GetTick>
 8007404:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007406:	e00a      	b.n	800741e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007408:	f7fc fab4 	bl	8003974 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	f241 3288 	movw	r2, #5000	; 0x1388
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e061      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741e:	4b11      	ldr	r3, [pc, #68]	; (8007464 <HAL_RCC_ClockConfig+0x260>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f003 020c 	and.w	r2, r3, #12
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	429a      	cmp	r2, r3
 800742e:	d1eb      	bne.n	8007408 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d214      	bcs.n	8007468 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743e:	4b08      	ldr	r3, [pc, #32]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 0207 	bic.w	r2, r3, #7
 8007446:	4906      	ldr	r1, [pc, #24]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800744e:	4b04      	ldr	r3, [pc, #16]	; (8007460 <HAL_RCC_ClockConfig+0x25c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d005      	beq.n	8007468 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e040      	b.n	80074e2 <HAL_RCC_ClockConfig+0x2de>
 8007460:	40022000 	.word	0x40022000
 8007464:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007474:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <HAL_RCC_ClockConfig+0x2e8>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	491a      	ldr	r1, [pc, #104]	; (80074ec <HAL_RCC_ClockConfig+0x2e8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0308 	and.w	r3, r3, #8
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <HAL_RCC_ClockConfig+0x2e8>)
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4912      	ldr	r1, [pc, #72]	; (80074ec <HAL_RCC_ClockConfig+0x2e8>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80074a6:	f000 f829 	bl	80074fc <HAL_RCC_GetSysClockFreq>
 80074aa:	4601      	mov	r1, r0
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <HAL_RCC_ClockConfig+0x2e8>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074b4:	22f0      	movs	r2, #240	; 0xf0
 80074b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	fa92 f2a2 	rbit	r2, r2
 80074be:	60fa      	str	r2, [r7, #12]
  return result;
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	fab2 f282 	clz	r2, r2
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	40d3      	lsrs	r3, r2
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <HAL_RCC_ClockConfig+0x2ec>)
 80074cc:	5cd3      	ldrb	r3, [r2, r3]
 80074ce:	fa21 f303 	lsr.w	r3, r1, r3
 80074d2:	4a08      	ldr	r2, [pc, #32]	; (80074f4 <HAL_RCC_ClockConfig+0x2f0>)
 80074d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80074d6:	4b08      	ldr	r3, [pc, #32]	; (80074f8 <HAL_RCC_ClockConfig+0x2f4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fc fa06 	bl	80038ec <HAL_InitTick>
  
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3778      	adds	r7, #120	; 0x78
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40021000 	.word	0x40021000
 80074f0:	0800b058 	.word	0x0800b058
 80074f4:	20000120 	.word	0x20000120
 80074f8:	20000124 	.word	0x20000124

080074fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b08b      	sub	sp, #44	; 0x2c
 8007500:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	61fb      	str	r3, [r7, #28]
 8007506:	2300      	movs	r3, #0
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	2300      	movs	r3, #0
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007516:	4b2a      	ldr	r3, [pc, #168]	; (80075c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	f003 030c 	and.w	r3, r3, #12
 8007522:	2b04      	cmp	r3, #4
 8007524:	d002      	beq.n	800752c <HAL_RCC_GetSysClockFreq+0x30>
 8007526:	2b08      	cmp	r3, #8
 8007528:	d003      	beq.n	8007532 <HAL_RCC_GetSysClockFreq+0x36>
 800752a:	e03f      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800752e:	623b      	str	r3, [r7, #32]
      break;
 8007530:	e03f      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007538:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800753c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	fa92 f2a2 	rbit	r2, r2
 8007544:	607a      	str	r2, [r7, #4]
  return result;
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	fab2 f282 	clz	r2, r2
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	40d3      	lsrs	r3, r2
 8007550:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007552:	5cd3      	ldrb	r3, [r2, r3]
 8007554:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	220f      	movs	r2, #15
 8007560:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	fa92 f2a2 	rbit	r2, r2
 8007568:	60fa      	str	r2, [r7, #12]
  return result;
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	fab2 f282 	clz	r2, r2
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	40d3      	lsrs	r3, r2
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007576:	5cd3      	ldrb	r3, [r2, r3]
 8007578:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007584:	4a0f      	ldr	r2, [pc, #60]	; (80075c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	fbb2 f2f3 	udiv	r2, r2, r3
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	fb02 f303 	mul.w	r3, r2, r3
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
 8007594:	e007      	b.n	80075a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007596:	4a0b      	ldr	r2, [pc, #44]	; (80075c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	fbb2 f2f3 	udiv	r2, r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	623b      	str	r3, [r7, #32]
      break;
 80075aa:	e002      	b.n	80075b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80075ae:	623b      	str	r3, [r7, #32]
      break;
 80075b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075b2:	6a3b      	ldr	r3, [r7, #32]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	372c      	adds	r7, #44	; 0x2c
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40021000 	.word	0x40021000
 80075c4:	007a1200 	.word	0x007a1200
 80075c8:	0800b070 	.word	0x0800b070
 80075cc:	0800b080 	.word	0x0800b080

080075d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075d4:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075d6:	681b      	ldr	r3, [r3, #0]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20000120 	.word	0x20000120

080075e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80075ee:	f7ff ffef 	bl	80075d0 <HAL_RCC_GetHCLKFreq>
 80075f2:	4601      	mov	r1, r0
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007600:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	fa92 f2a2 	rbit	r2, r2
 8007608:	603a      	str	r2, [r7, #0]
  return result;
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	fab2 f282 	clz	r2, r2
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	40d3      	lsrs	r3, r2
 8007614:	4a04      	ldr	r2, [pc, #16]	; (8007628 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007616:	5cd3      	ldrb	r3, [r2, r3]
 8007618:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40021000 	.word	0x40021000
 8007628:	0800b068 	.word	0x0800b068

0800762c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007632:	f7ff ffcd 	bl	80075d0 <HAL_RCC_GetHCLKFreq>
 8007636:	4601      	mov	r1, r0
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007640:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007644:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	fa92 f2a2 	rbit	r2, r2
 800764c:	603a      	str	r2, [r7, #0]
  return result;
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	fab2 f282 	clz	r2, r2
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	40d3      	lsrs	r3, r2
 8007658:	4a04      	ldr	r2, [pc, #16]	; (800766c <HAL_RCC_GetPCLK2Freq+0x40>)
 800765a:	5cd3      	ldrb	r3, [r2, r3]
 800765c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000
 800766c:	0800b068 	.word	0x0800b068

08007670 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b092      	sub	sp, #72	; 0x48
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007680:	2300      	movs	r3, #0
 8007682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80d4 	beq.w	800783c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007694:	4b4e      	ldr	r3, [pc, #312]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10e      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076a0:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	4a4a      	ldr	r2, [pc, #296]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076aa:	61d3      	str	r3, [r2, #28]
 80076ac:	4b48      	ldr	r3, [pc, #288]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076be:	4b45      	ldr	r3, [pc, #276]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d118      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076ca:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a41      	ldr	r2, [pc, #260]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076d6:	f7fc f94d 	bl	8003974 <HAL_GetTick>
 80076da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076dc:	e008      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076de:	f7fc f949 	bl	8003974 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b64      	cmp	r3, #100	; 0x64
 80076ea:	d901      	bls.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e1d6      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f0:	4b38      	ldr	r3, [pc, #224]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076fc:	4b34      	ldr	r3, [pc, #208]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8084 	beq.w	8007816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007718:	429a      	cmp	r2, r3
 800771a:	d07c      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800771c:	4b2c      	ldr	r3, [pc, #176]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800772a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	fa93 f3a3 	rbit	r3, r3
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007736:	fab3 f383 	clz	r3, r3
 800773a:	b2db      	uxtb	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	4b26      	ldr	r3, [pc, #152]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	461a      	mov	r2, r3
 8007746:	2301      	movs	r3, #1
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800774e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	fa93 f3a3 	rbit	r3, r3
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800775a:	fab3 f383 	clz	r3, r3
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	4b1d      	ldr	r3, [pc, #116]	; (80077d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	461a      	mov	r2, r3
 800776a:	2300      	movs	r3, #0
 800776c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800776e:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007772:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d04b      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777e:	f7fc f8f9 	bl	8003974 <HAL_GetTick>
 8007782:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007784:	e00a      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007786:	f7fc f8f5 	bl	8003974 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	f241 3288 	movw	r2, #5000	; 0x1388
 8007794:	4293      	cmp	r3, r2
 8007796:	d901      	bls.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e180      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800779c:	2302      	movs	r3, #2
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	fa93 f3a3 	rbit	r3, r3
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
 80077a8:	2302      	movs	r3, #2
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	fa93 f3a3 	rbit	r3, r3
 80077b2:	61fb      	str	r3, [r7, #28]
  return result;
 80077b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b6:	fab3 f383 	clz	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f043 0302 	orr.w	r3, r3, #2
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d108      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80077ca:	4b01      	ldr	r3, [pc, #4]	; (80077d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	e00d      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80077d0:	40021000 	.word	0x40021000
 80077d4:	40007000 	.word	0x40007000
 80077d8:	10908100 	.word	0x10908100
 80077dc:	2302      	movs	r3, #2
 80077de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	fa93 f3a3 	rbit	r3, r3
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	4b9a      	ldr	r3, [pc, #616]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2202      	movs	r2, #2
 80077ee:	613a      	str	r2, [r7, #16]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	fa92 f2a2 	rbit	r2, r2
 80077f6:	60fa      	str	r2, [r7, #12]
  return result;
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	fab2 f282 	clz	r2, r2
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	f002 021f 	and.w	r2, r2, #31
 800780a:	2101      	movs	r1, #1
 800780c:	fa01 f202 	lsl.w	r2, r1, r2
 8007810:	4013      	ands	r3, r2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0b7      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007816:	4b8f      	ldr	r3, [pc, #572]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	498c      	ldr	r1, [pc, #560]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007824:	4313      	orrs	r3, r2
 8007826:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800782c:	2b01      	cmp	r3, #1
 800782e:	d105      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007830:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	4a87      	ldr	r2, [pc, #540]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007848:	4b82      	ldr	r3, [pc, #520]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	f023 0203 	bic.w	r2, r3, #3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	497f      	ldr	r1, [pc, #508]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007856:	4313      	orrs	r3, r2
 8007858:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007866:	4b7b      	ldr	r3, [pc, #492]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	4978      	ldr	r1, [pc, #480]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007874:	4313      	orrs	r3, r2
 8007876:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007884:	4b73      	ldr	r3, [pc, #460]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4970      	ldr	r1, [pc, #448]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007892:	4313      	orrs	r3, r2
 8007894:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078a2:	4b6c      	ldr	r3, [pc, #432]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f023 0210 	bic.w	r2, r3, #16
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	4969      	ldr	r1, [pc, #420]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80078c0:	4b64      	ldr	r3, [pc, #400]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	4961      	ldr	r1, [pc, #388]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078de:	4b5d      	ldr	r3, [pc, #372]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	f023 0220 	bic.w	r2, r3, #32
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	495a      	ldr	r1, [pc, #360]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d008      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078fc:	4b55      	ldr	r3, [pc, #340]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	4952      	ldr	r1, [pc, #328]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800790a:	4313      	orrs	r3, r2
 800790c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800791a:	4b4e      	ldr	r3, [pc, #312]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	494b      	ldr	r1, [pc, #300]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007928:	4313      	orrs	r3, r2
 800792a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007938:	4b46      	ldr	r3, [pc, #280]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	4943      	ldr	r1, [pc, #268]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007946:	4313      	orrs	r3, r2
 8007948:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007956:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	493c      	ldr	r1, [pc, #240]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007964:	4313      	orrs	r3, r2
 8007966:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007974:	4b37      	ldr	r3, [pc, #220]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	4934      	ldr	r1, [pc, #208]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007982:	4313      	orrs	r3, r2
 8007984:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800798e:	2b00      	cmp	r3, #0
 8007990:	d008      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007992:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	492d      	ldr	r1, [pc, #180]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079bc:	4925      	ldr	r1, [pc, #148]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80079ce:	4b21      	ldr	r3, [pc, #132]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	491e      	ldr	r1, [pc, #120]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80079ec:	4b19      	ldr	r3, [pc, #100]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	4916      	ldr	r1, [pc, #88]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a16:	490f      	ldr	r1, [pc, #60]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d008      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	4907      	ldr	r1, [pc, #28]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00c      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007a46:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	e002      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007a52:	bf00      	nop
 8007a54:	40021000 	.word	0x40021000
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	4913      	ldr	r1, [pc, #76]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a78:	490b      	ldr	r1, [pc, #44]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a96:	4904      	ldr	r1, [pc, #16]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3748      	adds	r7, #72	; 0x48
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40021000 	.word	0x40021000

08007aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e049      	b.n	8007b52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fb fcce 	bl	8003474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f000 fd30 	bl	8008550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d001      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e04f      	b.n	8007c14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a23      	ldr	r2, [pc, #140]	; (8007c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01d      	beq.n	8007bd2 <HAL_TIM_Base_Start_IT+0x76>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9e:	d018      	beq.n	8007bd2 <HAL_TIM_Base_Start_IT+0x76>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1f      	ldr	r2, [pc, #124]	; (8007c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <HAL_TIM_Base_Start_IT+0x76>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_TIM_Base_Start_IT+0x76>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d009      	beq.n	8007bd2 <HAL_TIM_Base_Start_IT+0x76>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d004      	beq.n	8007bd2 <HAL_TIM_Base_Start_IT+0x76>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a19      	ldr	r2, [pc, #100]	; (8007c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d115      	bne.n	8007bfe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bda:	4013      	ands	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b06      	cmp	r3, #6
 8007be2:	d015      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0xb4>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bea:	d011      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfc:	e008      	b.n	8007c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0201 	orr.w	r2, r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e000      	b.n	8007c12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40000400 	.word	0x40000400
 8007c28:	40000800 	.word	0x40000800
 8007c2c:	40013400 	.word	0x40013400
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40015000 	.word	0x40015000
 8007c38:	00010007 	.word	0x00010007

08007c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e049      	b.n	8007ce2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fb fc98 	bl	8003598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 fc68 	bl	8008550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
	...

08007cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d109      	bne.n	8007d10 <HAL_TIM_PWM_Start+0x24>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	e03c      	b.n	8007d8a <HAL_TIM_PWM_Start+0x9e>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d109      	bne.n	8007d2a <HAL_TIM_PWM_Start+0x3e>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	bf14      	ite	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	2300      	moveq	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	e02f      	b.n	8007d8a <HAL_TIM_PWM_Start+0x9e>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d109      	bne.n	8007d44 <HAL_TIM_PWM_Start+0x58>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	e022      	b.n	8007d8a <HAL_TIM_PWM_Start+0x9e>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b0c      	cmp	r3, #12
 8007d48:	d109      	bne.n	8007d5e <HAL_TIM_PWM_Start+0x72>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	bf14      	ite	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	2300      	moveq	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	e015      	b.n	8007d8a <HAL_TIM_PWM_Start+0x9e>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d109      	bne.n	8007d78 <HAL_TIM_PWM_Start+0x8c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e008      	b.n	8007d8a <HAL_TIM_PWM_Start+0x9e>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e0a1      	b.n	8007ed6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_PWM_Start+0xb6>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da0:	e023      	b.n	8007dea <HAL_TIM_PWM_Start+0xfe>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_PWM_Start+0xc6>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007db0:	e01b      	b.n	8007dea <HAL_TIM_PWM_Start+0xfe>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Start+0xd6>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dc0:	e013      	b.n	8007dea <HAL_TIM_PWM_Start+0xfe>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	d104      	bne.n	8007dd2 <HAL_TIM_PWM_Start+0xe6>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dd0:	e00b      	b.n	8007dea <HAL_TIM_PWM_Start+0xfe>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b10      	cmp	r3, #16
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_PWM_Start+0xf6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007de0:	e003      	b.n	8007dea <HAL_TIM_PWM_Start+0xfe>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2201      	movs	r2, #1
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 ffea 	bl	8008dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a38      	ldr	r2, [pc, #224]	; (8007ee0 <HAL_TIM_PWM_Start+0x1f4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d018      	beq.n	8007e34 <HAL_TIM_PWM_Start+0x148>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a37      	ldr	r2, [pc, #220]	; (8007ee4 <HAL_TIM_PWM_Start+0x1f8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d013      	beq.n	8007e34 <HAL_TIM_PWM_Start+0x148>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a35      	ldr	r2, [pc, #212]	; (8007ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00e      	beq.n	8007e34 <HAL_TIM_PWM_Start+0x148>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a34      	ldr	r2, [pc, #208]	; (8007eec <HAL_TIM_PWM_Start+0x200>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d009      	beq.n	8007e34 <HAL_TIM_PWM_Start+0x148>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a32      	ldr	r2, [pc, #200]	; (8007ef0 <HAL_TIM_PWM_Start+0x204>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_TIM_PWM_Start+0x148>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a31      	ldr	r2, [pc, #196]	; (8007ef4 <HAL_TIM_PWM_Start+0x208>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d101      	bne.n	8007e38 <HAL_TIM_PWM_Start+0x14c>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <HAL_TIM_PWM_Start+0x14e>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <HAL_TIM_PWM_Start+0x1f4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d01d      	beq.n	8007e94 <HAL_TIM_PWM_Start+0x1a8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e60:	d018      	beq.n	8007e94 <HAL_TIM_PWM_Start+0x1a8>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a24      	ldr	r2, [pc, #144]	; (8007ef8 <HAL_TIM_PWM_Start+0x20c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d013      	beq.n	8007e94 <HAL_TIM_PWM_Start+0x1a8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a22      	ldr	r2, [pc, #136]	; (8007efc <HAL_TIM_PWM_Start+0x210>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00e      	beq.n	8007e94 <HAL_TIM_PWM_Start+0x1a8>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <HAL_TIM_PWM_Start+0x1f8>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d009      	beq.n	8007e94 <HAL_TIM_PWM_Start+0x1a8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a18      	ldr	r2, [pc, #96]	; (8007ee8 <HAL_TIM_PWM_Start+0x1fc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d004      	beq.n	8007e94 <HAL_TIM_PWM_Start+0x1a8>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_TIM_PWM_Start+0x208>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d115      	bne.n	8007ec0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <HAL_TIM_PWM_Start+0x214>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b06      	cmp	r3, #6
 8007ea4:	d015      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x1e6>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eac:	d011      	beq.n	8007ed2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0201 	orr.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ebe:	e008      	b.n	8007ed2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0201 	orr.w	r2, r2, #1
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	e000      	b.n	8007ed4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40013400 	.word	0x40013400
 8007ee8:	40014000 	.word	0x40014000
 8007eec:	40014400 	.word	0x40014400
 8007ef0:	40014800 	.word	0x40014800
 8007ef4:	40015000 	.word	0x40015000
 8007ef8:	40000400 	.word	0x40000400
 8007efc:	40000800 	.word	0x40000800
 8007f00:	00010007 	.word	0x00010007

08007f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d122      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d11b      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0202 	mvn.w	r2, #2
 8007f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fae3 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8007f4c:	e005      	b.n	8007f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fad5 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fae6 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d122      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d11b      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0204 	mvn.w	r2, #4
 8007f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fab9 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 faab 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fabc 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0208 	mvn.w	r2, #8
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa8f 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa81 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 fa92 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b10      	cmp	r3, #16
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b10      	cmp	r3, #16
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0210 	mvn.w	r2, #16
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2208      	movs	r2, #8
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fa65 	bl	8008512 <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa57 	bl	80084fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa68 	bl	8008526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b01      	cmp	r3, #1
 8008068:	d10e      	bne.n	8008088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b01      	cmp	r3, #1
 8008076:	d107      	bne.n	8008088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0201 	mvn.w	r2, #1
 8008080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7f9 fb62 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d10e      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d107      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 ffce 	bl	8009050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c2:	d10e      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ce:	2b80      	cmp	r3, #128	; 0x80
 80080d0:	d107      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 ffc1 	bl	8009064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b40      	cmp	r3, #64	; 0x40
 80080ee:	d10e      	bne.n	800810e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d107      	bne.n	800810e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fa16 	bl	800853a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b20      	cmp	r3, #32
 800811a:	d10e      	bne.n	800813a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b20      	cmp	r3, #32
 8008128:	d107      	bne.n	800813a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f06f 0220 	mvn.w	r2, #32
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 ff81 	bl	800903c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800815a:	2b01      	cmp	r3, #1
 800815c:	d101      	bne.n	8008162 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800815e:	2302      	movs	r3, #2
 8008160:	e0ff      	b.n	8008362 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b14      	cmp	r3, #20
 800816e:	f200 80f0 	bhi.w	8008352 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	080081cd 	.word	0x080081cd
 800817c:	08008353 	.word	0x08008353
 8008180:	08008353 	.word	0x08008353
 8008184:	08008353 	.word	0x08008353
 8008188:	0800820d 	.word	0x0800820d
 800818c:	08008353 	.word	0x08008353
 8008190:	08008353 	.word	0x08008353
 8008194:	08008353 	.word	0x08008353
 8008198:	0800824f 	.word	0x0800824f
 800819c:	08008353 	.word	0x08008353
 80081a0:	08008353 	.word	0x08008353
 80081a4:	08008353 	.word	0x08008353
 80081a8:	0800828f 	.word	0x0800828f
 80081ac:	08008353 	.word	0x08008353
 80081b0:	08008353 	.word	0x08008353
 80081b4:	08008353 	.word	0x08008353
 80081b8:	080082d1 	.word	0x080082d1
 80081bc:	08008353 	.word	0x08008353
 80081c0:	08008353 	.word	0x08008353
 80081c4:	08008353 	.word	0x08008353
 80081c8:	08008311 	.word	0x08008311
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fa5a 	bl	800868c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f042 0208 	orr.w	r2, r2, #8
 80081e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0204 	bic.w	r2, r2, #4
 80081f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	619a      	str	r2, [r3, #24]
      break;
 800820a:	e0a5      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fad4 	bl	80087c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6999      	ldr	r1, [r3, #24]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	021a      	lsls	r2, r3, #8
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	619a      	str	r2, [r3, #24]
      break;
 800824c:	e084      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fb47 	bl	80088e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0208 	orr.w	r2, r2, #8
 8008268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0204 	bic.w	r2, r2, #4
 8008278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	61da      	str	r2, [r3, #28]
      break;
 800828c:	e064      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fbb9 	bl	8008a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69d9      	ldr	r1, [r3, #28]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	021a      	lsls	r2, r3, #8
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	61da      	str	r2, [r3, #28]
      break;
 80082ce:	e043      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fc08 	bl	8008aec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0208 	orr.w	r2, r2, #8
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0204 	bic.w	r2, r2, #4
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800830e:	e023      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fc52 	bl	8008bc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800832a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	021a      	lsls	r2, r3, #8
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008350:	e002      	b.n	8008358 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
      break;
 8008356:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008360:	7dfb      	ldrb	r3, [r7, #23]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop

0800836c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008380:	2b01      	cmp	r3, #1
 8008382:	d101      	bne.n	8008388 <HAL_TIM_ConfigClockSource+0x1c>
 8008384:	2302      	movs	r3, #2
 8008386:	e0b6      	b.n	80084f6 <HAL_TIM_ConfigClockSource+0x18a>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c4:	d03e      	beq.n	8008444 <HAL_TIM_ConfigClockSource+0xd8>
 80083c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ca:	f200 8087 	bhi.w	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d2:	f000 8086 	beq.w	80084e2 <HAL_TIM_ConfigClockSource+0x176>
 80083d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083da:	d87f      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083dc:	2b70      	cmp	r3, #112	; 0x70
 80083de:	d01a      	beq.n	8008416 <HAL_TIM_ConfigClockSource+0xaa>
 80083e0:	2b70      	cmp	r3, #112	; 0x70
 80083e2:	d87b      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083e4:	2b60      	cmp	r3, #96	; 0x60
 80083e6:	d050      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x11e>
 80083e8:	2b60      	cmp	r3, #96	; 0x60
 80083ea:	d877      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083ec:	2b50      	cmp	r3, #80	; 0x50
 80083ee:	d03c      	beq.n	800846a <HAL_TIM_ConfigClockSource+0xfe>
 80083f0:	2b50      	cmp	r3, #80	; 0x50
 80083f2:	d873      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083f4:	2b40      	cmp	r3, #64	; 0x40
 80083f6:	d058      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x13e>
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d86f      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 80083fc:	2b30      	cmp	r3, #48	; 0x30
 80083fe:	d064      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	d86b      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 8008404:	2b20      	cmp	r3, #32
 8008406:	d060      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008408:	2b20      	cmp	r3, #32
 800840a:	d867      	bhi.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d05c      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008410:	2b10      	cmp	r3, #16
 8008412:	d05a      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x15e>
 8008414:	e062      	b.n	80084dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	6899      	ldr	r1, [r3, #8]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f000 fcb1 	bl	8008d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	609a      	str	r2, [r3, #8]
      break;
 8008442:	e04f      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6899      	ldr	r1, [r3, #8]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	f000 fc9a 	bl	8008d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008466:	609a      	str	r2, [r3, #8]
      break;
 8008468:	e03c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	461a      	mov	r2, r3
 8008478:	f000 fc0e 	bl	8008c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2150      	movs	r1, #80	; 0x50
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fc67 	bl	8008d56 <TIM_ITRx_SetConfig>
      break;
 8008488:	e02c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6859      	ldr	r1, [r3, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	461a      	mov	r2, r3
 8008498:	f000 fc2d 	bl	8008cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2160      	movs	r1, #96	; 0x60
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fc57 	bl	8008d56 <TIM_ITRx_SetConfig>
      break;
 80084a8:	e01c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6859      	ldr	r1, [r3, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	461a      	mov	r2, r3
 80084b8:	f000 fbee 	bl	8008c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2140      	movs	r1, #64	; 0x40
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fc47 	bl	8008d56 <TIM_ITRx_SetConfig>
      break;
 80084c8:	e00c      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f000 fc3e 	bl	8008d56 <TIM_ITRx_SetConfig>
      break;
 80084da:	e003      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
      break;
 80084e0:	e000      	b.n	80084e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80084e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008542:	bf00      	nop
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a42      	ldr	r2, [pc, #264]	; (800866c <TIM_Base_SetConfig+0x11c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d013      	beq.n	8008590 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856e:	d00f      	beq.n	8008590 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a3f      	ldr	r2, [pc, #252]	; (8008670 <TIM_Base_SetConfig+0x120>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00b      	beq.n	8008590 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a3e      	ldr	r2, [pc, #248]	; (8008674 <TIM_Base_SetConfig+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d007      	beq.n	8008590 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a3d      	ldr	r2, [pc, #244]	; (8008678 <TIM_Base_SetConfig+0x128>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d003      	beq.n	8008590 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a3c      	ldr	r2, [pc, #240]	; (800867c <TIM_Base_SetConfig+0x12c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d108      	bne.n	80085a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a31      	ldr	r2, [pc, #196]	; (800866c <TIM_Base_SetConfig+0x11c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d01f      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b0:	d01b      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a2e      	ldr	r2, [pc, #184]	; (8008670 <TIM_Base_SetConfig+0x120>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d017      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a2d      	ldr	r2, [pc, #180]	; (8008674 <TIM_Base_SetConfig+0x124>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a2c      	ldr	r2, [pc, #176]	; (8008678 <TIM_Base_SetConfig+0x128>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00f      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a2c      	ldr	r2, [pc, #176]	; (8008680 <TIM_Base_SetConfig+0x130>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00b      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a2b      	ldr	r2, [pc, #172]	; (8008684 <TIM_Base_SetConfig+0x134>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d007      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2a      	ldr	r2, [pc, #168]	; (8008688 <TIM_Base_SetConfig+0x138>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <TIM_Base_SetConfig+0x9a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a25      	ldr	r2, [pc, #148]	; (800867c <TIM_Base_SetConfig+0x12c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d108      	bne.n	80085fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a12      	ldr	r2, [pc, #72]	; (800866c <TIM_Base_SetConfig+0x11c>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d013      	beq.n	8008650 <TIM_Base_SetConfig+0x100>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a13      	ldr	r2, [pc, #76]	; (8008678 <TIM_Base_SetConfig+0x128>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00f      	beq.n	8008650 <TIM_Base_SetConfig+0x100>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a13      	ldr	r2, [pc, #76]	; (8008680 <TIM_Base_SetConfig+0x130>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00b      	beq.n	8008650 <TIM_Base_SetConfig+0x100>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a12      	ldr	r2, [pc, #72]	; (8008684 <TIM_Base_SetConfig+0x134>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d007      	beq.n	8008650 <TIM_Base_SetConfig+0x100>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a11      	ldr	r2, [pc, #68]	; (8008688 <TIM_Base_SetConfig+0x138>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d003      	beq.n	8008650 <TIM_Base_SetConfig+0x100>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a0c      	ldr	r2, [pc, #48]	; (800867c <TIM_Base_SetConfig+0x12c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d103      	bne.n	8008658 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	615a      	str	r2, [r3, #20]
}
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	40012c00 	.word	0x40012c00
 8008670:	40000400 	.word	0x40000400
 8008674:	40000800 	.word	0x40000800
 8008678:	40013400 	.word	0x40013400
 800867c:	40015000 	.word	0x40015000
 8008680:	40014000 	.word	0x40014000
 8008684:	40014400 	.word	0x40014400
 8008688:	40014800 	.word	0x40014800

0800868c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	f023 0201 	bic.w	r2, r3, #1
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f023 0302 	bic.w	r3, r3, #2
 80086d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a30      	ldr	r2, [pc, #192]	; (80087a8 <TIM_OC1_SetConfig+0x11c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <TIM_OC1_SetConfig+0x88>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <TIM_OC1_SetConfig+0x120>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00f      	beq.n	8008714 <TIM_OC1_SetConfig+0x88>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a2e      	ldr	r2, [pc, #184]	; (80087b0 <TIM_OC1_SetConfig+0x124>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_OC1_SetConfig+0x88>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a2d      	ldr	r2, [pc, #180]	; (80087b4 <TIM_OC1_SetConfig+0x128>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_OC1_SetConfig+0x88>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a2c      	ldr	r2, [pc, #176]	; (80087b8 <TIM_OC1_SetConfig+0x12c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_OC1_SetConfig+0x88>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a2b      	ldr	r2, [pc, #172]	; (80087bc <TIM_OC1_SetConfig+0x130>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10c      	bne.n	800872e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0308 	bic.w	r3, r3, #8
 800871a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0304 	bic.w	r3, r3, #4
 800872c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1d      	ldr	r2, [pc, #116]	; (80087a8 <TIM_OC1_SetConfig+0x11c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <TIM_OC1_SetConfig+0xd2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a1c      	ldr	r2, [pc, #112]	; (80087ac <TIM_OC1_SetConfig+0x120>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00f      	beq.n	800875e <TIM_OC1_SetConfig+0xd2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <TIM_OC1_SetConfig+0x124>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_OC1_SetConfig+0xd2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <TIM_OC1_SetConfig+0x128>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_OC1_SetConfig+0xd2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a19      	ldr	r2, [pc, #100]	; (80087b8 <TIM_OC1_SetConfig+0x12c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_OC1_SetConfig+0xd2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a18      	ldr	r2, [pc, #96]	; (80087bc <TIM_OC1_SetConfig+0x130>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d111      	bne.n	8008782 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800876c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	4313      	orrs	r3, r2
 8008776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	621a      	str	r2, [r3, #32]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	40013400 	.word	0x40013400
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800
 80087bc:	40015000 	.word	0x40015000

080087c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f023 0210 	bic.w	r2, r3, #16
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f023 0320 	bic.w	r3, r3, #32
 800880e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	011b      	lsls	r3, r3, #4
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a2c      	ldr	r2, [pc, #176]	; (80088d0 <TIM_OC2_SetConfig+0x110>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d007      	beq.n	8008834 <TIM_OC2_SetConfig+0x74>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a2b      	ldr	r2, [pc, #172]	; (80088d4 <TIM_OC2_SetConfig+0x114>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC2_SetConfig+0x74>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a2a      	ldr	r2, [pc, #168]	; (80088d8 <TIM_OC2_SetConfig+0x118>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d10d      	bne.n	8008850 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800883a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <TIM_OC2_SetConfig+0x110>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d013      	beq.n	8008880 <TIM_OC2_SetConfig+0xc0>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a1e      	ldr	r2, [pc, #120]	; (80088d4 <TIM_OC2_SetConfig+0x114>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00f      	beq.n	8008880 <TIM_OC2_SetConfig+0xc0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <TIM_OC2_SetConfig+0x11c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00b      	beq.n	8008880 <TIM_OC2_SetConfig+0xc0>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <TIM_OC2_SetConfig+0x120>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d007      	beq.n	8008880 <TIM_OC2_SetConfig+0xc0>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <TIM_OC2_SetConfig+0x124>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_OC2_SetConfig+0xc0>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <TIM_OC2_SetConfig+0x118>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d113      	bne.n	80088a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008886:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800888e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	40013400 	.word	0x40013400
 80088d8:	40015000 	.word	0x40015000
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800

080088e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a2b      	ldr	r2, [pc, #172]	; (80089f4 <TIM_OC3_SetConfig+0x10c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d007      	beq.n	800895a <TIM_OC3_SetConfig+0x72>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a2a      	ldr	r2, [pc, #168]	; (80089f8 <TIM_OC3_SetConfig+0x110>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_OC3_SetConfig+0x72>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a29      	ldr	r2, [pc, #164]	; (80089fc <TIM_OC3_SetConfig+0x114>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d10d      	bne.n	8008976 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008974:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a1e      	ldr	r2, [pc, #120]	; (80089f4 <TIM_OC3_SetConfig+0x10c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <TIM_OC3_SetConfig+0xbe>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a1d      	ldr	r2, [pc, #116]	; (80089f8 <TIM_OC3_SetConfig+0x110>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00f      	beq.n	80089a6 <TIM_OC3_SetConfig+0xbe>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1d      	ldr	r2, [pc, #116]	; (8008a00 <TIM_OC3_SetConfig+0x118>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <TIM_OC3_SetConfig+0xbe>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a1c      	ldr	r2, [pc, #112]	; (8008a04 <TIM_OC3_SetConfig+0x11c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <TIM_OC3_SetConfig+0xbe>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a1b      	ldr	r2, [pc, #108]	; (8008a08 <TIM_OC3_SetConfig+0x120>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_OC3_SetConfig+0xbe>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a16      	ldr	r2, [pc, #88]	; (80089fc <TIM_OC3_SetConfig+0x114>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d113      	bne.n	80089ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	4313      	orrs	r3, r2
 80089c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	621a      	str	r2, [r3, #32]
}
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	40012c00 	.word	0x40012c00
 80089f8:	40013400 	.word	0x40013400
 80089fc:	40015000 	.word	0x40015000
 8008a00:	40014000 	.word	0x40014000
 8008a04:	40014400 	.word	0x40014400
 8008a08:	40014800 	.word	0x40014800

08008a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	031b      	lsls	r3, r3, #12
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a1a      	ldr	r2, [pc, #104]	; (8008ad4 <TIM_OC4_SetConfig+0xc8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d013      	beq.n	8008a98 <TIM_OC4_SetConfig+0x8c>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a19      	ldr	r2, [pc, #100]	; (8008ad8 <TIM_OC4_SetConfig+0xcc>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00f      	beq.n	8008a98 <TIM_OC4_SetConfig+0x8c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a18      	ldr	r2, [pc, #96]	; (8008adc <TIM_OC4_SetConfig+0xd0>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00b      	beq.n	8008a98 <TIM_OC4_SetConfig+0x8c>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a17      	ldr	r2, [pc, #92]	; (8008ae0 <TIM_OC4_SetConfig+0xd4>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d007      	beq.n	8008a98 <TIM_OC4_SetConfig+0x8c>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <TIM_OC4_SetConfig+0xd8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC4_SetConfig+0x8c>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a15      	ldr	r2, [pc, #84]	; (8008ae8 <TIM_OC4_SetConfig+0xdc>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d109      	bne.n	8008aac <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	019b      	lsls	r3, r3, #6
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	621a      	str	r2, [r3, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40013400 	.word	0x40013400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40014400 	.word	0x40014400
 8008ae4:	40014800 	.word	0x40014800
 8008ae8:	40015000 	.word	0x40015000

08008aec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a19      	ldr	r2, [pc, #100]	; (8008ba8 <TIM_OC5_SetConfig+0xbc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d013      	beq.n	8008b6e <TIM_OC5_SetConfig+0x82>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a18      	ldr	r2, [pc, #96]	; (8008bac <TIM_OC5_SetConfig+0xc0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00f      	beq.n	8008b6e <TIM_OC5_SetConfig+0x82>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a17      	ldr	r2, [pc, #92]	; (8008bb0 <TIM_OC5_SetConfig+0xc4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00b      	beq.n	8008b6e <TIM_OC5_SetConfig+0x82>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <TIM_OC5_SetConfig+0xc8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d007      	beq.n	8008b6e <TIM_OC5_SetConfig+0x82>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <TIM_OC5_SetConfig+0xcc>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d003      	beq.n	8008b6e <TIM_OC5_SetConfig+0x82>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <TIM_OC5_SetConfig+0xd0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d109      	bne.n	8008b82 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	621a      	str	r2, [r3, #32]
}
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40013400 	.word	0x40013400
 8008bb0:	40014000 	.word	0x40014000
 8008bb4:	40014400 	.word	0x40014400
 8008bb8:	40014800 	.word	0x40014800
 8008bbc:	40015000 	.word	0x40015000

08008bc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	021b      	lsls	r3, r3, #8
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	051b      	lsls	r3, r3, #20
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a1a      	ldr	r2, [pc, #104]	; (8008c80 <TIM_OC6_SetConfig+0xc0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d013      	beq.n	8008c44 <TIM_OC6_SetConfig+0x84>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a19      	ldr	r2, [pc, #100]	; (8008c84 <TIM_OC6_SetConfig+0xc4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00f      	beq.n	8008c44 <TIM_OC6_SetConfig+0x84>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <TIM_OC6_SetConfig+0xc8>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00b      	beq.n	8008c44 <TIM_OC6_SetConfig+0x84>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a17      	ldr	r2, [pc, #92]	; (8008c8c <TIM_OC6_SetConfig+0xcc>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d007      	beq.n	8008c44 <TIM_OC6_SetConfig+0x84>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a16      	ldr	r2, [pc, #88]	; (8008c90 <TIM_OC6_SetConfig+0xd0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d003      	beq.n	8008c44 <TIM_OC6_SetConfig+0x84>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <TIM_OC6_SetConfig+0xd4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d109      	bne.n	8008c58 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	029b      	lsls	r3, r3, #10
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	621a      	str	r2, [r3, #32]
}
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40013400 	.word	0x40013400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800
 8008c94:	40015000 	.word	0x40015000

08008c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f023 0201 	bic.w	r2, r3, #1
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f023 030a 	bic.w	r3, r3, #10
 8008cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b087      	sub	sp, #28
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	f023 0210 	bic.w	r2, r3, #16
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	031b      	lsls	r3, r3, #12
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	011b      	lsls	r3, r3, #4
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	621a      	str	r2, [r3, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f043 0307 	orr.w	r3, r3, #7
 8008d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	609a      	str	r2, [r3, #8]
}
 8008d80:	bf00      	nop
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	021a      	lsls	r2, r3, #8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	609a      	str	r2, [r3, #8]
}
 8008dc0:	bf00      	nop
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 031f 	and.w	r3, r3, #31
 8008dde:	2201      	movs	r2, #1
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a1a      	ldr	r2, [r3, #32]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	401a      	ands	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 031f 	and.w	r3, r3, #31
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	fa01 f303 	lsl.w	r3, r1, r3
 8008e04:	431a      	orrs	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
	...

08008e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d101      	bne.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e06d      	b.n	8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a30      	ldr	r2, [pc, #192]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d009      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a2f      	ldr	r2, [pc, #188]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d004      	beq.n	8008e6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a2d      	ldr	r2, [pc, #180]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d108      	bne.n	8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a1e      	ldr	r2, [pc, #120]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d01d      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eac:	d018      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a1c      	ldr	r2, [pc, #112]	; (8008f24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d013      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a1a      	ldr	r2, [pc, #104]	; (8008f28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d00e      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a15      	ldr	r2, [pc, #84]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d009      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a16      	ldr	r2, [pc, #88]	; (8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d004      	beq.n	8008ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a11      	ldr	r2, [pc, #68]	; (8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10c      	bne.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	40012c00 	.word	0x40012c00
 8008f1c:	40013400 	.word	0x40013400
 8008f20:	40015000 	.word	0x40015000
 8008f24:	40000400 	.word	0x40000400
 8008f28:	40000800 	.word	0x40000800
 8008f2c:	40014000 	.word	0x40014000

08008f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e06a      	b.n	8009022 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	695b      	ldr	r3, [r3, #20]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	041b      	lsls	r3, r3, #16
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a19      	ldr	r2, [pc, #100]	; (8009030 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d009      	beq.n	8008fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a17      	ldr	r2, [pc, #92]	; (8009034 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d004      	beq.n	8008fe4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a16      	ldr	r2, [pc, #88]	; (8009038 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d115      	bne.n	8009010 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	051b      	lsls	r3, r3, #20
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	40012c00 	.word	0x40012c00
 8009034:	40013400 	.word	0x40013400
 8009038:	40015000 	.word	0x40015000

0800903c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e040      	b.n	800910c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800908e:	2b00      	cmp	r3, #0
 8009090:	d106      	bne.n	80090a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7fa fb9c 	bl	80037d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2224      	movs	r2, #36	; 0x24
 80090a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fc0c 	bl	80098d4 <UART_SetConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d101      	bne.n	80090c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e022      	b.n	800910c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fdd6 	bl	8009c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fe5d 	bl	8009dc4 <UART_CheckIdleState>
 800910a:	4603      	mov	r3, r0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	4613      	mov	r3, r2
 8009122:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009128:	2b20      	cmp	r3, #32
 800912a:	f040 8082 	bne.w	8009232 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <HAL_UART_Transmit+0x26>
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e07a      	b.n	8009234 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_UART_Transmit+0x38>
 8009148:	2302      	movs	r3, #2
 800914a:	e073      	b.n	8009234 <HAL_UART_Transmit+0x120>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2221      	movs	r2, #33	; 0x21
 8009160:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009162:	f7fa fc07 	bl	8003974 <HAL_GetTick>
 8009166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	88fa      	ldrh	r2, [r7, #6]
 800916c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	88fa      	ldrh	r2, [r7, #6]
 8009174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009180:	d108      	bne.n	8009194 <HAL_UART_Transmit+0x80>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d104      	bne.n	8009194 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800918a:	2300      	movs	r3, #0
 800918c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	61bb      	str	r3, [r7, #24]
 8009192:	e003      	b.n	800919c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009198:	2300      	movs	r3, #0
 800919a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80091a4:	e02d      	b.n	8009202 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2180      	movs	r1, #128	; 0x80
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fe50 	bl	8009e56 <UART_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e039      	b.n	8009234 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	881a      	ldrh	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091d2:	b292      	uxth	r2, r2
 80091d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	3302      	adds	r3, #2
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	e008      	b.n	80091f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	781a      	ldrb	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	b292      	uxth	r2, r2
 80091e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3301      	adds	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1cb      	bne.n	80091a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	2140      	movs	r1, #64	; 0x40
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 fe1c 	bl	8009e56 <UART_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e005      	b.n	8009234 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2220      	movs	r2, #32
 800922c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	e000      	b.n	8009234 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009232:	2302      	movs	r3, #2
  }
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924e:	2b20      	cmp	r3, #32
 8009250:	d13d      	bne.n	80092ce <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <HAL_UART_Receive_IT+0x22>
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e036      	b.n	80092d0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <HAL_UART_Receive_IT+0x34>
 800926c:	2302      	movs	r3, #2
 800926e:	e02f      	b.n	80092d0 <HAL_UART_Receive_IT+0x94>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d018      	beq.n	80092be <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	613b      	str	r3, [r7, #16]
   return(result);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	623b      	str	r3, [r7, #32]
 80092ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	69f9      	ldr	r1, [r7, #28]
 80092b0:	6a3a      	ldr	r2, [r7, #32]
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e6      	bne.n	800928c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092be:	88fb      	ldrh	r3, [r7, #6]
 80092c0:	461a      	mov	r2, r3
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fe8b 	bl	8009fe0 <UART_Start_Receive_IT>
 80092ca:	4603      	mov	r3, r0
 80092cc:	e000      	b.n	80092d0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092ce:	2302      	movs	r3, #2
  }
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3728      	adds	r7, #40	; 0x28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b0ba      	sub	sp, #232	; 0xe8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009302:	f640 030f 	movw	r3, #2063	; 0x80f
 8009306:	4013      	ands	r3, r2
 8009308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800930c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009310:	2b00      	cmp	r3, #0
 8009312:	d115      	bne.n	8009340 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00f      	beq.n	8009340 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d009      	beq.n	8009340 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 82a3 	beq.w	800987c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	4798      	blx	r3
      }
      return;
 800933e:	e29d      	b.n	800987c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 8117 	beq.w	8009578 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800934a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009356:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800935a:	4b85      	ldr	r3, [pc, #532]	; (8009570 <HAL_UART_IRQHandler+0x298>)
 800935c:	4013      	ands	r3, r2
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 810a 	beq.w	8009578 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d011      	beq.n	8009394 <HAL_UART_IRQHandler+0xbc>
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2201      	movs	r2, #1
 8009382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800938a:	f043 0201 	orr.w	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d011      	beq.n	80093c4 <HAL_UART_IRQHandler+0xec>
 80093a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2202      	movs	r2, #2
 80093b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ba:	f043 0204 	orr.w	r2, r3, #4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d011      	beq.n	80093f4 <HAL_UART_IRQHandler+0x11c>
 80093d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2204      	movs	r2, #4
 80093e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ea:	f043 0202 	orr.w	r2, r3, #2
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d017      	beq.n	8009430 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d105      	bne.n	8009418 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800940c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009410:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2208      	movs	r2, #8
 800941e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009426:	f043 0208 	orr.w	r2, r3, #8
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009438:	2b00      	cmp	r3, #0
 800943a:	d012      	beq.n	8009462 <HAL_UART_IRQHandler+0x18a>
 800943c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00c      	beq.n	8009462 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009458:	f043 0220 	orr.w	r2, r3, #32
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8209 	beq.w	8009880 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800946e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00d      	beq.n	8009496 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800947a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800947e:	f003 0320 	and.w	r3, r3, #32
 8009482:	2b00      	cmp	r3, #0
 8009484:	d007      	beq.n	8009496 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800949c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d005      	beq.n	80094ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d04f      	beq.n	800955a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fe3c 	bl	800a138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d141      	bne.n	8009552 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1d9      	bne.n	80094ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951e:	2b00      	cmp	r3, #0
 8009520:	d013      	beq.n	800954a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009526:	4a13      	ldr	r2, [pc, #76]	; (8009574 <HAL_UART_IRQHandler+0x29c>)
 8009528:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952e:	4618      	mov	r0, r3
 8009530:	f7fb fd88 	bl	8005044 <HAL_DMA_Abort_IT>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d017      	beq.n	800956a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	e00f      	b.n	800956a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9ac 	bl	80098a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	e00b      	b.n	800956a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f9a8 	bl	80098a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	e007      	b.n	800956a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9a4 	bl	80098a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009568:	e18a      	b.n	8009880 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956a:	bf00      	nop
    return;
 800956c:	e188      	b.n	8009880 <HAL_UART_IRQHandler+0x5a8>
 800956e:	bf00      	nop
 8009570:	04000120 	.word	0x04000120
 8009574:	0800a1ff 	.word	0x0800a1ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957c:	2b01      	cmp	r3, #1
 800957e:	f040 8143 	bne.w	8009808 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009586:	f003 0310 	and.w	r3, r3, #16
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 813c 	beq.w	8009808 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009594:	f003 0310 	and.w	r3, r3, #16
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 8135 	beq.w	8009808 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2210      	movs	r2, #16
 80095a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	f040 80b1 	bne.w	8009718 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 815c 	beq.w	8009884 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095d6:	429a      	cmp	r2, r3
 80095d8:	f080 8154 	bcs.w	8009884 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	f000 8085 	beq.w	80096fc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009606:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800960a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800960e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800961c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009620:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009628:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1da      	bne.n	80095f2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009646:	e853 3f00 	ldrex	r3, [r3]
 800964a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800964c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800964e:	f023 0301 	bic.w	r3, r3, #1
 8009652:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3308      	adds	r3, #8
 800965c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009660:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009664:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009668:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e1      	bne.n	800963c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3308      	adds	r3, #8
 800967e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800968a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800969c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800969e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e3      	bne.n	8009678 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096cc:	f023 0310 	bic.w	r3, r3, #16
 80096d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096de:	65bb      	str	r3, [r7, #88]	; 0x58
 80096e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e4      	bne.n	80096bc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fb fc6b 	bl	8004fd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009708:	b29b      	uxth	r3, r3
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	b29b      	uxth	r3, r3
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8d3 	bl	80098bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009716:	e0b5      	b.n	8009884 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009724:	b29b      	uxth	r3, r3
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 80a7 	beq.w	8009888 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800973a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 80a2 	beq.w	8009888 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009766:	647b      	str	r3, [r7, #68]	; 0x44
 8009768:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800976c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e4      	bne.n	8009744 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	623b      	str	r3, [r7, #32]
   return(result);
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800979e:	633a      	str	r2, [r7, #48]	; 0x30
 80097a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e3      	bne.n	800977a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f023 0310 	bic.w	r3, r3, #16
 80097d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	69b9      	ldr	r1, [r7, #24]
 80097ec:	69fa      	ldr	r2, [r7, #28]
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	617b      	str	r3, [r7, #20]
   return(result);
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e4      	bne.n	80097c4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f85b 	bl	80098bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009806:	e03f      	b.n	8009888 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00e      	beq.n	8009832 <HAL_UART_IRQHandler+0x55a>
 8009814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fe83 	bl	800a536 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009830:	e02d      	b.n	800988e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00e      	beq.n	800985c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800983e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01c      	beq.n	800988c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
    }
    return;
 800985a:	e017      	b.n	800988c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800985c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009864:	2b00      	cmp	r3, #0
 8009866:	d012      	beq.n	800988e <HAL_UART_IRQHandler+0x5b6>
 8009868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00c      	beq.n	800988e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fcd8 	bl	800a22a <UART_EndTransmit_IT>
    return;
 800987a:	e008      	b.n	800988e <HAL_UART_IRQHandler+0x5b6>
      return;
 800987c:	bf00      	nop
 800987e:	e006      	b.n	800988e <HAL_UART_IRQHandler+0x5b6>
    return;
 8009880:	bf00      	nop
 8009882:	e004      	b.n	800988e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009884:	bf00      	nop
 8009886:	e002      	b.n	800988e <HAL_UART_IRQHandler+0x5b6>
      return;
 8009888:	bf00      	nop
 800988a:	e000      	b.n	800988e <HAL_UART_IRQHandler+0x5b6>
    return;
 800988c:	bf00      	nop
  }

}
 800988e:	37e8      	adds	r7, #232	; 0xe8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	4b92      	ldr	r3, [pc, #584]	; (8009b48 <UART_SetConfig+0x274>)
 8009900:	4013      	ands	r3, r2
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	6979      	ldr	r1, [r7, #20]
 8009908:	430b      	orrs	r3, r1
 800990a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	430a      	orrs	r2, r1
 8009920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	430a      	orrs	r2, r1
 8009944:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a80      	ldr	r2, [pc, #512]	; (8009b4c <UART_SetConfig+0x278>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d120      	bne.n	8009992 <UART_SetConfig+0xbe>
 8009950:	4b7f      	ldr	r3, [pc, #508]	; (8009b50 <UART_SetConfig+0x27c>)
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	2b03      	cmp	r3, #3
 800995a:	d817      	bhi.n	800998c <UART_SetConfig+0xb8>
 800995c:	a201      	add	r2, pc, #4	; (adr r2, 8009964 <UART_SetConfig+0x90>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009975 	.word	0x08009975
 8009968:	08009981 	.word	0x08009981
 800996c:	08009987 	.word	0x08009987
 8009970:	0800997b 	.word	0x0800997b
 8009974:	2301      	movs	r3, #1
 8009976:	77fb      	strb	r3, [r7, #31]
 8009978:	e0b5      	b.n	8009ae6 <UART_SetConfig+0x212>
 800997a:	2302      	movs	r3, #2
 800997c:	77fb      	strb	r3, [r7, #31]
 800997e:	e0b2      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009980:	2304      	movs	r3, #4
 8009982:	77fb      	strb	r3, [r7, #31]
 8009984:	e0af      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009986:	2308      	movs	r3, #8
 8009988:	77fb      	strb	r3, [r7, #31]
 800998a:	e0ac      	b.n	8009ae6 <UART_SetConfig+0x212>
 800998c:	2310      	movs	r3, #16
 800998e:	77fb      	strb	r3, [r7, #31]
 8009990:	e0a9      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a6f      	ldr	r2, [pc, #444]	; (8009b54 <UART_SetConfig+0x280>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d124      	bne.n	80099e6 <UART_SetConfig+0x112>
 800999c:	4b6c      	ldr	r3, [pc, #432]	; (8009b50 <UART_SetConfig+0x27c>)
 800999e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099a8:	d011      	beq.n	80099ce <UART_SetConfig+0xfa>
 80099aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099ae:	d817      	bhi.n	80099e0 <UART_SetConfig+0x10c>
 80099b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099b4:	d011      	beq.n	80099da <UART_SetConfig+0x106>
 80099b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ba:	d811      	bhi.n	80099e0 <UART_SetConfig+0x10c>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <UART_SetConfig+0xf4>
 80099c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c4:	d006      	beq.n	80099d4 <UART_SetConfig+0x100>
 80099c6:	e00b      	b.n	80099e0 <UART_SetConfig+0x10c>
 80099c8:	2300      	movs	r3, #0
 80099ca:	77fb      	strb	r3, [r7, #31]
 80099cc:	e08b      	b.n	8009ae6 <UART_SetConfig+0x212>
 80099ce:	2302      	movs	r3, #2
 80099d0:	77fb      	strb	r3, [r7, #31]
 80099d2:	e088      	b.n	8009ae6 <UART_SetConfig+0x212>
 80099d4:	2304      	movs	r3, #4
 80099d6:	77fb      	strb	r3, [r7, #31]
 80099d8:	e085      	b.n	8009ae6 <UART_SetConfig+0x212>
 80099da:	2308      	movs	r3, #8
 80099dc:	77fb      	strb	r3, [r7, #31]
 80099de:	e082      	b.n	8009ae6 <UART_SetConfig+0x212>
 80099e0:	2310      	movs	r3, #16
 80099e2:	77fb      	strb	r3, [r7, #31]
 80099e4:	e07f      	b.n	8009ae6 <UART_SetConfig+0x212>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a5b      	ldr	r2, [pc, #364]	; (8009b58 <UART_SetConfig+0x284>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d124      	bne.n	8009a3a <UART_SetConfig+0x166>
 80099f0:	4b57      	ldr	r3, [pc, #348]	; (8009b50 <UART_SetConfig+0x27c>)
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80099f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80099fc:	d011      	beq.n	8009a22 <UART_SetConfig+0x14e>
 80099fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009a02:	d817      	bhi.n	8009a34 <UART_SetConfig+0x160>
 8009a04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a08:	d011      	beq.n	8009a2e <UART_SetConfig+0x15a>
 8009a0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a0e:	d811      	bhi.n	8009a34 <UART_SetConfig+0x160>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <UART_SetConfig+0x148>
 8009a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a18:	d006      	beq.n	8009a28 <UART_SetConfig+0x154>
 8009a1a:	e00b      	b.n	8009a34 <UART_SetConfig+0x160>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e061      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a22:	2302      	movs	r3, #2
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e05e      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e05b      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a2e:	2308      	movs	r3, #8
 8009a30:	77fb      	strb	r3, [r7, #31]
 8009a32:	e058      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a34:	2310      	movs	r3, #16
 8009a36:	77fb      	strb	r3, [r7, #31]
 8009a38:	e055      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a47      	ldr	r2, [pc, #284]	; (8009b5c <UART_SetConfig+0x288>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d124      	bne.n	8009a8e <UART_SetConfig+0x1ba>
 8009a44:	4b42      	ldr	r3, [pc, #264]	; (8009b50 <UART_SetConfig+0x27c>)
 8009a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009a4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a50:	d011      	beq.n	8009a76 <UART_SetConfig+0x1a2>
 8009a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a56:	d817      	bhi.n	8009a88 <UART_SetConfig+0x1b4>
 8009a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a5c:	d011      	beq.n	8009a82 <UART_SetConfig+0x1ae>
 8009a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a62:	d811      	bhi.n	8009a88 <UART_SetConfig+0x1b4>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <UART_SetConfig+0x19c>
 8009a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a6c:	d006      	beq.n	8009a7c <UART_SetConfig+0x1a8>
 8009a6e:	e00b      	b.n	8009a88 <UART_SetConfig+0x1b4>
 8009a70:	2300      	movs	r3, #0
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	e037      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a76:	2302      	movs	r3, #2
 8009a78:	77fb      	strb	r3, [r7, #31]
 8009a7a:	e034      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	77fb      	strb	r3, [r7, #31]
 8009a80:	e031      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a82:	2308      	movs	r3, #8
 8009a84:	77fb      	strb	r3, [r7, #31]
 8009a86:	e02e      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e02b      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a33      	ldr	r2, [pc, #204]	; (8009b60 <UART_SetConfig+0x28c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d124      	bne.n	8009ae2 <UART_SetConfig+0x20e>
 8009a98:	4b2d      	ldr	r3, [pc, #180]	; (8009b50 <UART_SetConfig+0x27c>)
 8009a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009aa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009aa4:	d011      	beq.n	8009aca <UART_SetConfig+0x1f6>
 8009aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009aaa:	d817      	bhi.n	8009adc <UART_SetConfig+0x208>
 8009aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ab0:	d011      	beq.n	8009ad6 <UART_SetConfig+0x202>
 8009ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ab6:	d811      	bhi.n	8009adc <UART_SetConfig+0x208>
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <UART_SetConfig+0x1f0>
 8009abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ac0:	d006      	beq.n	8009ad0 <UART_SetConfig+0x1fc>
 8009ac2:	e00b      	b.n	8009adc <UART_SetConfig+0x208>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e00d      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009aca:	2302      	movs	r3, #2
 8009acc:	77fb      	strb	r3, [r7, #31]
 8009ace:	e00a      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e007      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	77fb      	strb	r3, [r7, #31]
 8009ada:	e004      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009adc:	2310      	movs	r3, #16
 8009ade:	77fb      	strb	r3, [r7, #31]
 8009ae0:	e001      	b.n	8009ae6 <UART_SetConfig+0x212>
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aee:	d16c      	bne.n	8009bca <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8009af0:	7ffb      	ldrb	r3, [r7, #31]
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d838      	bhi.n	8009b68 <UART_SetConfig+0x294>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <UART_SetConfig+0x228>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b29 	.word	0x08009b29
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	08009b69 	.word	0x08009b69
 8009b0c:	08009b37 	.word	0x08009b37
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b69 	.word	0x08009b69
 8009b18:	08009b69 	.word	0x08009b69
 8009b1c:	08009b3f 	.word	0x08009b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b20:	f7fd fd62 	bl	80075e8 <HAL_RCC_GetPCLK1Freq>
 8009b24:	61b8      	str	r0, [r7, #24]
        break;
 8009b26:	e024      	b.n	8009b72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b28:	f7fd fd80 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 8009b2c:	61b8      	str	r0, [r7, #24]
        break;
 8009b2e:	e020      	b.n	8009b72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b30:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <UART_SetConfig+0x290>)
 8009b32:	61bb      	str	r3, [r7, #24]
        break;
 8009b34:	e01d      	b.n	8009b72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b36:	f7fd fce1 	bl	80074fc <HAL_RCC_GetSysClockFreq>
 8009b3a:	61b8      	str	r0, [r7, #24]
        break;
 8009b3c:	e019      	b.n	8009b72 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b42:	61bb      	str	r3, [r7, #24]
        break;
 8009b44:	e015      	b.n	8009b72 <UART_SetConfig+0x29e>
 8009b46:	bf00      	nop
 8009b48:	efff69f3 	.word	0xefff69f3
 8009b4c:	40013800 	.word	0x40013800
 8009b50:	40021000 	.word	0x40021000
 8009b54:	40004400 	.word	0x40004400
 8009b58:	40004800 	.word	0x40004800
 8009b5c:	40004c00 	.word	0x40004c00
 8009b60:	40005000 	.word	0x40005000
 8009b64:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	77bb      	strb	r3, [r7, #30]
        break;
 8009b70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d075      	beq.n	8009c64 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	005a      	lsls	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	085b      	lsrs	r3, r3, #1
 8009b82:	441a      	add	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b0f      	cmp	r3, #15
 8009b94:	d916      	bls.n	8009bc4 <UART_SetConfig+0x2f0>
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b9c:	d212      	bcs.n	8009bc4 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f023 030f 	bic.w	r3, r3, #15
 8009ba6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	085b      	lsrs	r3, r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	89fb      	ldrh	r3, [r7, #14]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	89fa      	ldrh	r2, [r7, #14]
 8009bc0:	60da      	str	r2, [r3, #12]
 8009bc2:	e04f      	b.n	8009c64 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	77bb      	strb	r3, [r7, #30]
 8009bc8:	e04c      	b.n	8009c64 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bca:	7ffb      	ldrb	r3, [r7, #31]
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d828      	bhi.n	8009c22 <UART_SetConfig+0x34e>
 8009bd0:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <UART_SetConfig+0x304>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009bfd 	.word	0x08009bfd
 8009bdc:	08009c05 	.word	0x08009c05
 8009be0:	08009c0d 	.word	0x08009c0d
 8009be4:	08009c23 	.word	0x08009c23
 8009be8:	08009c13 	.word	0x08009c13
 8009bec:	08009c23 	.word	0x08009c23
 8009bf0:	08009c23 	.word	0x08009c23
 8009bf4:	08009c23 	.word	0x08009c23
 8009bf8:	08009c1b 	.word	0x08009c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bfc:	f7fd fcf4 	bl	80075e8 <HAL_RCC_GetPCLK1Freq>
 8009c00:	61b8      	str	r0, [r7, #24]
        break;
 8009c02:	e013      	b.n	8009c2c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c04:	f7fd fd12 	bl	800762c <HAL_RCC_GetPCLK2Freq>
 8009c08:	61b8      	str	r0, [r7, #24]
        break;
 8009c0a:	e00f      	b.n	8009c2c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c0c:	4b1b      	ldr	r3, [pc, #108]	; (8009c7c <UART_SetConfig+0x3a8>)
 8009c0e:	61bb      	str	r3, [r7, #24]
        break;
 8009c10:	e00c      	b.n	8009c2c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c12:	f7fd fc73 	bl	80074fc <HAL_RCC_GetSysClockFreq>
 8009c16:	61b8      	str	r0, [r7, #24]
        break;
 8009c18:	e008      	b.n	8009c2c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1e:	61bb      	str	r3, [r7, #24]
        break;
 8009c20:	e004      	b.n	8009c2c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	77bb      	strb	r3, [r7, #30]
        break;
 8009c2a:	bf00      	nop
    }

    if (pclk != 0U)
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d018      	beq.n	8009c64 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	085a      	lsrs	r2, r3, #1
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	441a      	add	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b0f      	cmp	r3, #15
 8009c4c:	d908      	bls.n	8009c60 <UART_SetConfig+0x38c>
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c54:	d204      	bcs.n	8009c60 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	60da      	str	r2, [r3, #12]
 8009c5e:	e001      	b.n	8009c64 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009c70:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	007a1200 	.word	0x007a1200

08009c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00a      	beq.n	8009caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00a      	beq.n	8009cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	f003 0320 	and.w	r3, r3, #32
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d01a      	beq.n	8009d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d7e:	d10a      	bne.n	8009d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00a      	beq.n	8009db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]
  }
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009dd4:	f7f9 fdce 	bl	8003974 <HAL_GetTick>
 8009dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0308 	and.w	r3, r3, #8
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	d10e      	bne.n	8009e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f82d 	bl	8009e56 <UART_WaitOnFlagUntilTimeout>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e023      	b.n	8009e4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d10e      	bne.n	8009e32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f817 	bl	8009e56 <UART_WaitOnFlagUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e00d      	b.n	8009e4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b09c      	sub	sp, #112	; 0x70
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	60f8      	str	r0, [r7, #12]
 8009e5e:	60b9      	str	r1, [r7, #8]
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	4613      	mov	r3, r2
 8009e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e66:	e0a5      	b.n	8009fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6e:	f000 80a1 	beq.w	8009fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e72:	f7f9 fd7f 	bl	8003974 <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d302      	bcc.n	8009e88 <UART_WaitOnFlagUntilTimeout+0x32>
 8009e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d13e      	bne.n	8009f06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ea8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e6      	bne.n	8009e88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	f023 0301 	bic.w	r3, r3, #1
 8009ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009eda:	64ba      	str	r2, [r7, #72]	; 0x48
 8009edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ee2:	e841 2300 	strex	r3, r2, [r1]
 8009ee6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e5      	bne.n	8009eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2220      	movs	r2, #32
 8009ef2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e067      	b.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0304 	and.w	r3, r3, #4
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d04f      	beq.n	8009fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f22:	d147      	bne.n	8009fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	e853 3f00 	ldrex	r3, [r3]
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f54:	e841 2300 	strex	r3, r2, [r1]
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1e6      	bne.n	8009f2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3308      	adds	r3, #8
 8009f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	e853 3f00 	ldrex	r3, [r3]
 8009f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f023 0301 	bic.w	r3, r3, #1
 8009f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009f80:	623a      	str	r2, [r7, #32]
 8009f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	69f9      	ldr	r1, [r7, #28]
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e5      	bne.n	8009f60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e010      	b.n	8009fd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	69da      	ldr	r2, [r3, #28]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2301      	moveq	r3, #1
 8009fc6:	2300      	movne	r3, #0
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	f43f af4a 	beq.w	8009e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3770      	adds	r7, #112	; 0x70
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b091      	sub	sp, #68	; 0x44
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	88fa      	ldrh	r2, [r7, #6]
 8009ff8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	88fa      	ldrh	r2, [r7, #6]
 800a000:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a012:	d10e      	bne.n	800a032 <UART_Start_Receive_IT+0x52>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d105      	bne.n	800a028 <UART_Start_Receive_IT+0x48>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a022:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a026:	e02d      	b.n	800a084 <UART_Start_Receive_IT+0xa4>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	22ff      	movs	r2, #255	; 0xff
 800a02c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a030:	e028      	b.n	800a084 <UART_Start_Receive_IT+0xa4>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10d      	bne.n	800a056 <UART_Start_Receive_IT+0x76>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d104      	bne.n	800a04c <UART_Start_Receive_IT+0x6c>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	22ff      	movs	r2, #255	; 0xff
 800a046:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a04a:	e01b      	b.n	800a084 <UART_Start_Receive_IT+0xa4>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	227f      	movs	r2, #127	; 0x7f
 800a050:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a054:	e016      	b.n	800a084 <UART_Start_Receive_IT+0xa4>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a05e:	d10d      	bne.n	800a07c <UART_Start_Receive_IT+0x9c>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d104      	bne.n	800a072 <UART_Start_Receive_IT+0x92>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	227f      	movs	r2, #127	; 0x7f
 800a06c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a070:	e008      	b.n	800a084 <UART_Start_Receive_IT+0xa4>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	223f      	movs	r2, #63	; 0x3f
 800a076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a07a:	e003      	b.n	800a084 <UART_Start_Receive_IT+0xa4>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2222      	movs	r2, #34	; 0x22
 800a090:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3308      	adds	r3, #8
 800a098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	e853 3f00 	ldrex	r3, [r3]
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0b2:	637a      	str	r2, [r7, #52]	; 0x34
 800a0b4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ba:	e841 2300 	strex	r3, r2, [r1]
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e5      	bne.n	800a092 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ce:	d107      	bne.n	800a0e0 <UART_Start_Receive_IT+0x100>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4a15      	ldr	r2, [pc, #84]	; (800a130 <UART_Start_Receive_IT+0x150>)
 800a0dc:	665a      	str	r2, [r3, #100]	; 0x64
 800a0de:	e002      	b.n	800a0e6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4a14      	ldr	r2, [pc, #80]	; (800a134 <UART_Start_Receive_IT+0x154>)
 800a0e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a102:	63bb      	str	r3, [r7, #56]	; 0x38
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	623b      	str	r3, [r7, #32]
 800a10e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	69f9      	ldr	r1, [r7, #28]
 800a112:	6a3a      	ldr	r2, [r7, #32]
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	61bb      	str	r3, [r7, #24]
   return(result);
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e6      	bne.n	800a0ee <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3744      	adds	r7, #68	; 0x44
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	0800a3db 	.word	0x0800a3db
 800a134:	0800a27f 	.word	0x0800a27f

0800a138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b095      	sub	sp, #84	; 0x54
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a154:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a15e:	643b      	str	r3, [r7, #64]	; 0x40
 800a160:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e6      	bne.n	800a140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3308      	adds	r3, #8
 800a178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	61fb      	str	r3, [r7, #28]
   return(result);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	f023 0301 	bic.w	r3, r3, #1
 800a188:	64bb      	str	r3, [r7, #72]	; 0x48
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3308      	adds	r3, #8
 800a190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a192:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e5      	bne.n	800a172 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d118      	bne.n	800a1e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f023 0310 	bic.w	r3, r3, #16
 800a1c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1cc:	61bb      	str	r3, [r7, #24]
 800a1ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6979      	ldr	r1, [r7, #20]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e6      	bne.n	800a1ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a1f2:	bf00      	nop
 800a1f4:	3754      	adds	r7, #84	; 0x54
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff fb43 	bl	80098a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b088      	sub	sp, #32
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a246:	61fb      	str	r3, [r7, #28]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	61bb      	str	r3, [r7, #24]
 800a252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	6979      	ldr	r1, [r7, #20]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	613b      	str	r3, [r7, #16]
   return(result);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e6      	bne.n	800a232 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff fb0f 	bl	8009894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a276:	bf00      	nop
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b096      	sub	sp, #88	; 0x58
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a28c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a294:	2b22      	cmp	r3, #34	; 0x22
 800a296:	f040 8094 	bne.w	800a3c2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2a0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a2a8:	b2d9      	uxtb	r1, r3
 800a2aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b4:	400a      	ands	r2, r1
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d177      	bne.n	800a3d2 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	e853 3f00 	ldrex	r3, [r3]
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a300:	647b      	str	r3, [r7, #68]	; 0x44
 800a302:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e6      	bne.n	800a2e2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	623b      	str	r3, [r7, #32]
   return(result);
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	f023 0301 	bic.w	r3, r3, #1
 800a32a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3308      	adds	r3, #8
 800a332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a334:	633a      	str	r2, [r7, #48]	; 0x30
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a33a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e5      	bne.n	800a314 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2220      	movs	r2, #32
 800a34c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d12e      	bne.n	800a3ba <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f023 0310 	bic.w	r3, r3, #16
 800a376:	64bb      	str	r3, [r7, #72]	; 0x48
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a380:	61fb      	str	r3, [r7, #28]
 800a382:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	69b9      	ldr	r1, [r7, #24]
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	617b      	str	r3, [r7, #20]
   return(result);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e6      	bne.n	800a362 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f003 0310 	and.w	r3, r3, #16
 800a39e:	2b10      	cmp	r3, #16
 800a3a0:	d103      	bne.n	800a3aa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2210      	movs	r2, #16
 800a3a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fa82 	bl	80098bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3b8:	e00b      	b.n	800a3d2 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7f6 fec6 	bl	800114c <HAL_UART_RxCpltCallback>
}
 800a3c0:	e007      	b.n	800a3d2 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	699a      	ldr	r2, [r3, #24]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f042 0208 	orr.w	r2, r2, #8
 800a3d0:	619a      	str	r2, [r3, #24]
}
 800a3d2:	bf00      	nop
 800a3d4:	3758      	adds	r7, #88	; 0x58
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b096      	sub	sp, #88	; 0x58
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f0:	2b22      	cmp	r3, #34	; 0x22
 800a3f2:	f040 8094 	bne.w	800a51e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a404:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a406:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a40a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a40e:	4013      	ands	r3, r2
 800a410:	b29a      	uxth	r2, r3
 800a412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a414:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a41a:	1c9a      	adds	r2, r3, #2
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d177      	bne.n	800a52e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	e853 3f00 	ldrex	r3, [r3]
 800a44a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a452:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	461a      	mov	r2, r3
 800a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45c:	643b      	str	r3, [r7, #64]	; 0x40
 800a45e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a464:	e841 2300 	strex	r3, r2, [r1]
 800a468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1e6      	bne.n	800a43e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3308      	adds	r3, #8
 800a476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	e853 3f00 	ldrex	r3, [r3]
 800a47e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	f023 0301 	bic.w	r3, r3, #1
 800a486:	64bb      	str	r3, [r7, #72]	; 0x48
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3308      	adds	r3, #8
 800a48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a490:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a498:	e841 2300 	strex	r3, r2, [r1]
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1e5      	bne.n	800a470 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d12e      	bne.n	800a516 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f023 0310 	bic.w	r3, r3, #16
 800a4d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f003 0310 	and.w	r3, r3, #16
 800a4fa:	2b10      	cmp	r3, #16
 800a4fc:	d103      	bne.n	800a506 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2210      	movs	r2, #16
 800a504:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f7ff f9d4 	bl	80098bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a514:	e00b      	b.n	800a52e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7f6 fe18 	bl	800114c <HAL_UART_RxCpltCallback>
}
 800a51c:	e007      	b.n	800a52e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	699a      	ldr	r2, [r3, #24]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f042 0208 	orr.w	r2, r2, #8
 800a52c:	619a      	str	r2, [r3, #24]
}
 800a52e:	bf00      	nop
 800a530:	3758      	adds	r7, #88	; 0x58
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <atoi>:
 800a54a:	220a      	movs	r2, #10
 800a54c:	2100      	movs	r1, #0
 800a54e:	f000 b90d 	b.w	800a76c <strtol>
	...

0800a554 <__errno>:
 800a554:	4b01      	ldr	r3, [pc, #4]	; (800a55c <__errno+0x8>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	2000012c 	.word	0x2000012c

0800a560 <__libc_init_array>:
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	4d0d      	ldr	r5, [pc, #52]	; (800a598 <__libc_init_array+0x38>)
 800a564:	4c0d      	ldr	r4, [pc, #52]	; (800a59c <__libc_init_array+0x3c>)
 800a566:	1b64      	subs	r4, r4, r5
 800a568:	10a4      	asrs	r4, r4, #2
 800a56a:	2600      	movs	r6, #0
 800a56c:	42a6      	cmp	r6, r4
 800a56e:	d109      	bne.n	800a584 <__libc_init_array+0x24>
 800a570:	4d0b      	ldr	r5, [pc, #44]	; (800a5a0 <__libc_init_array+0x40>)
 800a572:	4c0c      	ldr	r4, [pc, #48]	; (800a5a4 <__libc_init_array+0x44>)
 800a574:	f000 fd44 	bl	800b000 <_init>
 800a578:	1b64      	subs	r4, r4, r5
 800a57a:	10a4      	asrs	r4, r4, #2
 800a57c:	2600      	movs	r6, #0
 800a57e:	42a6      	cmp	r6, r4
 800a580:	d105      	bne.n	800a58e <__libc_init_array+0x2e>
 800a582:	bd70      	pop	{r4, r5, r6, pc}
 800a584:	f855 3b04 	ldr.w	r3, [r5], #4
 800a588:	4798      	blx	r3
 800a58a:	3601      	adds	r6, #1
 800a58c:	e7ee      	b.n	800a56c <__libc_init_array+0xc>
 800a58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a592:	4798      	blx	r3
 800a594:	3601      	adds	r6, #1
 800a596:	e7f2      	b.n	800a57e <__libc_init_array+0x1e>
 800a598:	0800b1c4 	.word	0x0800b1c4
 800a59c:	0800b1c4 	.word	0x0800b1c4
 800a5a0:	0800b1c4 	.word	0x0800b1c4
 800a5a4:	0800b1c8 	.word	0x0800b1c8

0800a5a8 <memcpy>:
 800a5a8:	440a      	add	r2, r1
 800a5aa:	4291      	cmp	r1, r2
 800a5ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5b0:	d100      	bne.n	800a5b4 <memcpy+0xc>
 800a5b2:	4770      	bx	lr
 800a5b4:	b510      	push	{r4, lr}
 800a5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5be:	4291      	cmp	r1, r2
 800a5c0:	d1f9      	bne.n	800a5b6 <memcpy+0xe>
 800a5c2:	bd10      	pop	{r4, pc}

0800a5c4 <memset>:
 800a5c4:	4402      	add	r2, r0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d100      	bne.n	800a5ce <memset+0xa>
 800a5cc:	4770      	bx	lr
 800a5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a5d2:	e7f9      	b.n	800a5c8 <memset+0x4>

0800a5d4 <siprintf>:
 800a5d4:	b40e      	push	{r1, r2, r3}
 800a5d6:	b500      	push	{lr}
 800a5d8:	b09c      	sub	sp, #112	; 0x70
 800a5da:	ab1d      	add	r3, sp, #116	; 0x74
 800a5dc:	9002      	str	r0, [sp, #8]
 800a5de:	9006      	str	r0, [sp, #24]
 800a5e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5e4:	4809      	ldr	r0, [pc, #36]	; (800a60c <siprintf+0x38>)
 800a5e6:	9107      	str	r1, [sp, #28]
 800a5e8:	9104      	str	r1, [sp, #16]
 800a5ea:	4909      	ldr	r1, [pc, #36]	; (800a610 <siprintf+0x3c>)
 800a5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f0:	9105      	str	r1, [sp, #20]
 800a5f2:	6800      	ldr	r0, [r0, #0]
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	a902      	add	r1, sp, #8
 800a5f8:	f000 f91e 	bl	800a838 <_svfiprintf_r>
 800a5fc:	9b02      	ldr	r3, [sp, #8]
 800a5fe:	2200      	movs	r2, #0
 800a600:	701a      	strb	r2, [r3, #0]
 800a602:	b01c      	add	sp, #112	; 0x70
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b003      	add	sp, #12
 800a60a:	4770      	bx	lr
 800a60c:	2000012c 	.word	0x2000012c
 800a610:	ffff0208 	.word	0xffff0208

0800a614 <strcat>:
 800a614:	b510      	push	{r4, lr}
 800a616:	4602      	mov	r2, r0
 800a618:	7814      	ldrb	r4, [r2, #0]
 800a61a:	4613      	mov	r3, r2
 800a61c:	3201      	adds	r2, #1
 800a61e:	2c00      	cmp	r4, #0
 800a620:	d1fa      	bne.n	800a618 <strcat+0x4>
 800a622:	3b01      	subs	r3, #1
 800a624:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a628:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	d1f9      	bne.n	800a624 <strcat+0x10>
 800a630:	bd10      	pop	{r4, pc}

0800a632 <strcpy>:
 800a632:	4603      	mov	r3, r0
 800a634:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a638:	f803 2b01 	strb.w	r2, [r3], #1
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d1f9      	bne.n	800a634 <strcpy+0x2>
 800a640:	4770      	bx	lr

0800a642 <strncat>:
 800a642:	b530      	push	{r4, r5, lr}
 800a644:	4604      	mov	r4, r0
 800a646:	7825      	ldrb	r5, [r4, #0]
 800a648:	4623      	mov	r3, r4
 800a64a:	3401      	adds	r4, #1
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	d1fa      	bne.n	800a646 <strncat+0x4>
 800a650:	3a01      	subs	r2, #1
 800a652:	d304      	bcc.n	800a65e <strncat+0x1c>
 800a654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a658:	f803 4b01 	strb.w	r4, [r3], #1
 800a65c:	b904      	cbnz	r4, 800a660 <strncat+0x1e>
 800a65e:	bd30      	pop	{r4, r5, pc}
 800a660:	2a00      	cmp	r2, #0
 800a662:	d1f5      	bne.n	800a650 <strncat+0xe>
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e7f3      	b.n	800a650 <strncat+0xe>

0800a668 <_strtol_l.constprop.0>:
 800a668:	2b01      	cmp	r3, #1
 800a66a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66e:	d001      	beq.n	800a674 <_strtol_l.constprop.0+0xc>
 800a670:	2b24      	cmp	r3, #36	; 0x24
 800a672:	d906      	bls.n	800a682 <_strtol_l.constprop.0+0x1a>
 800a674:	f7ff ff6e 	bl	800a554 <__errno>
 800a678:	2316      	movs	r3, #22
 800a67a:	6003      	str	r3, [r0, #0]
 800a67c:	2000      	movs	r0, #0
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a768 <_strtol_l.constprop.0+0x100>
 800a686:	460d      	mov	r5, r1
 800a688:	462e      	mov	r6, r5
 800a68a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a68e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a692:	f017 0708 	ands.w	r7, r7, #8
 800a696:	d1f7      	bne.n	800a688 <_strtol_l.constprop.0+0x20>
 800a698:	2c2d      	cmp	r4, #45	; 0x2d
 800a69a:	d132      	bne.n	800a702 <_strtol_l.constprop.0+0x9a>
 800a69c:	782c      	ldrb	r4, [r5, #0]
 800a69e:	2701      	movs	r7, #1
 800a6a0:	1cb5      	adds	r5, r6, #2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d05b      	beq.n	800a75e <_strtol_l.constprop.0+0xf6>
 800a6a6:	2b10      	cmp	r3, #16
 800a6a8:	d109      	bne.n	800a6be <_strtol_l.constprop.0+0x56>
 800a6aa:	2c30      	cmp	r4, #48	; 0x30
 800a6ac:	d107      	bne.n	800a6be <_strtol_l.constprop.0+0x56>
 800a6ae:	782c      	ldrb	r4, [r5, #0]
 800a6b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6b4:	2c58      	cmp	r4, #88	; 0x58
 800a6b6:	d14d      	bne.n	800a754 <_strtol_l.constprop.0+0xec>
 800a6b8:	786c      	ldrb	r4, [r5, #1]
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	3502      	adds	r5, #2
 800a6be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6c6:	f04f 0c00 	mov.w	ip, #0
 800a6ca:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6ce:	4666      	mov	r6, ip
 800a6d0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a6d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a6d8:	f1be 0f09 	cmp.w	lr, #9
 800a6dc:	d816      	bhi.n	800a70c <_strtol_l.constprop.0+0xa4>
 800a6de:	4674      	mov	r4, lr
 800a6e0:	42a3      	cmp	r3, r4
 800a6e2:	dd24      	ble.n	800a72e <_strtol_l.constprop.0+0xc6>
 800a6e4:	f1bc 0f00 	cmp.w	ip, #0
 800a6e8:	db1e      	blt.n	800a728 <_strtol_l.constprop.0+0xc0>
 800a6ea:	45b1      	cmp	r9, r6
 800a6ec:	d31c      	bcc.n	800a728 <_strtol_l.constprop.0+0xc0>
 800a6ee:	d101      	bne.n	800a6f4 <_strtol_l.constprop.0+0x8c>
 800a6f0:	45a2      	cmp	sl, r4
 800a6f2:	db19      	blt.n	800a728 <_strtol_l.constprop.0+0xc0>
 800a6f4:	fb06 4603 	mla	r6, r6, r3, r4
 800a6f8:	f04f 0c01 	mov.w	ip, #1
 800a6fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a700:	e7e8      	b.n	800a6d4 <_strtol_l.constprop.0+0x6c>
 800a702:	2c2b      	cmp	r4, #43	; 0x2b
 800a704:	bf04      	itt	eq
 800a706:	782c      	ldrbeq	r4, [r5, #0]
 800a708:	1cb5      	addeq	r5, r6, #2
 800a70a:	e7ca      	b.n	800a6a2 <_strtol_l.constprop.0+0x3a>
 800a70c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a710:	f1be 0f19 	cmp.w	lr, #25
 800a714:	d801      	bhi.n	800a71a <_strtol_l.constprop.0+0xb2>
 800a716:	3c37      	subs	r4, #55	; 0x37
 800a718:	e7e2      	b.n	800a6e0 <_strtol_l.constprop.0+0x78>
 800a71a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a71e:	f1be 0f19 	cmp.w	lr, #25
 800a722:	d804      	bhi.n	800a72e <_strtol_l.constprop.0+0xc6>
 800a724:	3c57      	subs	r4, #87	; 0x57
 800a726:	e7db      	b.n	800a6e0 <_strtol_l.constprop.0+0x78>
 800a728:	f04f 3cff 	mov.w	ip, #4294967295
 800a72c:	e7e6      	b.n	800a6fc <_strtol_l.constprop.0+0x94>
 800a72e:	f1bc 0f00 	cmp.w	ip, #0
 800a732:	da05      	bge.n	800a740 <_strtol_l.constprop.0+0xd8>
 800a734:	2322      	movs	r3, #34	; 0x22
 800a736:	6003      	str	r3, [r0, #0]
 800a738:	4646      	mov	r6, r8
 800a73a:	b942      	cbnz	r2, 800a74e <_strtol_l.constprop.0+0xe6>
 800a73c:	4630      	mov	r0, r6
 800a73e:	e79e      	b.n	800a67e <_strtol_l.constprop.0+0x16>
 800a740:	b107      	cbz	r7, 800a744 <_strtol_l.constprop.0+0xdc>
 800a742:	4276      	negs	r6, r6
 800a744:	2a00      	cmp	r2, #0
 800a746:	d0f9      	beq.n	800a73c <_strtol_l.constprop.0+0xd4>
 800a748:	f1bc 0f00 	cmp.w	ip, #0
 800a74c:	d000      	beq.n	800a750 <_strtol_l.constprop.0+0xe8>
 800a74e:	1e69      	subs	r1, r5, #1
 800a750:	6011      	str	r1, [r2, #0]
 800a752:	e7f3      	b.n	800a73c <_strtol_l.constprop.0+0xd4>
 800a754:	2430      	movs	r4, #48	; 0x30
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1b1      	bne.n	800a6be <_strtol_l.constprop.0+0x56>
 800a75a:	2308      	movs	r3, #8
 800a75c:	e7af      	b.n	800a6be <_strtol_l.constprop.0+0x56>
 800a75e:	2c30      	cmp	r4, #48	; 0x30
 800a760:	d0a5      	beq.n	800a6ae <_strtol_l.constprop.0+0x46>
 800a762:	230a      	movs	r3, #10
 800a764:	e7ab      	b.n	800a6be <_strtol_l.constprop.0+0x56>
 800a766:	bf00      	nop
 800a768:	0800b091 	.word	0x0800b091

0800a76c <strtol>:
 800a76c:	4613      	mov	r3, r2
 800a76e:	460a      	mov	r2, r1
 800a770:	4601      	mov	r1, r0
 800a772:	4802      	ldr	r0, [pc, #8]	; (800a77c <strtol+0x10>)
 800a774:	6800      	ldr	r0, [r0, #0]
 800a776:	f7ff bf77 	b.w	800a668 <_strtol_l.constprop.0>
 800a77a:	bf00      	nop
 800a77c:	2000012c 	.word	0x2000012c

0800a780 <__ssputs_r>:
 800a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	688e      	ldr	r6, [r1, #8]
 800a786:	429e      	cmp	r6, r3
 800a788:	4682      	mov	sl, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	4690      	mov	r8, r2
 800a78e:	461f      	mov	r7, r3
 800a790:	d838      	bhi.n	800a804 <__ssputs_r+0x84>
 800a792:	898a      	ldrh	r2, [r1, #12]
 800a794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a798:	d032      	beq.n	800a800 <__ssputs_r+0x80>
 800a79a:	6825      	ldr	r5, [r4, #0]
 800a79c:	6909      	ldr	r1, [r1, #16]
 800a79e:	eba5 0901 	sub.w	r9, r5, r1
 800a7a2:	6965      	ldr	r5, [r4, #20]
 800a7a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	444b      	add	r3, r9
 800a7b0:	106d      	asrs	r5, r5, #1
 800a7b2:	429d      	cmp	r5, r3
 800a7b4:	bf38      	it	cc
 800a7b6:	461d      	movcc	r5, r3
 800a7b8:	0553      	lsls	r3, r2, #21
 800a7ba:	d531      	bpl.n	800a820 <__ssputs_r+0xa0>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f000 fb55 	bl	800ae6c <_malloc_r>
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	b950      	cbnz	r0, 800a7dc <__ssputs_r+0x5c>
 800a7c6:	230c      	movs	r3, #12
 800a7c8:	f8ca 3000 	str.w	r3, [sl]
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7dc:	6921      	ldr	r1, [r4, #16]
 800a7de:	464a      	mov	r2, r9
 800a7e0:	f7ff fee2 	bl	800a5a8 <memcpy>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	6126      	str	r6, [r4, #16]
 800a7f2:	6165      	str	r5, [r4, #20]
 800a7f4:	444e      	add	r6, r9
 800a7f6:	eba5 0509 	sub.w	r5, r5, r9
 800a7fa:	6026      	str	r6, [r4, #0]
 800a7fc:	60a5      	str	r5, [r4, #8]
 800a7fe:	463e      	mov	r6, r7
 800a800:	42be      	cmp	r6, r7
 800a802:	d900      	bls.n	800a806 <__ssputs_r+0x86>
 800a804:	463e      	mov	r6, r7
 800a806:	6820      	ldr	r0, [r4, #0]
 800a808:	4632      	mov	r2, r6
 800a80a:	4641      	mov	r1, r8
 800a80c:	f000 faa8 	bl	800ad60 <memmove>
 800a810:	68a3      	ldr	r3, [r4, #8]
 800a812:	1b9b      	subs	r3, r3, r6
 800a814:	60a3      	str	r3, [r4, #8]
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	4433      	add	r3, r6
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	2000      	movs	r0, #0
 800a81e:	e7db      	b.n	800a7d8 <__ssputs_r+0x58>
 800a820:	462a      	mov	r2, r5
 800a822:	f000 fb97 	bl	800af54 <_realloc_r>
 800a826:	4606      	mov	r6, r0
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1e1      	bne.n	800a7f0 <__ssputs_r+0x70>
 800a82c:	6921      	ldr	r1, [r4, #16]
 800a82e:	4650      	mov	r0, sl
 800a830:	f000 fab0 	bl	800ad94 <_free_r>
 800a834:	e7c7      	b.n	800a7c6 <__ssputs_r+0x46>
	...

0800a838 <_svfiprintf_r>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	4698      	mov	r8, r3
 800a83e:	898b      	ldrh	r3, [r1, #12]
 800a840:	061b      	lsls	r3, r3, #24
 800a842:	b09d      	sub	sp, #116	; 0x74
 800a844:	4607      	mov	r7, r0
 800a846:	460d      	mov	r5, r1
 800a848:	4614      	mov	r4, r2
 800a84a:	d50e      	bpl.n	800a86a <_svfiprintf_r+0x32>
 800a84c:	690b      	ldr	r3, [r1, #16]
 800a84e:	b963      	cbnz	r3, 800a86a <_svfiprintf_r+0x32>
 800a850:	2140      	movs	r1, #64	; 0x40
 800a852:	f000 fb0b 	bl	800ae6c <_malloc_r>
 800a856:	6028      	str	r0, [r5, #0]
 800a858:	6128      	str	r0, [r5, #16]
 800a85a:	b920      	cbnz	r0, 800a866 <_svfiprintf_r+0x2e>
 800a85c:	230c      	movs	r3, #12
 800a85e:	603b      	str	r3, [r7, #0]
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	e0d1      	b.n	800aa0a <_svfiprintf_r+0x1d2>
 800a866:	2340      	movs	r3, #64	; 0x40
 800a868:	616b      	str	r3, [r5, #20]
 800a86a:	2300      	movs	r3, #0
 800a86c:	9309      	str	r3, [sp, #36]	; 0x24
 800a86e:	2320      	movs	r3, #32
 800a870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a874:	f8cd 800c 	str.w	r8, [sp, #12]
 800a878:	2330      	movs	r3, #48	; 0x30
 800a87a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa24 <_svfiprintf_r+0x1ec>
 800a87e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a882:	f04f 0901 	mov.w	r9, #1
 800a886:	4623      	mov	r3, r4
 800a888:	469a      	mov	sl, r3
 800a88a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a88e:	b10a      	cbz	r2, 800a894 <_svfiprintf_r+0x5c>
 800a890:	2a25      	cmp	r2, #37	; 0x25
 800a892:	d1f9      	bne.n	800a888 <_svfiprintf_r+0x50>
 800a894:	ebba 0b04 	subs.w	fp, sl, r4
 800a898:	d00b      	beq.n	800a8b2 <_svfiprintf_r+0x7a>
 800a89a:	465b      	mov	r3, fp
 800a89c:	4622      	mov	r2, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff ff6d 	bl	800a780 <__ssputs_r>
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f000 80aa 	beq.w	800aa00 <_svfiprintf_r+0x1c8>
 800a8ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ae:	445a      	add	r2, fp
 800a8b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 80a2 	beq.w	800aa00 <_svfiprintf_r+0x1c8>
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8c6:	f10a 0a01 	add.w	sl, sl, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	9307      	str	r3, [sp, #28]
 800a8ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a8d4:	4654      	mov	r4, sl
 800a8d6:	2205      	movs	r2, #5
 800a8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8dc:	4851      	ldr	r0, [pc, #324]	; (800aa24 <_svfiprintf_r+0x1ec>)
 800a8de:	f7f5 fc97 	bl	8000210 <memchr>
 800a8e2:	9a04      	ldr	r2, [sp, #16]
 800a8e4:	b9d8      	cbnz	r0, 800a91e <_svfiprintf_r+0xe6>
 800a8e6:	06d0      	lsls	r0, r2, #27
 800a8e8:	bf44      	itt	mi
 800a8ea:	2320      	movmi	r3, #32
 800a8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f0:	0711      	lsls	r1, r2, #28
 800a8f2:	bf44      	itt	mi
 800a8f4:	232b      	movmi	r3, #43	; 0x2b
 800a8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a900:	d015      	beq.n	800a92e <_svfiprintf_r+0xf6>
 800a902:	9a07      	ldr	r2, [sp, #28]
 800a904:	4654      	mov	r4, sl
 800a906:	2000      	movs	r0, #0
 800a908:	f04f 0c0a 	mov.w	ip, #10
 800a90c:	4621      	mov	r1, r4
 800a90e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a912:	3b30      	subs	r3, #48	; 0x30
 800a914:	2b09      	cmp	r3, #9
 800a916:	d94e      	bls.n	800a9b6 <_svfiprintf_r+0x17e>
 800a918:	b1b0      	cbz	r0, 800a948 <_svfiprintf_r+0x110>
 800a91a:	9207      	str	r2, [sp, #28]
 800a91c:	e014      	b.n	800a948 <_svfiprintf_r+0x110>
 800a91e:	eba0 0308 	sub.w	r3, r0, r8
 800a922:	fa09 f303 	lsl.w	r3, r9, r3
 800a926:	4313      	orrs	r3, r2
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	46a2      	mov	sl, r4
 800a92c:	e7d2      	b.n	800a8d4 <_svfiprintf_r+0x9c>
 800a92e:	9b03      	ldr	r3, [sp, #12]
 800a930:	1d19      	adds	r1, r3, #4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	9103      	str	r1, [sp, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfbb      	ittet	lt
 800a93a:	425b      	neglt	r3, r3
 800a93c:	f042 0202 	orrlt.w	r2, r2, #2
 800a940:	9307      	strge	r3, [sp, #28]
 800a942:	9307      	strlt	r3, [sp, #28]
 800a944:	bfb8      	it	lt
 800a946:	9204      	strlt	r2, [sp, #16]
 800a948:	7823      	ldrb	r3, [r4, #0]
 800a94a:	2b2e      	cmp	r3, #46	; 0x2e
 800a94c:	d10c      	bne.n	800a968 <_svfiprintf_r+0x130>
 800a94e:	7863      	ldrb	r3, [r4, #1]
 800a950:	2b2a      	cmp	r3, #42	; 0x2a
 800a952:	d135      	bne.n	800a9c0 <_svfiprintf_r+0x188>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	1d1a      	adds	r2, r3, #4
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	9203      	str	r2, [sp, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	bfb8      	it	lt
 800a960:	f04f 33ff 	movlt.w	r3, #4294967295
 800a964:	3402      	adds	r4, #2
 800a966:	9305      	str	r3, [sp, #20]
 800a968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa34 <_svfiprintf_r+0x1fc>
 800a96c:	7821      	ldrb	r1, [r4, #0]
 800a96e:	2203      	movs	r2, #3
 800a970:	4650      	mov	r0, sl
 800a972:	f7f5 fc4d 	bl	8000210 <memchr>
 800a976:	b140      	cbz	r0, 800a98a <_svfiprintf_r+0x152>
 800a978:	2340      	movs	r3, #64	; 0x40
 800a97a:	eba0 000a 	sub.w	r0, r0, sl
 800a97e:	fa03 f000 	lsl.w	r0, r3, r0
 800a982:	9b04      	ldr	r3, [sp, #16]
 800a984:	4303      	orrs	r3, r0
 800a986:	3401      	adds	r4, #1
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4826      	ldr	r0, [pc, #152]	; (800aa28 <_svfiprintf_r+0x1f0>)
 800a990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a994:	2206      	movs	r2, #6
 800a996:	f7f5 fc3b 	bl	8000210 <memchr>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d038      	beq.n	800aa10 <_svfiprintf_r+0x1d8>
 800a99e:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <_svfiprintf_r+0x1f4>)
 800a9a0:	bb1b      	cbnz	r3, 800a9ea <_svfiprintf_r+0x1b2>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	3307      	adds	r3, #7
 800a9a6:	f023 0307 	bic.w	r3, r3, #7
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	9303      	str	r3, [sp, #12]
 800a9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b0:	4433      	add	r3, r6
 800a9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b4:	e767      	b.n	800a886 <_svfiprintf_r+0x4e>
 800a9b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	2001      	movs	r0, #1
 800a9be:	e7a5      	b.n	800a90c <_svfiprintf_r+0xd4>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	3401      	adds	r4, #1
 800a9c4:	9305      	str	r3, [sp, #20]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	f04f 0c0a 	mov.w	ip, #10
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9d2:	3a30      	subs	r2, #48	; 0x30
 800a9d4:	2a09      	cmp	r2, #9
 800a9d6:	d903      	bls.n	800a9e0 <_svfiprintf_r+0x1a8>
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0c5      	beq.n	800a968 <_svfiprintf_r+0x130>
 800a9dc:	9105      	str	r1, [sp, #20]
 800a9de:	e7c3      	b.n	800a968 <_svfiprintf_r+0x130>
 800a9e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e7f0      	b.n	800a9cc <_svfiprintf_r+0x194>
 800a9ea:	ab03      	add	r3, sp, #12
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <_svfiprintf_r+0x1f8>)
 800a9f2:	a904      	add	r1, sp, #16
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f3af 8000 	nop.w
 800a9fa:	1c42      	adds	r2, r0, #1
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	d1d6      	bne.n	800a9ae <_svfiprintf_r+0x176>
 800aa00:	89ab      	ldrh	r3, [r5, #12]
 800aa02:	065b      	lsls	r3, r3, #25
 800aa04:	f53f af2c 	bmi.w	800a860 <_svfiprintf_r+0x28>
 800aa08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa0a:	b01d      	add	sp, #116	; 0x74
 800aa0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa10:	ab03      	add	r3, sp, #12
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	462a      	mov	r2, r5
 800aa16:	4b06      	ldr	r3, [pc, #24]	; (800aa30 <_svfiprintf_r+0x1f8>)
 800aa18:	a904      	add	r1, sp, #16
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	f000 f87a 	bl	800ab14 <_printf_i>
 800aa20:	e7eb      	b.n	800a9fa <_svfiprintf_r+0x1c2>
 800aa22:	bf00      	nop
 800aa24:	0800b191 	.word	0x0800b191
 800aa28:	0800b19b 	.word	0x0800b19b
 800aa2c:	00000000 	.word	0x00000000
 800aa30:	0800a781 	.word	0x0800a781
 800aa34:	0800b197 	.word	0x0800b197

0800aa38 <_printf_common>:
 800aa38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa3c:	4616      	mov	r6, r2
 800aa3e:	4699      	mov	r9, r3
 800aa40:	688a      	ldr	r2, [r1, #8]
 800aa42:	690b      	ldr	r3, [r1, #16]
 800aa44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	bfb8      	it	lt
 800aa4c:	4613      	movlt	r3, r2
 800aa4e:	6033      	str	r3, [r6, #0]
 800aa50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa54:	4607      	mov	r7, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	b10a      	cbz	r2, 800aa5e <_printf_common+0x26>
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	0699      	lsls	r1, r3, #26
 800aa62:	bf42      	ittt	mi
 800aa64:	6833      	ldrmi	r3, [r6, #0]
 800aa66:	3302      	addmi	r3, #2
 800aa68:	6033      	strmi	r3, [r6, #0]
 800aa6a:	6825      	ldr	r5, [r4, #0]
 800aa6c:	f015 0506 	ands.w	r5, r5, #6
 800aa70:	d106      	bne.n	800aa80 <_printf_common+0x48>
 800aa72:	f104 0a19 	add.w	sl, r4, #25
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	6832      	ldr	r2, [r6, #0]
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	dc26      	bgt.n	800aace <_printf_common+0x96>
 800aa80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa84:	1e13      	subs	r3, r2, #0
 800aa86:	6822      	ldr	r2, [r4, #0]
 800aa88:	bf18      	it	ne
 800aa8a:	2301      	movne	r3, #1
 800aa8c:	0692      	lsls	r2, r2, #26
 800aa8e:	d42b      	bmi.n	800aae8 <_printf_common+0xb0>
 800aa90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa94:	4649      	mov	r1, r9
 800aa96:	4638      	mov	r0, r7
 800aa98:	47c0      	blx	r8
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d01e      	beq.n	800aadc <_printf_common+0xa4>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	68e5      	ldr	r5, [r4, #12]
 800aaa2:	6832      	ldr	r2, [r6, #0]
 800aaa4:	f003 0306 	and.w	r3, r3, #6
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	bf08      	it	eq
 800aaac:	1aad      	subeq	r5, r5, r2
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	6922      	ldr	r2, [r4, #16]
 800aab2:	bf0c      	ite	eq
 800aab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab8:	2500      	movne	r5, #0
 800aaba:	4293      	cmp	r3, r2
 800aabc:	bfc4      	itt	gt
 800aabe:	1a9b      	subgt	r3, r3, r2
 800aac0:	18ed      	addgt	r5, r5, r3
 800aac2:	2600      	movs	r6, #0
 800aac4:	341a      	adds	r4, #26
 800aac6:	42b5      	cmp	r5, r6
 800aac8:	d11a      	bne.n	800ab00 <_printf_common+0xc8>
 800aaca:	2000      	movs	r0, #0
 800aacc:	e008      	b.n	800aae0 <_printf_common+0xa8>
 800aace:	2301      	movs	r3, #1
 800aad0:	4652      	mov	r2, sl
 800aad2:	4649      	mov	r1, r9
 800aad4:	4638      	mov	r0, r7
 800aad6:	47c0      	blx	r8
 800aad8:	3001      	adds	r0, #1
 800aada:	d103      	bne.n	800aae4 <_printf_common+0xac>
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae4:	3501      	adds	r5, #1
 800aae6:	e7c6      	b.n	800aa76 <_printf_common+0x3e>
 800aae8:	18e1      	adds	r1, r4, r3
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	2030      	movs	r0, #48	; 0x30
 800aaee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaf2:	4422      	add	r2, r4
 800aaf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aafc:	3302      	adds	r3, #2
 800aafe:	e7c7      	b.n	800aa90 <_printf_common+0x58>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4622      	mov	r2, r4
 800ab04:	4649      	mov	r1, r9
 800ab06:	4638      	mov	r0, r7
 800ab08:	47c0      	blx	r8
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d0e6      	beq.n	800aadc <_printf_common+0xa4>
 800ab0e:	3601      	adds	r6, #1
 800ab10:	e7d9      	b.n	800aac6 <_printf_common+0x8e>
	...

0800ab14 <_printf_i>:
 800ab14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	7e0f      	ldrb	r7, [r1, #24]
 800ab1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab1c:	2f78      	cmp	r7, #120	; 0x78
 800ab1e:	4691      	mov	r9, r2
 800ab20:	4680      	mov	r8, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	469a      	mov	sl, r3
 800ab26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab2a:	d807      	bhi.n	800ab3c <_printf_i+0x28>
 800ab2c:	2f62      	cmp	r7, #98	; 0x62
 800ab2e:	d80a      	bhi.n	800ab46 <_printf_i+0x32>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	f000 80d8 	beq.w	800ace6 <_printf_i+0x1d2>
 800ab36:	2f58      	cmp	r7, #88	; 0x58
 800ab38:	f000 80a3 	beq.w	800ac82 <_printf_i+0x16e>
 800ab3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab44:	e03a      	b.n	800abbc <_printf_i+0xa8>
 800ab46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab4a:	2b15      	cmp	r3, #21
 800ab4c:	d8f6      	bhi.n	800ab3c <_printf_i+0x28>
 800ab4e:	a101      	add	r1, pc, #4	; (adr r1, 800ab54 <_printf_i+0x40>)
 800ab50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab54:	0800abad 	.word	0x0800abad
 800ab58:	0800abc1 	.word	0x0800abc1
 800ab5c:	0800ab3d 	.word	0x0800ab3d
 800ab60:	0800ab3d 	.word	0x0800ab3d
 800ab64:	0800ab3d 	.word	0x0800ab3d
 800ab68:	0800ab3d 	.word	0x0800ab3d
 800ab6c:	0800abc1 	.word	0x0800abc1
 800ab70:	0800ab3d 	.word	0x0800ab3d
 800ab74:	0800ab3d 	.word	0x0800ab3d
 800ab78:	0800ab3d 	.word	0x0800ab3d
 800ab7c:	0800ab3d 	.word	0x0800ab3d
 800ab80:	0800accd 	.word	0x0800accd
 800ab84:	0800abf1 	.word	0x0800abf1
 800ab88:	0800acaf 	.word	0x0800acaf
 800ab8c:	0800ab3d 	.word	0x0800ab3d
 800ab90:	0800ab3d 	.word	0x0800ab3d
 800ab94:	0800acef 	.word	0x0800acef
 800ab98:	0800ab3d 	.word	0x0800ab3d
 800ab9c:	0800abf1 	.word	0x0800abf1
 800aba0:	0800ab3d 	.word	0x0800ab3d
 800aba4:	0800ab3d 	.word	0x0800ab3d
 800aba8:	0800acb7 	.word	0x0800acb7
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	1d1a      	adds	r2, r3, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abbc:	2301      	movs	r3, #1
 800abbe:	e0a3      	b.n	800ad08 <_printf_i+0x1f4>
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	6829      	ldr	r1, [r5, #0]
 800abc4:	0606      	lsls	r6, r0, #24
 800abc6:	f101 0304 	add.w	r3, r1, #4
 800abca:	d50a      	bpl.n	800abe2 <_printf_i+0xce>
 800abcc:	680e      	ldr	r6, [r1, #0]
 800abce:	602b      	str	r3, [r5, #0]
 800abd0:	2e00      	cmp	r6, #0
 800abd2:	da03      	bge.n	800abdc <_printf_i+0xc8>
 800abd4:	232d      	movs	r3, #45	; 0x2d
 800abd6:	4276      	negs	r6, r6
 800abd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abdc:	485e      	ldr	r0, [pc, #376]	; (800ad58 <_printf_i+0x244>)
 800abde:	230a      	movs	r3, #10
 800abe0:	e019      	b.n	800ac16 <_printf_i+0x102>
 800abe2:	680e      	ldr	r6, [r1, #0]
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abea:	bf18      	it	ne
 800abec:	b236      	sxthne	r6, r6
 800abee:	e7ef      	b.n	800abd0 <_printf_i+0xbc>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	6820      	ldr	r0, [r4, #0]
 800abf4:	1d19      	adds	r1, r3, #4
 800abf6:	6029      	str	r1, [r5, #0]
 800abf8:	0601      	lsls	r1, r0, #24
 800abfa:	d501      	bpl.n	800ac00 <_printf_i+0xec>
 800abfc:	681e      	ldr	r6, [r3, #0]
 800abfe:	e002      	b.n	800ac06 <_printf_i+0xf2>
 800ac00:	0646      	lsls	r6, r0, #25
 800ac02:	d5fb      	bpl.n	800abfc <_printf_i+0xe8>
 800ac04:	881e      	ldrh	r6, [r3, #0]
 800ac06:	4854      	ldr	r0, [pc, #336]	; (800ad58 <_printf_i+0x244>)
 800ac08:	2f6f      	cmp	r7, #111	; 0x6f
 800ac0a:	bf0c      	ite	eq
 800ac0c:	2308      	moveq	r3, #8
 800ac0e:	230a      	movne	r3, #10
 800ac10:	2100      	movs	r1, #0
 800ac12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac16:	6865      	ldr	r5, [r4, #4]
 800ac18:	60a5      	str	r5, [r4, #8]
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	bfa2      	ittt	ge
 800ac1e:	6821      	ldrge	r1, [r4, #0]
 800ac20:	f021 0104 	bicge.w	r1, r1, #4
 800ac24:	6021      	strge	r1, [r4, #0]
 800ac26:	b90e      	cbnz	r6, 800ac2c <_printf_i+0x118>
 800ac28:	2d00      	cmp	r5, #0
 800ac2a:	d04d      	beq.n	800acc8 <_printf_i+0x1b4>
 800ac2c:	4615      	mov	r5, r2
 800ac2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac32:	fb03 6711 	mls	r7, r3, r1, r6
 800ac36:	5dc7      	ldrb	r7, [r0, r7]
 800ac38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac3c:	4637      	mov	r7, r6
 800ac3e:	42bb      	cmp	r3, r7
 800ac40:	460e      	mov	r6, r1
 800ac42:	d9f4      	bls.n	800ac2e <_printf_i+0x11a>
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d10b      	bne.n	800ac60 <_printf_i+0x14c>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	07de      	lsls	r6, r3, #31
 800ac4c:	d508      	bpl.n	800ac60 <_printf_i+0x14c>
 800ac4e:	6923      	ldr	r3, [r4, #16]
 800ac50:	6861      	ldr	r1, [r4, #4]
 800ac52:	4299      	cmp	r1, r3
 800ac54:	bfde      	ittt	le
 800ac56:	2330      	movle	r3, #48	; 0x30
 800ac58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac60:	1b52      	subs	r2, r2, r5
 800ac62:	6122      	str	r2, [r4, #16]
 800ac64:	f8cd a000 	str.w	sl, [sp]
 800ac68:	464b      	mov	r3, r9
 800ac6a:	aa03      	add	r2, sp, #12
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	4640      	mov	r0, r8
 800ac70:	f7ff fee2 	bl	800aa38 <_printf_common>
 800ac74:	3001      	adds	r0, #1
 800ac76:	d14c      	bne.n	800ad12 <_printf_i+0x1fe>
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7c:	b004      	add	sp, #16
 800ac7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac82:	4835      	ldr	r0, [pc, #212]	; (800ad58 <_printf_i+0x244>)
 800ac84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac88:	6829      	ldr	r1, [r5, #0]
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac90:	6029      	str	r1, [r5, #0]
 800ac92:	061d      	lsls	r5, r3, #24
 800ac94:	d514      	bpl.n	800acc0 <_printf_i+0x1ac>
 800ac96:	07df      	lsls	r7, r3, #31
 800ac98:	bf44      	itt	mi
 800ac9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac9e:	6023      	strmi	r3, [r4, #0]
 800aca0:	b91e      	cbnz	r6, 800acaa <_printf_i+0x196>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	f023 0320 	bic.w	r3, r3, #32
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	2310      	movs	r3, #16
 800acac:	e7b0      	b.n	800ac10 <_printf_i+0xfc>
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	f043 0320 	orr.w	r3, r3, #32
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	2378      	movs	r3, #120	; 0x78
 800acb8:	4828      	ldr	r0, [pc, #160]	; (800ad5c <_printf_i+0x248>)
 800acba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acbe:	e7e3      	b.n	800ac88 <_printf_i+0x174>
 800acc0:	0659      	lsls	r1, r3, #25
 800acc2:	bf48      	it	mi
 800acc4:	b2b6      	uxthmi	r6, r6
 800acc6:	e7e6      	b.n	800ac96 <_printf_i+0x182>
 800acc8:	4615      	mov	r5, r2
 800acca:	e7bb      	b.n	800ac44 <_printf_i+0x130>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	6826      	ldr	r6, [r4, #0]
 800acd0:	6961      	ldr	r1, [r4, #20]
 800acd2:	1d18      	adds	r0, r3, #4
 800acd4:	6028      	str	r0, [r5, #0]
 800acd6:	0635      	lsls	r5, r6, #24
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	d501      	bpl.n	800ace0 <_printf_i+0x1cc>
 800acdc:	6019      	str	r1, [r3, #0]
 800acde:	e002      	b.n	800ace6 <_printf_i+0x1d2>
 800ace0:	0670      	lsls	r0, r6, #25
 800ace2:	d5fb      	bpl.n	800acdc <_printf_i+0x1c8>
 800ace4:	8019      	strh	r1, [r3, #0]
 800ace6:	2300      	movs	r3, #0
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	4615      	mov	r5, r2
 800acec:	e7ba      	b.n	800ac64 <_printf_i+0x150>
 800acee:	682b      	ldr	r3, [r5, #0]
 800acf0:	1d1a      	adds	r2, r3, #4
 800acf2:	602a      	str	r2, [r5, #0]
 800acf4:	681d      	ldr	r5, [r3, #0]
 800acf6:	6862      	ldr	r2, [r4, #4]
 800acf8:	2100      	movs	r1, #0
 800acfa:	4628      	mov	r0, r5
 800acfc:	f7f5 fa88 	bl	8000210 <memchr>
 800ad00:	b108      	cbz	r0, 800ad06 <_printf_i+0x1f2>
 800ad02:	1b40      	subs	r0, r0, r5
 800ad04:	6060      	str	r0, [r4, #4]
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	6123      	str	r3, [r4, #16]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad10:	e7a8      	b.n	800ac64 <_printf_i+0x150>
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4649      	mov	r1, r9
 800ad18:	4640      	mov	r0, r8
 800ad1a:	47d0      	blx	sl
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d0ab      	beq.n	800ac78 <_printf_i+0x164>
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	079b      	lsls	r3, r3, #30
 800ad24:	d413      	bmi.n	800ad4e <_printf_i+0x23a>
 800ad26:	68e0      	ldr	r0, [r4, #12]
 800ad28:	9b03      	ldr	r3, [sp, #12]
 800ad2a:	4298      	cmp	r0, r3
 800ad2c:	bfb8      	it	lt
 800ad2e:	4618      	movlt	r0, r3
 800ad30:	e7a4      	b.n	800ac7c <_printf_i+0x168>
 800ad32:	2301      	movs	r3, #1
 800ad34:	4632      	mov	r2, r6
 800ad36:	4649      	mov	r1, r9
 800ad38:	4640      	mov	r0, r8
 800ad3a:	47d0      	blx	sl
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d09b      	beq.n	800ac78 <_printf_i+0x164>
 800ad40:	3501      	adds	r5, #1
 800ad42:	68e3      	ldr	r3, [r4, #12]
 800ad44:	9903      	ldr	r1, [sp, #12]
 800ad46:	1a5b      	subs	r3, r3, r1
 800ad48:	42ab      	cmp	r3, r5
 800ad4a:	dcf2      	bgt.n	800ad32 <_printf_i+0x21e>
 800ad4c:	e7eb      	b.n	800ad26 <_printf_i+0x212>
 800ad4e:	2500      	movs	r5, #0
 800ad50:	f104 0619 	add.w	r6, r4, #25
 800ad54:	e7f5      	b.n	800ad42 <_printf_i+0x22e>
 800ad56:	bf00      	nop
 800ad58:	0800b1a2 	.word	0x0800b1a2
 800ad5c:	0800b1b3 	.word	0x0800b1b3

0800ad60 <memmove>:
 800ad60:	4288      	cmp	r0, r1
 800ad62:	b510      	push	{r4, lr}
 800ad64:	eb01 0402 	add.w	r4, r1, r2
 800ad68:	d902      	bls.n	800ad70 <memmove+0x10>
 800ad6a:	4284      	cmp	r4, r0
 800ad6c:	4623      	mov	r3, r4
 800ad6e:	d807      	bhi.n	800ad80 <memmove+0x20>
 800ad70:	1e43      	subs	r3, r0, #1
 800ad72:	42a1      	cmp	r1, r4
 800ad74:	d008      	beq.n	800ad88 <memmove+0x28>
 800ad76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad7e:	e7f8      	b.n	800ad72 <memmove+0x12>
 800ad80:	4402      	add	r2, r0
 800ad82:	4601      	mov	r1, r0
 800ad84:	428a      	cmp	r2, r1
 800ad86:	d100      	bne.n	800ad8a <memmove+0x2a>
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad92:	e7f7      	b.n	800ad84 <memmove+0x24>

0800ad94 <_free_r>:
 800ad94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d044      	beq.n	800ae24 <_free_r+0x90>
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	9001      	str	r0, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f1a1 0404 	sub.w	r4, r1, #4
 800ada6:	bfb8      	it	lt
 800ada8:	18e4      	addlt	r4, r4, r3
 800adaa:	f000 f913 	bl	800afd4 <__malloc_lock>
 800adae:	4a1e      	ldr	r2, [pc, #120]	; (800ae28 <_free_r+0x94>)
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	6813      	ldr	r3, [r2, #0]
 800adb4:	b933      	cbnz	r3, 800adc4 <_free_r+0x30>
 800adb6:	6063      	str	r3, [r4, #4]
 800adb8:	6014      	str	r4, [r2, #0]
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	f000 b90e 	b.w	800afe0 <__malloc_unlock>
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	d908      	bls.n	800adda <_free_r+0x46>
 800adc8:	6825      	ldr	r5, [r4, #0]
 800adca:	1961      	adds	r1, r4, r5
 800adcc:	428b      	cmp	r3, r1
 800adce:	bf01      	itttt	eq
 800add0:	6819      	ldreq	r1, [r3, #0]
 800add2:	685b      	ldreq	r3, [r3, #4]
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	e7ed      	b.n	800adb6 <_free_r+0x22>
 800adda:	461a      	mov	r2, r3
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	b10b      	cbz	r3, 800ade4 <_free_r+0x50>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d9fa      	bls.n	800adda <_free_r+0x46>
 800ade4:	6811      	ldr	r1, [r2, #0]
 800ade6:	1855      	adds	r5, r2, r1
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d10b      	bne.n	800ae04 <_free_r+0x70>
 800adec:	6824      	ldr	r4, [r4, #0]
 800adee:	4421      	add	r1, r4
 800adf0:	1854      	adds	r4, r2, r1
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	d1e0      	bne.n	800adba <_free_r+0x26>
 800adf8:	681c      	ldr	r4, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	6053      	str	r3, [r2, #4]
 800adfe:	4421      	add	r1, r4
 800ae00:	6011      	str	r1, [r2, #0]
 800ae02:	e7da      	b.n	800adba <_free_r+0x26>
 800ae04:	d902      	bls.n	800ae0c <_free_r+0x78>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6003      	str	r3, [r0, #0]
 800ae0a:	e7d6      	b.n	800adba <_free_r+0x26>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf04      	itt	eq
 800ae14:	6819      	ldreq	r1, [r3, #0]
 800ae16:	685b      	ldreq	r3, [r3, #4]
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	bf04      	itt	eq
 800ae1c:	1949      	addeq	r1, r1, r5
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	6054      	str	r4, [r2, #4]
 800ae22:	e7ca      	b.n	800adba <_free_r+0x26>
 800ae24:	b003      	add	sp, #12
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	20000564 	.word	0x20000564

0800ae2c <sbrk_aligned>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4e0e      	ldr	r6, [pc, #56]	; (800ae68 <sbrk_aligned+0x3c>)
 800ae30:	460c      	mov	r4, r1
 800ae32:	6831      	ldr	r1, [r6, #0]
 800ae34:	4605      	mov	r5, r0
 800ae36:	b911      	cbnz	r1, 800ae3e <sbrk_aligned+0x12>
 800ae38:	f000 f8bc 	bl	800afb4 <_sbrk_r>
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 f8b7 	bl	800afb4 <_sbrk_r>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d00a      	beq.n	800ae60 <sbrk_aligned+0x34>
 800ae4a:	1cc4      	adds	r4, r0, #3
 800ae4c:	f024 0403 	bic.w	r4, r4, #3
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d007      	beq.n	800ae64 <sbrk_aligned+0x38>
 800ae54:	1a21      	subs	r1, r4, r0
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f8ac 	bl	800afb4 <_sbrk_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d101      	bne.n	800ae64 <sbrk_aligned+0x38>
 800ae60:	f04f 34ff 	mov.w	r4, #4294967295
 800ae64:	4620      	mov	r0, r4
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	20000568 	.word	0x20000568

0800ae6c <_malloc_r>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	1ccd      	adds	r5, r1, #3
 800ae72:	f025 0503 	bic.w	r5, r5, #3
 800ae76:	3508      	adds	r5, #8
 800ae78:	2d0c      	cmp	r5, #12
 800ae7a:	bf38      	it	cc
 800ae7c:	250c      	movcc	r5, #12
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	4607      	mov	r7, r0
 800ae82:	db01      	blt.n	800ae88 <_malloc_r+0x1c>
 800ae84:	42a9      	cmp	r1, r5
 800ae86:	d905      	bls.n	800ae94 <_malloc_r+0x28>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	4630      	mov	r0, r6
 800ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae94:	4e2e      	ldr	r6, [pc, #184]	; (800af50 <_malloc_r+0xe4>)
 800ae96:	f000 f89d 	bl	800afd4 <__malloc_lock>
 800ae9a:	6833      	ldr	r3, [r6, #0]
 800ae9c:	461c      	mov	r4, r3
 800ae9e:	bb34      	cbnz	r4, 800aeee <_malloc_r+0x82>
 800aea0:	4629      	mov	r1, r5
 800aea2:	4638      	mov	r0, r7
 800aea4:	f7ff ffc2 	bl	800ae2c <sbrk_aligned>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	4604      	mov	r4, r0
 800aeac:	d14d      	bne.n	800af4a <_malloc_r+0xde>
 800aeae:	6834      	ldr	r4, [r6, #0]
 800aeb0:	4626      	mov	r6, r4
 800aeb2:	2e00      	cmp	r6, #0
 800aeb4:	d140      	bne.n	800af38 <_malloc_r+0xcc>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4638      	mov	r0, r7
 800aebc:	eb04 0803 	add.w	r8, r4, r3
 800aec0:	f000 f878 	bl	800afb4 <_sbrk_r>
 800aec4:	4580      	cmp	r8, r0
 800aec6:	d13a      	bne.n	800af3e <_malloc_r+0xd2>
 800aec8:	6821      	ldr	r1, [r4, #0]
 800aeca:	3503      	adds	r5, #3
 800aecc:	1a6d      	subs	r5, r5, r1
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	4629      	mov	r1, r5
 800aedc:	4638      	mov	r0, r7
 800aede:	f7ff ffa5 	bl	800ae2c <sbrk_aligned>
 800aee2:	3001      	adds	r0, #1
 800aee4:	d02b      	beq.n	800af3e <_malloc_r+0xd2>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	442b      	add	r3, r5
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	e00e      	b.n	800af0c <_malloc_r+0xa0>
 800aeee:	6822      	ldr	r2, [r4, #0]
 800aef0:	1b52      	subs	r2, r2, r5
 800aef2:	d41e      	bmi.n	800af32 <_malloc_r+0xc6>
 800aef4:	2a0b      	cmp	r2, #11
 800aef6:	d916      	bls.n	800af26 <_malloc_r+0xba>
 800aef8:	1961      	adds	r1, r4, r5
 800aefa:	42a3      	cmp	r3, r4
 800aefc:	6025      	str	r5, [r4, #0]
 800aefe:	bf18      	it	ne
 800af00:	6059      	strne	r1, [r3, #4]
 800af02:	6863      	ldr	r3, [r4, #4]
 800af04:	bf08      	it	eq
 800af06:	6031      	streq	r1, [r6, #0]
 800af08:	5162      	str	r2, [r4, r5]
 800af0a:	604b      	str	r3, [r1, #4]
 800af0c:	4638      	mov	r0, r7
 800af0e:	f104 060b 	add.w	r6, r4, #11
 800af12:	f000 f865 	bl	800afe0 <__malloc_unlock>
 800af16:	f026 0607 	bic.w	r6, r6, #7
 800af1a:	1d23      	adds	r3, r4, #4
 800af1c:	1af2      	subs	r2, r6, r3
 800af1e:	d0b6      	beq.n	800ae8e <_malloc_r+0x22>
 800af20:	1b9b      	subs	r3, r3, r6
 800af22:	50a3      	str	r3, [r4, r2]
 800af24:	e7b3      	b.n	800ae8e <_malloc_r+0x22>
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	bf0c      	ite	eq
 800af2c:	6032      	streq	r2, [r6, #0]
 800af2e:	605a      	strne	r2, [r3, #4]
 800af30:	e7ec      	b.n	800af0c <_malloc_r+0xa0>
 800af32:	4623      	mov	r3, r4
 800af34:	6864      	ldr	r4, [r4, #4]
 800af36:	e7b2      	b.n	800ae9e <_malloc_r+0x32>
 800af38:	4634      	mov	r4, r6
 800af3a:	6876      	ldr	r6, [r6, #4]
 800af3c:	e7b9      	b.n	800aeb2 <_malloc_r+0x46>
 800af3e:	230c      	movs	r3, #12
 800af40:	603b      	str	r3, [r7, #0]
 800af42:	4638      	mov	r0, r7
 800af44:	f000 f84c 	bl	800afe0 <__malloc_unlock>
 800af48:	e7a1      	b.n	800ae8e <_malloc_r+0x22>
 800af4a:	6025      	str	r5, [r4, #0]
 800af4c:	e7de      	b.n	800af0c <_malloc_r+0xa0>
 800af4e:	bf00      	nop
 800af50:	20000564 	.word	0x20000564

0800af54 <_realloc_r>:
 800af54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af58:	4680      	mov	r8, r0
 800af5a:	4614      	mov	r4, r2
 800af5c:	460e      	mov	r6, r1
 800af5e:	b921      	cbnz	r1, 800af6a <_realloc_r+0x16>
 800af60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af64:	4611      	mov	r1, r2
 800af66:	f7ff bf81 	b.w	800ae6c <_malloc_r>
 800af6a:	b92a      	cbnz	r2, 800af78 <_realloc_r+0x24>
 800af6c:	f7ff ff12 	bl	800ad94 <_free_r>
 800af70:	4625      	mov	r5, r4
 800af72:	4628      	mov	r0, r5
 800af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af78:	f000 f838 	bl	800afec <_malloc_usable_size_r>
 800af7c:	4284      	cmp	r4, r0
 800af7e:	4607      	mov	r7, r0
 800af80:	d802      	bhi.n	800af88 <_realloc_r+0x34>
 800af82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af86:	d812      	bhi.n	800afae <_realloc_r+0x5a>
 800af88:	4621      	mov	r1, r4
 800af8a:	4640      	mov	r0, r8
 800af8c:	f7ff ff6e 	bl	800ae6c <_malloc_r>
 800af90:	4605      	mov	r5, r0
 800af92:	2800      	cmp	r0, #0
 800af94:	d0ed      	beq.n	800af72 <_realloc_r+0x1e>
 800af96:	42bc      	cmp	r4, r7
 800af98:	4622      	mov	r2, r4
 800af9a:	4631      	mov	r1, r6
 800af9c:	bf28      	it	cs
 800af9e:	463a      	movcs	r2, r7
 800afa0:	f7ff fb02 	bl	800a5a8 <memcpy>
 800afa4:	4631      	mov	r1, r6
 800afa6:	4640      	mov	r0, r8
 800afa8:	f7ff fef4 	bl	800ad94 <_free_r>
 800afac:	e7e1      	b.n	800af72 <_realloc_r+0x1e>
 800afae:	4635      	mov	r5, r6
 800afb0:	e7df      	b.n	800af72 <_realloc_r+0x1e>
	...

0800afb4 <_sbrk_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d06      	ldr	r5, [pc, #24]	; (800afd0 <_sbrk_r+0x1c>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	f7f8 f808 	bl	8002fd4 <_sbrk>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_sbrk_r+0x1a>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_sbrk_r+0x1a>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	2000056c 	.word	0x2000056c

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_lock+0x8>)
 800afd6:	f000 b811 	b.w	800affc <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	20000570 	.word	0x20000570

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f000 b80c 	b.w	800affe <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	20000570 	.word	0x20000570

0800afec <_malloc_usable_size_r>:
 800afec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff0:	1f18      	subs	r0, r3, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfbc      	itt	lt
 800aff6:	580b      	ldrlt	r3, [r1, r0]
 800aff8:	18c0      	addlt	r0, r0, r3
 800affa:	4770      	bx	lr

0800affc <__retarget_lock_acquire_recursive>:
 800affc:	4770      	bx	lr

0800affe <__retarget_lock_release_recursive>:
 800affe:	4770      	bx	lr

0800b000 <_init>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr

0800b00c <_fini>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	bf00      	nop
 800b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b012:	bc08      	pop	{r3}
 800b014:	469e      	mov	lr, r3
 800b016:	4770      	bx	lr
